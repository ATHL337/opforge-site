[{"content":"OPFORGE (Operational Forged Readiness for Generation and Emulation) is a purpose-built cyber lab and portfolio platform developed by H.Y.P.R., a senior cyber warfare operator.\nThis project fuses red team emulation, detection engineering, and AI-driven analytics into a unified range built for realism, scalability, and learning impact.\nüéØ Mission Create a lab environment that demonstrates real-world adversary behavior and detection response ‚Äî with automation, analytics, and operational rigor. OPFORGE is more than just a cyber range: it\u0026rsquo;s a full-stack capability portfolio.\nüß† Why It Matters Modern cyber operations demand more than checklists and tool walkthroughs. OPFORGE showcases:\nSegmented network emulation across red, blue, and cloud environments Detection engineering pipelines powered by Winlogbeat, Zeek, and Logstash AI/ML-enhanced triage through Jupyter, anomaly modeling, and data science Portfolio-grade infrastructure that mirrors real mission environments üß± What\u0026rsquo;s Under the Hood Custom-built virtual lab using VMware Workstation Pro Ubuntu and Windows 10 templates, hardened and cloned pfSense-based segmentation: CSOCINFRA, DMZRED, LANWORKSTATIONS, ADINFRA Sliver, BloodHound, Impacket, Sysmon, OpenSearch, and more üîÅ Continuously Developed This site documents lab builds, detection strategies, red/blue playbooks, and ML research as the lab matures toward integration with platforms like JHU APL and DOE/NNSA-aligned objectives.\nWant to contribute ideas or follow the project?\nüì¨ Reach out via LinkedIn üìñ Read the latest posts üß™ Explore the detection pipeline ","permalink":"https://opforge.dev/about/","summary":"\u003cp\u003e\u003cstrong\u003eOPFORGE\u003c/strong\u003e (Operational Forged Readiness for Generation and Emulation) is a purpose-built cyber lab and portfolio platform developed by H.Y.P.R., a senior  cyber warfare operator.\u003c/p\u003e\n\u003cp\u003eThis project fuses red team emulation, detection engineering, and AI-driven analytics into a unified range built for realism, scalability, and learning impact.\u003c/p\u003e\n\u003ch2 id=\"-mission\"\u003eüéØ Mission\u003c/h2\u003e\n\u003cp\u003eCreate a lab environment that demonstrates real-world adversary behavior and detection response ‚Äî with automation, analytics, and operational rigor. OPFORGE is more than just a cyber range: it\u0026rsquo;s a full-stack capability portfolio.\u003c/p\u003e","title":"About"},{"content":"base-ubuntu-2204-template OS: Ubuntu 22.04 LTS Minimal Uses: Cloning source for opf-red01, opf-log01, opf-ai01, opf-cloud01 Hardened baseline with: UFW firewall SSH key-based auth Git, Python, pip pre-installed Snapshot name: Clean Install ‚Äì Ready for Clone base-windows10-template OS: Windows 10 Pro 22H2 (fully patched) Uses: Cloning source for opf-mbr01, future victims Tools installed via Chocolatey: Sysmon, Winlogbeat, VSCode, Wireshark, Sysinternals Pre-Sysprep and snapshot-ready ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-template-builds/","summary":"\u003ch2 id=\"base-ubuntu-2204-template\"\u003ebase-ubuntu-2204-template\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOS: Ubuntu 22.04 LTS Minimal\u003c/li\u003e\n\u003cli\u003eUses: Cloning source for \u003ccode\u003eopf-red01\u003c/code\u003e, \u003ccode\u003eopf-log01\u003c/code\u003e, \u003ccode\u003eopf-ai01\u003c/code\u003e, \u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eHardened baseline with:\n\u003cul\u003e\n\u003cli\u003eUFW firewall\u003c/li\u003e\n\u003cli\u003eSSH key-based auth\u003c/li\u003e\n\u003cli\u003eGit, Python, pip pre-installed\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSnapshot name: \u003ccode\u003eClean Install ‚Äì Ready for Clone\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"base-windows10-template\"\u003ebase-windows10-template\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOS: Windows 10 Pro 22H2 (fully patched)\u003c/li\u003e\n\u003cli\u003eUses: Cloning source for \u003ccode\u003eopf-mbr01\u003c/code\u003e, future victims\u003c/li\u003e\n\u003cli\u003eTools installed via Chocolatey:\n\u003cul\u003e\n\u003cli\u003eSysmon, Winlogbeat, VSCode, Wireshark, Sysinternals\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ePre-Sysprep and snapshot-ready\u003c/li\u003e\n\u003c/ul\u003e","title":"Building Hardened Base Templates for Red, Blue, and AI VMs in OPFORGE"},{"content":"Segments CSOCINFRA (192.168.20.0/24): Houses opf-log01 (SIEM) and opf-ai01 (ML detection) LANWORKSTATIONS (192.168.30.0/24): Contains opf-mbr01 and future endpoints DMZRED (192.168.22.0/24): Hosts attacker targets like opf-cloud01 ADINFRA (192.168.40.0/24): Supports opf-dc01 and GPO testing Example Host Assignments Host IP Address Segment opf-fw01 192.168.1.24 (WAN) pfSense router opf-dc01 192.168.40.100 ADINFRA opf-mbr01 192.168.30.101 LANWORKSTATIONS opf-red01 192.168.22.50 DMZRED opf-log01 192.168.20.12 CSOCINFRA ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-network-design/","summary":"\u003ch2 id=\"segments\"\u003eSegments\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCSOCINFRA (192.168.20.0/24)\u003c/strong\u003e: Houses \u003ccode\u003eopf-log01\u003c/code\u003e (SIEM) and \u003ccode\u003eopf-ai01\u003c/code\u003e (ML detection)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLANWORKSTATIONS (192.168.30.0/24)\u003c/strong\u003e: Contains \u003ccode\u003eopf-mbr01\u003c/code\u003e and future endpoints\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDMZRED (192.168.22.0/24)\u003c/strong\u003e: Hosts attacker targets like \u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eADINFRA (192.168.40.0/24)\u003c/strong\u003e: Supports \u003ccode\u003eopf-dc01\u003c/code\u003e and GPO testing\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"example-host-assignments\"\u003eExample Host Assignments\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eHost\u003c/th\u003e\n          \u003cth\u003eIP Address\u003c/th\u003e\n          \u003cth\u003eSegment\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-fw01\u003c/td\u003e\n          \u003ctd\u003e192.168.1.24 (WAN)\u003c/td\u003e\n          \u003ctd\u003epfSense router\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-dc01\u003c/td\u003e\n          \u003ctd\u003e192.168.40.100\u003c/td\u003e\n          \u003ctd\u003eADINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-mbr01\u003c/td\u003e\n          \u003ctd\u003e192.168.30.101\u003c/td\u003e\n          \u003ctd\u003eLANWORKSTATIONS\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-red01\u003c/td\u003e\n          \u003ctd\u003e192.168.22.50\u003c/td\u003e\n          \u003ctd\u003eDMZRED\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-log01\u003c/td\u003e\n          \u003ctd\u003e192.168.20.12\u003c/td\u003e\n          \u003ctd\u003eCSOCINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"Designing a Segmented Cyber Lab: OPFORGE Network Architecture"},{"content":"OPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\nEvolution Timeline Phase 1: Initial Sandbox Single VM (SOF-ELK) Flat network, no segmentation Manual log ingestion Phase 2: Tactical Expansion Added pfSense (opf-fw01) Introduced segmentation: CSOCINFRA, DMZRED, LANWORKSTATIONS, ADINFRA First red team emulation with opf-red01 Winlogbeat and Sysmon on endpoints Phase 3: Professionalization Cloned base templates (base-ubuntu-2204-template, base-windows10-template) VM-specific roles: opf-ai01, opf-log01, opf-mbr01, etc. AI and ML integration via Jupyter (opf-ai01) Multi-tiered ingest pipeline (Zeek ‚Üí Logstash ‚Üí OpenSearch) Lessons Learned Legacy OS images break modern tools Cloning base templates improves consistency Network segmentation is essential for realistic detection engineering ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-infra-evolution/","summary":"\u003cp\u003eOPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\u003c/p\u003e\n\u003ch2 id=\"evolution-timeline\"\u003eEvolution Timeline\u003c/h2\u003e\n\u003ch3 id=\"phase-1-initial-sandbox\"\u003ePhase 1: Initial Sandbox\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSingle VM (SOF-ELK)\u003c/li\u003e\n\u003cli\u003eFlat network, no segmentation\u003c/li\u003e\n\u003cli\u003eManual log ingestion\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-2-tactical-expansion\"\u003ePhase 2: Tactical Expansion\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eAdded pfSense (\u003ccode\u003eopf-fw01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eIntroduced segmentation: \u003ccode\u003eCSOCINFRA\u003c/code\u003e, \u003ccode\u003eDMZRED\u003c/code\u003e, \u003ccode\u003eLANWORKSTATIONS\u003c/code\u003e, \u003ccode\u003eADINFRA\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eFirst red team emulation with \u003ccode\u003eopf-red01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eWinlogbeat and Sysmon on endpoints\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-3-professionalization\"\u003ePhase 3: Professionalization\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCloned base templates (\u003ccode\u003ebase-ubuntu-2204-template\u003c/code\u003e, \u003ccode\u003ebase-windows10-template\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eVM-specific roles: \u003ccode\u003eopf-ai01\u003c/code\u003e, \u003ccode\u003eopf-log01\u003c/code\u003e, \u003ccode\u003eopf-mbr01\u003c/code\u003e, etc.\u003c/li\u003e\n\u003cli\u003eAI and ML integration via Jupyter (\u003ccode\u003eopf-ai01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eMulti-tiered ingest pipeline (Zeek ‚Üí Logstash ‚Üí OpenSearch)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lessons-learned\"\u003eLessons Learned\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLegacy OS images break modern tools\u003c/li\u003e\n\u003cli\u003eCloning base templates improves consistency\u003c/li\u003e\n\u003cli\u003eNetwork segmentation is essential for realistic detection engineering\u003c/li\u003e\n\u003c/ul\u003e","title":"From Sandbox to Cyber Range: How OPFORGE Evolved into a Professional Portfolio Lab"},{"content":"OPFORGE Base Templates base-ubuntu-2204-template OS: Ubuntu 22.04 LTS Minimal Uses: Cloning source for opf-red01, opf-log01, opf-ai01, opf-cloud01 Hardened baseline with: UFW firewall SSH key-based auth Git, Python, pip pre-installed Snapshot name: Clean Install ‚Äì Ready for Clone base-windows10-template OS: Windows 10 Pro 22H2 (fully patched) Uses: Cloning source for opf-mbr01, future victims Tools installed via Chocolatey: Sysmon, Winlogbeat, VSCode, Wireshark, Sysinternals Pre-Sysprep and snapshot-ready ","permalink":"https://opforge.dev/docs/opf-template-notes/","summary":"\u003ch1 id=\"opforge-base-templates\"\u003eOPFORGE Base Templates\u003c/h1\u003e\n\u003ch2 id=\"base-ubuntu-2204-template\"\u003ebase-ubuntu-2204-template\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOS: Ubuntu 22.04 LTS Minimal\u003c/li\u003e\n\u003cli\u003eUses: Cloning source for \u003ccode\u003eopf-red01\u003c/code\u003e, \u003ccode\u003eopf-log01\u003c/code\u003e, \u003ccode\u003eopf-ai01\u003c/code\u003e, \u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eHardened baseline with:\n\u003cul\u003e\n\u003cli\u003eUFW firewall\u003c/li\u003e\n\u003cli\u003eSSH key-based auth\u003c/li\u003e\n\u003cli\u003eGit, Python, pip pre-installed\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSnapshot name: \u003ccode\u003eClean Install ‚Äì Ready for Clone\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"base-windows10-template\"\u003ebase-windows10-template\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOS: Windows 10 Pro 22H2 (fully patched)\u003c/li\u003e\n\u003cli\u003eUses: Cloning source for \u003ccode\u003eopf-mbr01\u003c/code\u003e, future victims\u003c/li\u003e\n\u003cli\u003eTools installed via Chocolatey:\n\u003cul\u003e\n\u003cli\u003eSysmon, Winlogbeat, VSCode, Wireshark, Sysinternals\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ePre-Sysprep and snapshot-ready\u003c/li\u003e\n\u003c/ul\u003e","title":"OPFORGE Base Templates"},{"content":"OPFORGE Infrastructure Overview Overview OPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\nEvolution Timeline Phase 1: Initial Sandbox Single VM (SOF-ELK) Flat network, no segmentation Manual log ingestion Phase 2: Tactical Expansion Added pfSense (opf-fw01) Introduced segmentation: CSOCINFRA, DMZRED, LANWORKSTATIONS, ADINFRA First red team emulation with opf-red01 Winlogbeat and Sysmon on endpoints Phase 3: Professionalization Cloned base templates (base-ubuntu-2204-template, base-windows10-template) VM-specific roles: opf-ai01, opf-log01, opf-mbr01, etc. AI and ML integration via Jupyter (opf-ai01) Multi-tiered ingest pipeline (Zeek ‚Üí Logstash ‚Üí OpenSearch) Lessons Learned Legacy OS images break modern tools Cloning base templates improves consistency Network segmentation is essential for realistic detection engineering ","permalink":"https://opforge.dev/docs/opf-infra/","summary":"\u003ch1 id=\"opforge-infrastructure-overview\"\u003eOPFORGE Infrastructure Overview\u003c/h1\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eOPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\u003c/p\u003e\n\u003ch2 id=\"evolution-timeline\"\u003eEvolution Timeline\u003c/h2\u003e\n\u003ch3 id=\"phase-1-initial-sandbox\"\u003ePhase 1: Initial Sandbox\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSingle VM (SOF-ELK)\u003c/li\u003e\n\u003cli\u003eFlat network, no segmentation\u003c/li\u003e\n\u003cli\u003eManual log ingestion\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-2-tactical-expansion\"\u003ePhase 2: Tactical Expansion\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eAdded pfSense (\u003ccode\u003eopf-fw01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eIntroduced segmentation: \u003ccode\u003eCSOCINFRA\u003c/code\u003e, \u003ccode\u003eDMZRED\u003c/code\u003e, \u003ccode\u003eLANWORKSTATIONS\u003c/code\u003e, \u003ccode\u003eADINFRA\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eFirst red team emulation with \u003ccode\u003eopf-red01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eWinlogbeat and Sysmon on endpoints\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-3-professionalization\"\u003ePhase 3: Professionalization\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCloned base templates (\u003ccode\u003ebase-ubuntu-2204-template\u003c/code\u003e, \u003ccode\u003ebase-windows10-template\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eVM-specific roles: \u003ccode\u003eopf-ai01\u003c/code\u003e, \u003ccode\u003eopf-log01\u003c/code\u003e, \u003ccode\u003eopf-mbr01\u003c/code\u003e, etc.\u003c/li\u003e\n\u003cli\u003eAI and ML integration via Jupyter (\u003ccode\u003eopf-ai01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eMulti-tiered ingest pipeline (Zeek ‚Üí Logstash ‚Üí OpenSearch)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lessons-learned\"\u003eLessons Learned\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLegacy OS images break modern tools\u003c/li\u003e\n\u003cli\u003eCloning base templates improves consistency\u003c/li\u003e\n\u003cli\u003eNetwork segmentation is essential for realistic detection engineering\u003c/li\u003e\n\u003c/ul\u003e","title":"OPFORGE Infrastructure Overview"},{"content":"OPFORGE Network Layout Segments CSOCINFRA (192.168.20.0/24): Houses opf-log01 (SIEM) and opf-ai01 (ML detection) LANWORKSTATIONS (192.168.30.0/24): Contains opf-mbr01 and future endpoints DMZRED (192.168.22.0/24): Hosts attacker targets like opf-cloud01 ADINFRA (192.168.40.0/24): Supports opf-dc01 and GPO testing Example Host Assignments Host IP Address Segment opf-fw01 192.168.1.24 (WAN) pfSense router opf-dc01 192.168.40.100 ADINFRA opf-mbr01 192.168.30.101 LANWORKSTATIONS opf-red01 192.168.22.50 DMZRED opf-log01 192.168.20.12 CSOCINFRA ","permalink":"https://opforge.dev/docs/opf-network-layout/","summary":"\u003ch1 id=\"opforge-network-layout\"\u003eOPFORGE Network Layout\u003c/h1\u003e\n\u003ch2 id=\"segments\"\u003eSegments\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCSOCINFRA (192.168.20.0/24)\u003c/strong\u003e: Houses \u003ccode\u003eopf-log01\u003c/code\u003e (SIEM) and \u003ccode\u003eopf-ai01\u003c/code\u003e (ML detection)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLANWORKSTATIONS (192.168.30.0/24)\u003c/strong\u003e: Contains \u003ccode\u003eopf-mbr01\u003c/code\u003e and future endpoints\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDMZRED (192.168.22.0/24)\u003c/strong\u003e: Hosts attacker targets like \u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eADINFRA (192.168.40.0/24)\u003c/strong\u003e: Supports \u003ccode\u003eopf-dc01\u003c/code\u003e and GPO testing\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"example-host-assignments\"\u003eExample Host Assignments\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eHost\u003c/th\u003e\n          \u003cth\u003eIP Address\u003c/th\u003e\n          \u003cth\u003eSegment\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-fw01\u003c/td\u003e\n          \u003ctd\u003e192.168.1.24 (WAN)\u003c/td\u003e\n          \u003ctd\u003epfSense router\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-dc01\u003c/td\u003e\n          \u003ctd\u003e192.168.40.100\u003c/td\u003e\n          \u003ctd\u003eADINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-mbr01\u003c/td\u003e\n          \u003ctd\u003e192.168.30.101\u003c/td\u003e\n          \u003ctd\u003eLANWORKSTATIONS\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-red01\u003c/td\u003e\n          \u003ctd\u003e192.168.22.50\u003c/td\u003e\n          \u003ctd\u003eDMZRED\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-log01\u003c/td\u003e\n          \u003ctd\u003e192.168.20.12\u003c/td\u003e\n          \u003ctd\u003eCSOCINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"OPFORGE Network Layout"},{"content":"OPFORGE VM Clone Map Template Clone Name Purpose base-ubuntu-2204-template opf-red01 Red Team operator box base-ubuntu-2204-template opf-log01 Log pipeline (Zeek, OpenSearch) base-ubuntu-2204-template opf-ai01 Jupyter + anomaly detection base-ubuntu-2204-template opf-cloud01 Targeted web app for attack base-windows10-template opf-mbr01 Domain-joined endpoint Notes All clones renamed post-creation Hostname, IP, and NICs customized per segment Clones are snapshot-friendly and scriptable ","permalink":"https://opforge.dev/docs/opf-clone-map/","summary":"\u003ch1 id=\"opforge-vm-clone-map\"\u003eOPFORGE VM Clone Map\u003c/h1\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eTemplate\u003c/th\u003e\n          \u003cth\u003eClone Name\u003c/th\u003e\n          \u003cth\u003ePurpose\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-red01\u003c/td\u003e\n          \u003ctd\u003eRed Team operator box\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-log01\u003c/td\u003e\n          \u003ctd\u003eLog pipeline (Zeek, OpenSearch)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-ai01\u003c/td\u003e\n          \u003ctd\u003eJupyter + anomaly detection\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-cloud01\u003c/td\u003e\n          \u003ctd\u003eTargeted web app for attack\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-windows10-template\u003c/td\u003e\n          \u003ctd\u003eopf-mbr01\u003c/td\u003e\n          \u003ctd\u003eDomain-joined endpoint\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAll clones renamed post-creation\u003c/li\u003e\n\u003cli\u003eHostname, IP, and NICs customized per segment\u003c/li\u003e\n\u003cli\u003eClones are snapshot-friendly and scriptable\u003c/li\u003e\n\u003c/ul\u003e","title":"OPFORGE VM CLone Map"},{"content":"Clone Map Template Clone Name Purpose base-ubuntu-2204-template opf-red01 Red Team operator box base-ubuntu-2204-template opf-log01 Log pipeline (Zeek, OpenSearch) base-ubuntu-2204-template opf-ai01 Jupyter + anomaly detection base-ubuntu-2204-template opf-cloud01 Targeted web app for attack base-windows10-template opf-mbr01 Domain-joined endpoint Lessons Learned Clone from snapshot, then personalize (hostname, NIC, IP) Use base templates with all dependencies pre-installed Maintain consistency across VM builds using scripting and snapshots ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-vm-cloning/","summary":"\u003ch2 id=\"clone-map\"\u003eClone Map\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eTemplate\u003c/th\u003e\n          \u003cth\u003eClone Name\u003c/th\u003e\n          \u003cth\u003ePurpose\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-red01\u003c/td\u003e\n          \u003ctd\u003eRed Team operator box\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-log01\u003c/td\u003e\n          \u003ctd\u003eLog pipeline (Zeek, OpenSearch)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-ai01\u003c/td\u003e\n          \u003ctd\u003eJupyter + anomaly detection\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-cloud01\u003c/td\u003e\n          \u003ctd\u003eTargeted web app for attack\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-windows10-template\u003c/td\u003e\n          \u003ctd\u003eopf-mbr01\u003c/td\u003e\n          \u003ctd\u003eDomain-joined endpoint\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"lessons-learned\"\u003eLessons Learned\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eClone from snapshot, then personalize (hostname, NIC, IP)\u003c/li\u003e\n\u003cli\u003eUse base templates with all dependencies pre-installed\u003c/li\u003e\n\u003cli\u003eMaintain consistency across VM builds using scripting and snapshots\u003c/li\u003e\n\u003c/ul\u003e","title":"Scaling OPFORGE: How I Clone and Manage Cyber Range VMs"}]