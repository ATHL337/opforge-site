[{"content":"base-ubuntu-2204-template OS: Ubuntu 22.04 LTS Minimal Uses: Cloning source for opf-red01, opf-log01, opf-ai01, opf-cloud01 Hardened baseline with: UFW firewall SSH key-based auth Git, Python, pip pre-installed Snapshot name: Clean Install – Ready for Clone base-windows10-template OS: Windows 10 Pro 22H2 (fully patched) Uses: Cloning source for opf-mbr01, future victims Tools installed via Chocolatey: Sysmon, Winlogbeat, VSCode, Wireshark, Sysinternals Pre-Sysprep and snapshot-ready ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-template-builds/","summary":"\u003ch2 id=\"base-ubuntu-2204-template\"\u003ebase-ubuntu-2204-template\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOS: Ubuntu 22.04 LTS Minimal\u003c/li\u003e\n\u003cli\u003eUses: Cloning source for \u003ccode\u003eopf-red01\u003c/code\u003e, \u003ccode\u003eopf-log01\u003c/code\u003e, \u003ccode\u003eopf-ai01\u003c/code\u003e, \u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eHardened baseline with:\n\u003cul\u003e\n\u003cli\u003eUFW firewall\u003c/li\u003e\n\u003cli\u003eSSH key-based auth\u003c/li\u003e\n\u003cli\u003eGit, Python, pip pre-installed\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSnapshot name: \u003ccode\u003eClean Install – Ready for Clone\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"base-windows10-template\"\u003ebase-windows10-template\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOS: Windows 10 Pro 22H2 (fully patched)\u003c/li\u003e\n\u003cli\u003eUses: Cloning source for \u003ccode\u003eopf-mbr01\u003c/code\u003e, future victims\u003c/li\u003e\n\u003cli\u003eTools installed via Chocolatey:\n\u003cul\u003e\n\u003cli\u003eSysmon, Winlogbeat, VSCode, Wireshark, Sysinternals\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ePre-Sysprep and snapshot-ready\u003c/li\u003e\n\u003c/ul\u003e","title":"Building Hardened Base Templates for Red, Blue, and AI VMs in OPFORGE"},{"content":"Segments CSOCINFRA (192.168.20.0/24): Houses opf-log01 (SIEM) and opf-ai01 (ML detection) LANWORKSTATIONS (192.168.30.0/24): Contains opf-mbr01 and future endpoints DMZRED (192.168.22.0/24): Hosts attacker targets like opf-cloud01 ADINFRA (192.168.40.0/24): Supports opf-dc01 and GPO testing Example Host Assignments Host IP Address Segment opf-fw01 192.168.1.24 (WAN) pfSense router opf-dc01 192.168.40.100 ADINFRA opf-mbr01 192.168.30.101 LANWORKSTATIONS opf-red01 192.168.22.50 DMZRED opf-log01 192.168.20.12 CSOCINFRA ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-network-design/","summary":"\u003ch2 id=\"segments\"\u003eSegments\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCSOCINFRA (192.168.20.0/24)\u003c/strong\u003e: Houses \u003ccode\u003eopf-log01\u003c/code\u003e (SIEM) and \u003ccode\u003eopf-ai01\u003c/code\u003e (ML detection)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLANWORKSTATIONS (192.168.30.0/24)\u003c/strong\u003e: Contains \u003ccode\u003eopf-mbr01\u003c/code\u003e and future endpoints\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDMZRED (192.168.22.0/24)\u003c/strong\u003e: Hosts attacker targets like \u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eADINFRA (192.168.40.0/24)\u003c/strong\u003e: Supports \u003ccode\u003eopf-dc01\u003c/code\u003e and GPO testing\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"example-host-assignments\"\u003eExample Host Assignments\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eHost\u003c/th\u003e\n          \u003cth\u003eIP Address\u003c/th\u003e\n          \u003cth\u003eSegment\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-fw01\u003c/td\u003e\n          \u003ctd\u003e192.168.1.24 (WAN)\u003c/td\u003e\n          \u003ctd\u003epfSense router\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-dc01\u003c/td\u003e\n          \u003ctd\u003e192.168.40.100\u003c/td\u003e\n          \u003ctd\u003eADINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-mbr01\u003c/td\u003e\n          \u003ctd\u003e192.168.30.101\u003c/td\u003e\n          \u003ctd\u003eLANWORKSTATIONS\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-red01\u003c/td\u003e\n          \u003ctd\u003e192.168.22.50\u003c/td\u003e\n          \u003ctd\u003eDMZRED\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-log01\u003c/td\u003e\n          \u003ctd\u003e192.168.20.12\u003c/td\u003e\n          \u003ctd\u003eCSOCINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"Designing a Segmented Cyber Lab: OPFORGE Network Architecture"},{"content":"OPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\nEvolution Timeline Phase 1: Initial Sandbox Single VM (SOF-ELK) Flat network, no segmentation Manual log ingestion Phase 2: Tactical Expansion Added pfSense (opf-fw01) Introduced segmentation: CSOCINFRA, DMZRED, LANWORKSTATIONS, ADINFRA First red team emulation with opf-red01 Winlogbeat and Sysmon on endpoints Phase 3: Professionalization Cloned base templates (base-ubuntu-2204-template, base-windows10-template) VM-specific roles: opf-ai01, opf-log01, opf-mbr01, etc. AI and ML integration via Jupyter (opf-ai01) Multi-tiered ingest pipeline (Zeek → Logstash → OpenSearch) Lessons Learned Legacy OS images break modern tools Cloning base templates improves consistency Network segmentation is essential for realistic detection engineering ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-infra-evolution/","summary":"\u003cp\u003eOPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\u003c/p\u003e\n\u003ch2 id=\"evolution-timeline\"\u003eEvolution Timeline\u003c/h2\u003e\n\u003ch3 id=\"phase-1-initial-sandbox\"\u003ePhase 1: Initial Sandbox\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSingle VM (SOF-ELK)\u003c/li\u003e\n\u003cli\u003eFlat network, no segmentation\u003c/li\u003e\n\u003cli\u003eManual log ingestion\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-2-tactical-expansion\"\u003ePhase 2: Tactical Expansion\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eAdded pfSense (\u003ccode\u003eopf-fw01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eIntroduced segmentation: \u003ccode\u003eCSOCINFRA\u003c/code\u003e, \u003ccode\u003eDMZRED\u003c/code\u003e, \u003ccode\u003eLANWORKSTATIONS\u003c/code\u003e, \u003ccode\u003eADINFRA\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eFirst red team emulation with \u003ccode\u003eopf-red01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eWinlogbeat and Sysmon on endpoints\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-3-professionalization\"\u003ePhase 3: Professionalization\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCloned base templates (\u003ccode\u003ebase-ubuntu-2204-template\u003c/code\u003e, \u003ccode\u003ebase-windows10-template\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eVM-specific roles: \u003ccode\u003eopf-ai01\u003c/code\u003e, \u003ccode\u003eopf-log01\u003c/code\u003e, \u003ccode\u003eopf-mbr01\u003c/code\u003e, etc.\u003c/li\u003e\n\u003cli\u003eAI and ML integration via Jupyter (\u003ccode\u003eopf-ai01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eMulti-tiered ingest pipeline (Zeek → Logstash → OpenSearch)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lessons-learned\"\u003eLessons Learned\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLegacy OS images break modern tools\u003c/li\u003e\n\u003cli\u003eCloning base templates improves consistency\u003c/li\u003e\n\u003cli\u003eNetwork segmentation is essential for realistic detection engineering\u003c/li\u003e\n\u003c/ul\u003e","title":"From Sandbox to Cyber Range: How OPFORGE Evolved into a Professional Portfolio Lab"},{"content":"Clone Map Template Clone Name Purpose base-ubuntu-2204-template opf-red01 Red Team operator box base-ubuntu-2204-template opf-log01 Log pipeline (Zeek, OpenSearch) base-ubuntu-2204-template opf-ai01 Jupyter + anomaly detection base-ubuntu-2204-template opf-cloud01 Targeted web app for attack base-windows10-template opf-mbr01 Domain-joined endpoint Lessons Learned Clone from snapshot, then personalize (hostname, NIC, IP) Use base templates with all dependencies pre-installed Maintain consistency across VM builds using scripting and snapshots ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-vm-cloning/","summary":"\u003ch2 id=\"clone-map\"\u003eClone Map\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eTemplate\u003c/th\u003e\n          \u003cth\u003eClone Name\u003c/th\u003e\n          \u003cth\u003ePurpose\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-red01\u003c/td\u003e\n          \u003ctd\u003eRed Team operator box\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-log01\u003c/td\u003e\n          \u003ctd\u003eLog pipeline (Zeek, OpenSearch)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-ai01\u003c/td\u003e\n          \u003ctd\u003eJupyter + anomaly detection\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-cloud01\u003c/td\u003e\n          \u003ctd\u003eTargeted web app for attack\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-windows10-template\u003c/td\u003e\n          \u003ctd\u003eopf-mbr01\u003c/td\u003e\n          \u003ctd\u003eDomain-joined endpoint\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"lessons-learned\"\u003eLessons Learned\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eClone from snapshot, then personalize (hostname, NIC, IP)\u003c/li\u003e\n\u003cli\u003eUse base templates with all dependencies pre-installed\u003c/li\u003e\n\u003cli\u003eMaintain consistency across VM builds using scripting and snapshots\u003c/li\u003e\n\u003c/ul\u003e","title":"Scaling OPFORGE: How I Clone and Manage Cyber Range VMs"},{"content":"OPFORGE Lab Infrastructure The OPFORGE lab is a purpose-built environment for Detection Engineering and Threat Emulation. It supports training, research, and portfolio alignment with strategic post-military goals, such as cyber-AI integration at national labs.\n🎯 Lab Objectives Validate and develop Windows/Linux detections Integrate threat emulation and enrichment pipelines Serve as backend for AI-driven triage (via OPFORIA) Support SkillBridge and civilian career transition 🧱 Virtual Machines (VMs) All systems are hosted in VMware Workstation Pro, following the OPF-* naming convention:\nVM Name Role IP / Network Notes OPF-DC01 Domain Controller 192.168.20.100 Windows AD + DNS server OPF-MBR01 Workstation 192.168.30.101 Winlogbeat + KAPE staging OPF-LOG01 SOF-ELK (Ubuntu-based) 192.168.20.12 Ingest endpoint for Winlogbeat + JSON OPF-BLUE01 DFIR Workstation (SIFT) — Analysis, timeline creation, triage OPF-RED01 Threat Emulation — Atomic Red Team, emulation scripts OPF-FW01 pfSense Firewall Multi-homed Segments and controls all traffic 🌐 Network Architecture Interface Name IP Subnet Purpose em0 WAN 192.168.1.24 192.168.1.0/24 Internet uplink em1 LANWORKSTATIONS 192.168.30.5 192.168.30.0/24 End-user endpoints em2 DMZRED 192.168.22.100 192.168.22.0/24 Red team operations em3 CSOCINFRA 192.168.20.5 192.168.20.0/24 Logging, domain, core systems 📝 Logging \u0026amp; Ingestion Pipeline Winlogbeat Setup Host: OPF-MBR01 Collects: Security logs (Event ID 4624 confirmed) Permissions: NT SERVICE\\Winlogbeat in Event Log Readers Destination: OPF-LOG01:5044 via ens36 SOF-ELK (OPF-LOG01) OS: Ubuntu (latest SOF-ELK) Ingest port: TCP 5044 Alternate pipeline: Path: /logstash/kape/ Config: 5000-opforge-kape-file.conf Used for KAPE-exported JSON/EVTX data 🔄 Automation \u0026amp; Tooling Winlogbeat Transfer Script Scripted export, enrichment, and SCP transfer: Converts .evtx → JSON via EvtxECmd Bundled tools: KAPE in C:\\OPFORGE\\bin\\KAPE\\ PuTTY/pscp.exe in C:\\OPFORGE\\bin\\PuTTY\\ Output: opforge-winlogbeat-YYYYMMDDHHMMSS.json Future Enhancements Remove internet from ens33 on OPF-LOG01 Hardened east-west segmentation via pfSense CI-driven asset generation and detection validation Host OPFORIA ML agent on opforia.com 🛠 Tooling \u0026amp; Integrations Atomic Red Team: Deployed on OPF-RED01 KAPE + EvtxECmd: For forensic exports SIFT Workstation: Investigation and triage SOF-ELK: Central SIEM for ingestion, detection tuning Stream Deck (Host): Available for macro-driven control tasks 📌 Roadmap 🔐 Harden access controls and isolate interfaces 📈 Build detection analytics into OPFORIA 📄 Publish detection results and walkthroughs via blog 🧪 Integrate ATT\u0026amp;CK-mapped emulation campaigns 🔧 Establish tiered detection pipelines (atomic → analytic → AI) For additional walkthroughs, visit the OPFORGE Series or check out related GitHub repositories.\n","permalink":"https://opforge.dev/posts/opforge-lab/","summary":"\u003ch1 id=\"opforge-lab-infrastructure\"\u003eOPFORGE Lab Infrastructure\u003c/h1\u003e\n\u003cp\u003eThe OPFORGE lab is a purpose-built environment for \u003cstrong\u003eDetection Engineering\u003c/strong\u003e and \u003cstrong\u003eThreat Emulation\u003c/strong\u003e. It supports training, research, and portfolio alignment with strategic post-military goals, such as cyber-AI integration at national labs.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-lab-objectives\"\u003e🎯 Lab Objectives\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eValidate and develop Windows/Linux detections\u003c/li\u003e\n\u003cli\u003eIntegrate threat emulation and enrichment pipelines\u003c/li\u003e\n\u003cli\u003eServe as backend for AI-driven triage (via \u003cstrong\u003eOPFORIA\u003c/strong\u003e)\u003c/li\u003e\n\u003cli\u003eSupport SkillBridge and civilian career transition\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-virtual-machines-vms\"\u003e🧱 Virtual Machines (VMs)\u003c/h2\u003e\n\u003cp\u003eAll systems are hosted in \u003cstrong\u003eVMware Workstation Pro\u003c/strong\u003e, following the \u003ccode\u003eOPF-*\u003c/code\u003e naming convention:\u003c/p\u003e","title":"OPFORGE Lab Infrastructure Overview"},{"content":"🧠 Why the Upgrade? The initial OPFORGE lab design served well for early Winlogbeat ingestion and Red Team inject testing, but lacked realistic network boundaries. As the project evolved into a threat emulation and explainable detection platform, the need for segmented lanes, realistic routing, and better telemetry visibility became clear.\n🧱 New Subnet Architecture Subnet Name CIDR Purpose MGMT 192.168.10.0/24 Firewall and jump host access (OOB) CSOCINFRA 192.168.20.0/24 Logstash, OpenSearch, Jupyter, ML pipelines ADINFRA 192.168.21.0/24 Domain controllers, core IT services DMZRED 192.168.22.0/24 Red Team attacker infrastructure DMZWEB 192.168.23.0/24 Decoy web servers, phishing targets LANWORKSTATIONS 192.168.30.0/24 User systems and analyst boxes ISOLAB 192.168.40.0/24 Malware sandbox, REMnux, FLARE workstation Each subnet represents a security boundary, making traffic control and logging cleaner and more realistic.\n🔐 Firewall Routing Logic (opf-fw01) Source → Destination Default Policy DMZRED → ADINFRA Block (unless testing) DMZRED → LANWORKSTATIONS Allow (inject scope) LANWORKSTATIONS → CSOCINFRA Allow ISOLAB → Any Block all MGMT → All Allow (admin access) CSOCINFRA → All Allow (read-only/logs) This separation is critical for OPFORGE’s Blue Team learning, detection engineering, and Red Team emulation paths.\n🖥️ Updated VM Deployment Model Hostname Subnet Role IP Address opf-fw01 All pfSense firewall/router Varies per iface opf-dc01 ADINFRA Domain controller 192.168.21.100 opf-mbr01 LANWORKSTATIONS Test workstation (user target) 192.168.30.101 opf-blue01 LANWORKSTATIONS Winlogbeat/Sysmon sensor 192.168.30.10 opf-blue02 LANWORKSTATIONS Alternate sensor (e.g. Slingshot) 192.168.30.11 opf-red01 DMZRED Kali/Parrot Red Team box 192.168.22.10 opf-red02 DMZRED Commando VM 192.168.22.11 opf-c2-01 DMZRED Sliver or Mythic C2 server 192.168.22.100 opf-detect01 CSOCINFRA Logstash + OpenSearch 192.168.20.20 opf-log01 CSOCINFRA Winlogbeat forwarder ingest endpoint 192.168.20.12 opf-research01 CSOCINFRA Jupyter/ML model development 192.168.20.25 opf-re01 ISOLAB Malware analysis (REMnux/FLARE) 192.168.40.21 opf-triage01 ISOLAB Triage (SOF-ELK/KAPE viewer) 192.168.40.30 opf-web01 DMZWEB Web server for Red Team phishing targets 192.168.23.50 📍 What\u0026rsquo;s Next? Deploy and test each VM with correct subnet and firewall access Validate Winlogbeat/Sysmon output to opf-detect01 Add Zeek sensors to monitor DMZRED and LANWORKSTATIONS Publish detection engineering rules for injected TTPs Build visual diagrams for full lab and include in GitHub This upgrade brings OPFORGE in line with professional-grade detection labs and research environments like MITRE CALDERA, CCDC red/blue exercises, and APT emulation studies. It sets the stage for structured playbook development and explainable ML detection pipelines.\nWant to see a diagram of this setup? It’s in the works.\n","permalink":"https://opforge.dev/posts/opforge-lab-v2-network-architecture/","summary":"\u003ch2 id=\"-why-the-upgrade\"\u003e🧠 Why the Upgrade?\u003c/h2\u003e\n\u003cp\u003eThe initial OPFORGE lab design served well for early Winlogbeat ingestion and Red Team inject testing, but lacked realistic network boundaries. As the project evolved into a threat emulation and explainable detection platform, the need for \u003cstrong\u003esegmented lanes\u003c/strong\u003e, \u003cstrong\u003erealistic routing\u003c/strong\u003e, and \u003cstrong\u003ebetter telemetry visibility\u003c/strong\u003e became clear.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-new-subnet-architecture\"\u003e🧱 New Subnet Architecture\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eSubnet Name\u003c/th\u003e\n          \u003cth\u003eCIDR\u003c/th\u003e\n          \u003cth\u003ePurpose\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eMGMT\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e192.168.10.0/24\u003c/td\u003e\n          \u003ctd\u003eFirewall and jump host access (OOB)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eCSOCINFRA\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e192.168.20.0/24\u003c/td\u003e\n          \u003ctd\u003eLogstash, OpenSearch, Jupyter, ML pipelines\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eADINFRA\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e192.168.21.0/24\u003c/td\u003e\n          \u003ctd\u003eDomain controllers, core IT services\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eDMZRED\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e192.168.22.0/24\u003c/td\u003e\n          \u003ctd\u003eRed Team attacker infrastructure\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eDMZWEB\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e192.168.23.0/24\u003c/td\u003e\n          \u003ctd\u003eDecoy web servers, phishing targets\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eLANWORKSTATIONS\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e192.168.30.0/24\u003c/td\u003e\n          \u003ctd\u003eUser systems and analyst boxes\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eISOLAB\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e192.168.40.0/24\u003c/td\u003e\n          \u003ctd\u003eMalware sandbox, REMnux, FLARE workstation\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eEach subnet represents a security boundary, making traffic control and logging cleaner and more realistic.\u003c/p\u003e","title":"OPFORGE Lab v2.0: Realistic Network Segmentation and Detection Design"},{"content":"🎯 Why the Change? OPFORGE started as a standalone lab stack running on bridged VMware interfaces. While effective for prototyping, it lacked the network realism needed to validate detection engineering workflows at scale.\nSo, we leveled up.\n🔐 What’s New? We’ve now integrated pfSense as the central gateway and firewall, enabling:\n🔀 True Layer 3 segmentation between subnets: 192.168.20.0/24 — CSOC infrastructure (SOF-ELK, Domain Controller) 192.168.30.0/24 — LAN workstations (MBR01, RED01) 192.168.22.0/24 — DMZ for threat emulation 192.168.1.0/24 — WAN uplink with internet access 🎯 Controlled routing with testable firewall rules 🧱 Policy zones mapped to pfSense firewall aliases: CSOCINFRA, LANWORKSTATIONS, DMZRED 🧪 Realistic paths for log ingestion, threat emulation, and adversary simulation 📐 Architecture Overview [OPF-MBR01] ---+ | +-------------------------------+ [OPF-RED01] ---+------\u0026gt;| opf-fw01 (pfSense) |------\u0026gt; [OPF-LOG01 / SOF-ELK] | | | [OPF-DC01, OPF-FW01] | | em1: 192.168.30.5 (LANWORKSTATIONS) | | em2: 192.168.22.100 (DMZRED) | | em3: 192.168.20.5 (CSOCINFRA) | | em0: 192.168.1.24 (WAN - Internet) +------\u0026gt;| Realistic ACL zones | +-------------------------------+ ✅ Benefits 🧠 Operator realism: Windows boxes now live in a LAN, not on a flat bridge 🔎 Inbound/Outbound ACLs mirror real-world trust boundaries 🧪 Detection scenarios like beaconing, pivoting, and log manipulation can be tested across routed segments 🚧 Air-gapped environment with controlled WAN access 🧩 Current Logflow Snapshot Winlogbeat exports .evtx-derived logs from LANWORKSTATIONS to SOF-ELK over port 5044 SCP is restricted via firewall rules and managed SSH key exchange Only systems in 192.168.30.0/24 are allowed to interact with Logstash (CSOCINFRA) 🧠 Next Up 🔁 Full DMZ logging for red team emulation in 192.168.22.0/24 🌐 Add Zeek or Suricata to tap and inspect DMZRED 🧰 Set up IDS/IPS alert pipelines and visualizations in Kibana 🛠️ Trigger event-based enrichment from firewall logs The network just got smarter. The detections will have to keep up.\nRide the storm.\n","permalink":"https://opforge.dev/posts/pfsense-infrastructure-upgrade/","summary":"\u003ch3 id=\"-why-the-change\"\u003e🎯 Why the Change?\u003c/h3\u003e\n\u003cp\u003eOPFORGE started as a standalone lab stack running on bridged VMware interfaces. While effective for prototyping, it lacked the \u003cstrong\u003enetwork realism needed to validate detection engineering workflows at scale\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eSo, we leveled up.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"-whats-new\"\u003e🔐 What’s New?\u003c/h3\u003e\n\u003cp\u003eWe’ve now integrated \u003cstrong\u003epfSense as the central gateway and firewall\u003c/strong\u003e, enabling:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e🔀 \u003cstrong\u003eTrue Layer 3 segmentation\u003c/strong\u003e between subnets:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e192.168.20.0/24\u003c/code\u003e — CSOC infrastructure (SOF-ELK, Domain Controller)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e192.168.30.0/24\u003c/code\u003e — LAN workstations (MBR01, RED01)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e192.168.22.0/24\u003c/code\u003e — DMZ for threat emulation\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e192.168.1.0/24\u003c/code\u003e — WAN uplink with internet access\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e🎯 \u003cstrong\u003eControlled routing\u003c/strong\u003e with testable firewall rules\u003c/li\u003e\n\u003cli\u003e🧱 \u003cstrong\u003ePolicy zones\u003c/strong\u003e mapped to pfSense firewall aliases: CSOCINFRA, LANWORKSTATIONS, DMZRED\u003c/li\u003e\n\u003cli\u003e🧪 Realistic paths for log ingestion, threat emulation, and adversary simulation\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"-architecture-overview\"\u003e📐 Architecture Overview\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-plaintext\" data-lang=\"plaintext\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[OPF-MBR01] ---+\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e               |       +-------------------------------+\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[OPF-RED01] ---+------\u0026gt;|        opf-fw01 (pfSense)     |------\u0026gt; [OPF-LOG01 / SOF-ELK]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e               |       |                               |         [OPF-DC01, OPF-FW01]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e               |       | em1: 192.168.30.5 (LANWORKSTATIONS)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e               |       | em2: 192.168.22.100 (DMZRED)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e               |       | em3: 192.168.20.5 (CSOCINFRA)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e               |       | em0: 192.168.1.24 (WAN - Internet)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e               +------\u0026gt;|        Realistic ACL zones     |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                       +-------------------------------+\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"-benefits\"\u003e✅ Benefits\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e🧠 \u003cstrong\u003eOperator realism\u003c/strong\u003e: Windows boxes now live in a LAN, not on a flat bridge\u003c/li\u003e\n\u003cli\u003e🔎 \u003cstrong\u003eInbound/Outbound ACLs\u003c/strong\u003e mirror real-world trust boundaries\u003c/li\u003e\n\u003cli\u003e🧪 \u003cstrong\u003eDetection scenarios\u003c/strong\u003e like beaconing, pivoting, and log manipulation can be tested across routed segments\u003c/li\u003e\n\u003cli\u003e🚧 \u003cstrong\u003eAir-gapped environment with controlled WAN access\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"-current-logflow-snapshot\"\u003e🧩 Current Logflow Snapshot\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eWinlogbeat exports \u003ccode\u003e.evtx\u003c/code\u003e-derived logs from LANWORKSTATIONS to SOF-ELK over port \u003ccode\u003e5044\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSCP is restricted via firewall rules and managed SSH key exchange\u003c/li\u003e\n\u003cli\u003eOnly systems in \u003ccode\u003e192.168.30.0/24\u003c/code\u003e are allowed to interact with Logstash (CSOCINFRA)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"-next-up\"\u003e🧠 Next Up\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e🔁 Full DMZ logging for red team emulation in \u003ccode\u003e192.168.22.0/24\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e🌐 Add Zeek or Suricata to tap and inspect DMZRED\u003c/li\u003e\n\u003cli\u003e🧰 Set up IDS/IPS alert pipelines and visualizations in Kibana\u003c/li\u003e\n\u003cli\u003e🛠️ Trigger event-based enrichment from firewall logs\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003eThe network just got smarter. The detections will have to keep up.\u003c/p\u003e","title":"Hardening OPFORGE: Introducing pfSense for Realistic Network Segmentation and Ingestion Control"},{"content":"This document outlines the hardened Group Policy Object (GPO) configuration applied to opf-dc01.opforge.local within the opforge.local Active Directory domain. This GPO includes best-practice security settings tailored to the OPFORGE environment.\n📁 GPO Overview GPO Name: Hardened Windows Baseline GPO GUID: {5972D448-D77A-41DA-9820-E7F28FE7AFAE} Linked To: Domain - opforge.local Enforced: No Security Filtering: Authenticated Users 🔐 Security Settings These settings are managed via the Security Configuration Editor (SecEdit\\GptTmpl.inf):\nAccount Lockout Policy Lockout threshold: 5 invalid attempts Lockout duration: 15 minutes Reset count after: 15 minutes Password Policy Enforce password history: 24 passwords remembered Maximum password age: 60 days Minimum password length: 14 characters Complexity requirements: Enabled Audit Policy Located in Audit\\audit.csv:\nAudit logon events: Success and Failure Audit object access: Failure Audit process tracking: Success Audit system events: Success and Failure 🔍 File System \u0026amp; Registry Hardening NTFS permissions tightened for %SystemRoot%, C:\\Windows\\System32 User rights assignments for shutdown, logon locally, remote access Registry keys locked down for critical services 🚫 Disabled Features Administrative shares disabled (e.g., ADMIN$, C$) SMBv1 disabled Guest account renamed and disabled Null sessions and anonymous enumeration disabled 🔄 Scripts \u0026amp; Automation No startup or logon scripts defined Can be extended with PowerShell deployment automation ✅ Verification Steps Run gpresult /h gpo-report.html to validate application Check Event Viewer for GroupPolicy Operational logs Use LGPO.exe or secedit /analyze to test template enforcement Export and version-control for reproducibility This configuration balances best-practice hardening with operational stability for a training and emulation environment.\n","permalink":"https://opforge.dev/docs/hardened-gpo-configuration/","summary":"\u003cp\u003eThis document outlines the hardened Group Policy Object (GPO) configuration applied to \u003ccode\u003eopf-dc01.opforge.local\u003c/code\u003e within the \u003ccode\u003eopforge.local\u003c/code\u003e Active Directory domain. This GPO includes best-practice security settings tailored to the OPFORGE environment.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-gpo-overview\"\u003e📁 GPO Overview\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eGPO Name\u003c/strong\u003e: Hardened Windows Baseline\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGPO GUID\u003c/strong\u003e: \u003ccode\u003e{5972D448-D77A-41DA-9820-E7F28FE7AFAE}\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLinked To\u003c/strong\u003e: Domain - \u003ccode\u003eopforge.local\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEnforced\u003c/strong\u003e: No\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSecurity Filtering\u003c/strong\u003e: Authenticated Users\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-security-settings\"\u003e🔐 Security Settings\u003c/h2\u003e\n\u003cp\u003eThese settings are managed via the Security Configuration Editor (\u003ccode\u003eSecEdit\\GptTmpl.inf\u003c/code\u003e):\u003c/p\u003e\n\u003ch3 id=\"account-lockout-policy\"\u003eAccount Lockout Policy\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eLockout threshold: 5 invalid attempts\u003c/li\u003e\n\u003cli\u003eLockout duration: 15 minutes\u003c/li\u003e\n\u003cli\u003eReset count after: 15 minutes\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"password-policy\"\u003ePassword Policy\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eEnforce password history: 24 passwords remembered\u003c/li\u003e\n\u003cli\u003eMaximum password age: 60 days\u003c/li\u003e\n\u003cli\u003eMinimum password length: 14 characters\u003c/li\u003e\n\u003cli\u003eComplexity requirements: Enabled\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"audit-policy\"\u003eAudit Policy\u003c/h3\u003e\n\u003cp\u003eLocated in \u003ccode\u003eAudit\\audit.csv\u003c/code\u003e:\u003c/p\u003e","title":"Hardened GPO Configuration for OPFORGE"},{"content":"Blog Post: \u0026ldquo;From 404 to Flawless: How OPFORGE Finally Deployed\u0026rdquo; TL;DR After wrestling with GitHub Pages, Hugo themes, broken submodules, and outdated Hugo versions, OPFORGE.dev is now live — built with Hugo + PaperMod and deployed through GitHub Actions. Here\u0026rsquo;s how we pulled it off, step-by-step.\n🛠️ Background Project: OPFORGE — a portfolio-driven site documenting the creation of a cyber detection engineering and threat emulation lab.\nGoal: Use Hugo + PaperMod + GitHub Pages to create a professional and performant static site for hosting blog-style documentation.\n🚧 Problems We Encountered 1. Theme not loading (missing layout warnings) Cause: GitHub Actions couldn\u0026rsquo;t find PaperMod theme files. Fix: Removed old submodule config, then re-added PaperMod as a regular folder. 2. Outdated Hugo version Error: ERROR =\u0026gt; hugo v0.146.0 or greater is required for hugo-PaperMod to build Fix: Updated deploy.yml to use hugo-version: '0.147.0' 3. GitHub Pages rendering XML or 404 errors Cause: Deploying without theme + config, or to wrong branch. Fix: Ensured gh-pages is the deploy target, and public folder is Git-ignored but built by Actions. ✅ Working Setup Hugo Version with: hugo-version: \u0026#39;0.147.0\u0026#39; extended: true GitHub Actions Workflow name: Deploy Hugo site to GitHub Pages on: push: branches: - main permissions: contents: write jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout source with submodules uses: actions/checkout@v4 with: submodules: true - name: Setup Hugo (extended) uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.147.0\u0026#39; extended: true - name: Build Hugo site run: hugo --cleanDestinationDir --minify - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public publish_branch: gh-pages Other Key Files hugo.yaml: baseURL: \u0026#34;https://opforge.dev/\u0026#34; title: \u0026#34;OPFORGE\u0026#34; theme: [\u0026#34;PaperMod\u0026#34;] languageCode: \u0026#34;en-us\u0026#34; .gitignore includes: public/ temp-theme/ 🧠 Lessons Learned Don\u0026rsquo;t fight Git submodules unless you have to — clone themes as regular folders. Always check the theme\u0026rsquo;s minimum required Hugo version. Double-check your Pages config: set the correct branch (gh-pages) and verify CNAMEs for custom domains. 🎉 The Result Visit the live site at: https://opforge.dev\nThis milestone paves the way for publishing the full OPFORGE series, detailing each component of the detection and emulation lab from infrastructure to AI-driven triage.\nNext up: documentation posts go live.\n","permalink":"https://opforge.dev/posts/opforge-finally-deployed/","summary":"\u003ch1 id=\"blog-post-from-404-to-flawless-how-opforge-finally-deployed\"\u003eBlog Post: \u0026ldquo;From 404 to Flawless: How OPFORGE Finally Deployed\u0026rdquo;\u003c/h1\u003e\n\u003ch2 id=\"tldr\"\u003eTL;DR\u003c/h2\u003e\n\u003cp\u003eAfter wrestling with GitHub Pages, Hugo themes, broken submodules, and outdated Hugo versions, OPFORGE.dev is now live — built with Hugo + PaperMod and deployed through GitHub Actions. Here\u0026rsquo;s how we pulled it off, step-by-step.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-background\"\u003e🛠️ Background\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eProject:\u003c/strong\u003e OPFORGE — a portfolio-driven site documenting the creation of a cyber detection engineering and threat emulation lab.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e Use \u003ca href=\"https://gohugo.io/\"\u003eHugo\u003c/a\u003e + \u003ca href=\"https://github.com/adityatelange/hugo-PaperMod\"\u003ePaperMod\u003c/a\u003e + GitHub Pages to create a professional and performant static site for hosting blog-style documentation.\u003c/p\u003e","title":"From 404 to Flawless: How OPFORGE Finally Deployed"},{"content":"Kibana Data View Setup Kibana is your visualization front-end for the Elasticsearch data collected by SOF-ELK. This guide walks through setting up a custom data view to track and analyze logs from Winlogbeat and Sysmon.\n✅ Check Ensure SOF-ELK is accessible via http://opf-log01:5601 Confirm that Winlogbeat logs have been ingested (use Dev Tools \u0026gt; _cat/indices?v) Verify the expected index patterns are present (e.g., winlogbeat-*) ⚙️ Do Login to Kibana\nNavigate to http://opf-log01:5601 and click on “Kibana” \u0026gt; “Stack Management”.\nCreate Data View\nGo to “Stack Management” \u0026gt; “Data Views” Click “Create Data View” Name: Winlogbeat Logs Index pattern: winlogbeat-* Select a timestamp field: @timestamp Save \u0026amp; Explore\nSave the data view. Navigate to Discover and ensure logs populate correctly. (Optional): Repeat for sysmon-* or other sources\n🔍 Check Use “Discover” to verify the logs load with proper fields (event.code, host.name, etc.) Confirm time filters allow viewing over various periods Consider creating saved searches or dashboards for future correlation 🧠 Tip: Bookmark this data view to quickly pivot into detection engineering or triage use cases.\n","permalink":"https://opforge.dev/docs/kibana-setup/","summary":"This guide walks through setting up a custom Kibana data view for visualizing Winlogbeat and Sysmon data in OPFORGE.","title":"Kibana Data View Setup"},{"content":"In this post, we configure a Kibana Data View within SOF-ELK to start visualizing log data from opf-mbr01. This step is critical for enabling dashboards, visualizations, and practical triage in OPFORGE.\n✅ Check Confirm Winlogbeat JSON files are arriving on opf-log01 Logstash is processing input without parse errors Events such as 4624 and 4688 appear in the winlogbeat-* index Kibana is reachable at http://opf-log01:5601 ⚙️ Do Navigate to Kibana → Stack Management → Data Views\nClick Create Data View\nUse the following configuration:\nData view name: winlogbeat-* Time field: @timestamp Save and confirm the new data view.\nNavigate to Discover and ensure events populate in timeline view.\n🔍 Check Search for event.code:4624 and confirm results Validate timeline accuracy using filters like host.name, user.name Save the view for future use in dashboards or alerts Tag the saved object as opforge in Kibana for organization Tip: You can also explore creating dashboards for high-fidelity events like 1102 (Log Clear) or 4688 (Process Creation).\n","permalink":"https://opforge.dev/posts/kibana-data-view-setup/","summary":"Set up a Kibana data view in SOF-ELK to visualize Winlogbeat event data and enable efficient threat hunting in OPFORGE.","title":"Kibana Data View Setup"},{"content":"What is OPFORGE? OPFORGE stands for Offensive Posture + FORensics + Generation \u0026amp; Engineering. It\u0026rsquo;s a purpose-built cybersecurity lab environment designed to:\n🛠️ Emulate adversary behavior 🔍 Ingest and enrich telemetry from Windows and Linux endpoints 🧠 Apply explainable AI to triage and surface detections 📚 Document real-world operator workflows Whether you\u0026rsquo;re reverse-engineering a malware sample, developing YARA rules, or building detection pipelines with SOF-ELK, OPFORGE is designed to mirror the complexity and realism of mission-ready cyber defense.\nMission Goals Threat Emulation\nUse Atomic Red Team, Caldera, and custom payloads to simulate known TTPs. Detection Engineering\nBuild, test, and validate detection logic using tools like Winlogbeat, Sysmon, and ELK. Explainable AI\nIncorporate open-source ML models for clustering, classification, and triage augmentation with transparency and traceability. Documentation\nShare the setup process, automation, infrastructure, and detection results in a Check–Do–Check blog series. Who\u0026rsquo;s Behind It? OPFORGE is developed and maintained by Alfredo Pelaez, a cybersecurity leader focused on threat detection, adversary emulation, and applied research. His work blends operational experience with a strong foundation in machine learning and cyber defense strategy to build meaningful, mission-ready solutions.\nWant to Contribute or Reproduce? Visit the GitHub Repo Fork the blog series and lab setup documentation Suggest topics or TTPs you\u0026rsquo;d like to see emulated Built using Hugo + PaperMod + GitHub Pages Hosted on opforge.dev\n","permalink":"https://opforge.dev/about/","summary":"\u003ch2 id=\"what-is-opforge\"\u003eWhat is OPFORGE?\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eOPFORGE\u003c/strong\u003e stands for \u003cstrong\u003eOffensive Posture + FORensics + Generation \u0026amp; Engineering\u003c/strong\u003e. It\u0026rsquo;s a purpose-built cybersecurity lab environment designed to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e🛠️ Emulate adversary behavior\u003c/li\u003e\n\u003cli\u003e🔍 Ingest and enrich telemetry from Windows and Linux endpoints\u003c/li\u003e\n\u003cli\u003e🧠 Apply explainable AI to triage and surface detections\u003c/li\u003e\n\u003cli\u003e📚 Document real-world operator workflows\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhether you\u0026rsquo;re reverse-engineering a malware sample, developing YARA rules, or building detection pipelines with SOF-ELK, OPFORGE is designed to mirror the complexity and realism of mission-ready cyber defense.\u003c/p\u003e","title":"About OPFORGE"},{"content":"🔍 Purpose Enable structured Windows event logs to flow from OPFORGE\u0026rsquo;s Windows Member VM to SOF-ELK using Winlogbeat, a JSON exporter, and PowerShell automation.\n✅ Prerequisites Windows 10/11 host joined to domain (e.g., OPF-MBR01) Winlogbeat installed and configured SSH access to SOF-ELK (e.g., elk_user@192.168.77.40) Valid PuTTY key pair (.ppk) for SCP transfers (if using PSCP) Target folder on SOF-ELK writable by elk_user (e.g., /logstash/kape/) 🔧 Check–Do–Check Workflow 🔍 Check Confirm Winlogbeat is writing .ndjson files locally: Get-ChildItem -Path \u0026#39;C:\\ProgramData\\winlogbeat\\opforge-export\u0026#39; -Filter *.ndjson ✅ Do 1. Configure Winlogbeat to output JSON Edit winlogbeat.yml:\noutput.file: path: \u0026#34;C:/ProgramData/winlogbeat/opforge-export\u0026#34; filename: \u0026#34;winlogbeat.json\u0026#34; rotate_every_kb: 10000 number_of_files: 5 codec.format: string: \u0026#39;%{[message]}\u0026#39; Restart the Winlogbeat service:\nRestart-Service winlogbeat 2. Create Export Script File: Export-WinlogbeatToSOFELK.ps1\n$sourceFolder = \u0026#34;C:\\ProgramData\\winlogbeat\\opforge-export\u0026#34; $tempOutput = \u0026#34;C:\\Temp\\opforge-winlogbeat-cleaned.json\u0026#34; $sofElkUser = \u0026#34;elk_user\u0026#34; $sofElkHost = \u0026#34;192.168.77.40\u0026#34; $sofElkDest = \u0026#34;/logstash/kape/\u0026#34; $timestamp = Get-Date -Format \u0026#34;yyyyMMddHHmmss\u0026#34; $finalFile = \u0026#34;opforge-winlogbeat-$timestamp.json\u0026#34; Get-ChildItem -Path $sourceFolder -Filter \u0026#34;winlogbeat.json-*.ndjson\u0026#34; | ForEach-Object { Get-Content $_.FullName | ForEach-Object { try { $event = $_ | ConvertFrom-Json if ($event.event.code -eq 4624) { $event | Add-Member -MemberType NoteProperty -Name mitre_technique_id -Value \u0026#34;T1078\u0026#34; } $event | ConvertTo-Json -Depth 10 -Compress } catch {} } | Out-File -Encoding utf8 -Append -FilePath $tempOutput } \u0026amp; \u0026#34;C:\\Program Files\\PuTTY\\pscp.exe\u0026#34; -i \u0026#34;C:\\Users\\Administrator\\Documents\\id_rsa.ppk\u0026#34; $tempOutput \u0026#34;${sofElkUser}@${sofElkHost}:${sofElkDest}${finalFile}\u0026#34; # Clean up Remove-Item -Path $tempOutput -Force Run it:\nC:\\Scripts\\Export-WinlogbeatToSOFELK.ps1 🔍 Check On SOF-ELK:\nls /logstash/kape/opforge-winlogbeat-*.json Then tail /var/log/logstash/logstash-plain.log and watch for ingestion activity.\n🧠 Notes Logs are enriched with MITRE mapping (4624 → T1078) Export can be cron’d or scheduled Logs land in kape pipeline but are standalone JSON Next step: configure Kibana index pattern + Data View to visualize ingest. → /docs/kibana-setup/\n","permalink":"https://opforge.dev/docs/winlogbeat-export/","summary":"\u003ch2 id=\"-purpose\"\u003e🔍 Purpose\u003c/h2\u003e\n\u003cp\u003eEnable structured Windows event logs to flow from OPFORGE\u0026rsquo;s Windows Member VM to SOF-ELK using Winlogbeat, a JSON exporter, and PowerShell automation.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-prerequisites\"\u003e✅ Prerequisites\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eWindows 10/11 host joined to domain (e.g., \u003ccode\u003eOPF-MBR01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eWinlogbeat installed and configured\u003c/li\u003e\n\u003cli\u003eSSH access to SOF-ELK (e.g., \u003ccode\u003eelk_user@192.168.77.40\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eValid PuTTY key pair (\u003ccode\u003e.ppk\u003c/code\u003e) for SCP transfers (if using PSCP)\u003c/li\u003e\n\u003cli\u003eTarget folder on SOF-ELK writable by \u003ccode\u003eelk_user\u003c/code\u003e (e.g., \u003ccode\u003e/logstash/kape/\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-checkdocheck-workflow\"\u003e🔧 Check–Do–Check Workflow\u003c/h2\u003e\n\u003ch3 id=\"-check\"\u003e🔍 Check\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eConfirm Winlogbeat is writing \u003ccode\u003e.ndjson\u003c/code\u003e files locally:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eGet-ChildItem -Path \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C:\\ProgramData\\winlogbeat\\opforge-export\u0026#39;\u003c/span\u003e -Filter *.ndjson\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-do\"\u003e✅ Do\u003c/h3\u003e\n\u003ch4 id=\"1-configure-winlogbeat-to-output-json\"\u003e1. Configure Winlogbeat to output JSON\u003c/h4\u003e\n\u003cp\u003eEdit \u003ccode\u003ewinlogbeat.yml\u003c/code\u003e:\u003c/p\u003e","title":"Exporting Winlogbeat Logs to SOF-ELK"},{"content":"🧭 Project Status: OPFORGE This page tracks the current progress of OPFORGE—covering infrastructure setup, log ingestion, threat emulation, and explainable detection pipelines.\n✅ Foundation \u0026amp; Deployment Area Status Notes Domain Purchased ✅ opforge.dev via Cloudflare Hugo Static Site Created ✅ With PaperMod theme GitHub Repo Initialized ✅ opforge-site GitHub Actions CI/CD ✅ Deploys on push to main GitHub Pages Configured ✅ Using gh-pages branch Custom Domain Mapped ✅ Site live at https://opforge.dev .gitignore Configured ✅ Excludes public/ Hugo baseURL Configured ✅ Matches live domain About Page ✅ /about/ scaffolded Blog Setup ✅ Blog post created to document site build Docs Landing Page ✅ /docs/ structured with Check–Do–Check flow 🧱 Infrastructure + Ingestion Component Status Notes Windows Server (DC01) ✅ Configured with static IP Member Windows Host ✅ Logs exported via Winlogbeat Winlogbeat JSON Workflow ✅ SCP + filter/enrich to SOF-ELK SOF-ELK Ingestion (Ubuntu) ✅ New version deployed Kibana + Index Visibility ✅ Verified working Custom Index Definitions ⚠️ Partially done, needs tuning ⚔️ Threat Emulation \u0026amp; Detection Engineering Task Status Notes Atomic Red Team Setup ⬜ Not started Emulate TTPs ⬜ Planned Detection Validation in ELK ⬜ Planned ATT\u0026amp;CK Mapping (Log Tagging) ⬜ Planned 🧠 AI/ML \u0026amp; Triage Task Status Notes Feature Engineering from Logs ⬜ Not started ML Model Training/Triage Layer ⬜ Not started Explainability (e.g. SHAP, LIME) ⬜ Not started ✍️ Docs, Blog, and Content Page/Post Status Notes site-setup.md ✅ Published /docs/ index ✅ Scaffolded /about.md ✅ Done status.md ✅ This page Check–Do–Check Templates ⬜ Planned Stay tuned for updates as OPFORGE evolves into a full-spectrum cyber detection and AI engineering lab.\n","permalink":"https://opforge.dev/docs/status/","summary":"\u003ch1 id=\"-project-status-opforge\"\u003e🧭 Project Status: OPFORGE\u003c/h1\u003e\n\u003cp\u003eThis page tracks the current progress of OPFORGE—covering infrastructure setup, log ingestion, threat emulation, and explainable detection pipelines.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-foundation--deployment\"\u003e✅ Foundation \u0026amp; Deployment\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eArea\u003c/th\u003e\n          \u003cth\u003eStatus\u003c/th\u003e\n          \u003cth\u003eNotes\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eDomain Purchased\u003c/td\u003e\n          \u003ctd\u003e✅ \u003ccode\u003eopforge.dev\u003c/code\u003e via Cloudflare\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eHugo Static Site Created\u003c/td\u003e\n          \u003ctd\u003e✅ With PaperMod theme\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eGitHub Repo Initialized\u003c/td\u003e\n          \u003ctd\u003e✅ \u003ca href=\"https://github.com/ATHL337/opforge-site\"\u003eopforge-site\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eGitHub Actions CI/CD\u003c/td\u003e\n          \u003ctd\u003e✅ Deploys on push to \u003ccode\u003emain\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eGitHub Pages Configured\u003c/td\u003e\n          \u003ctd\u003e✅ Using \u003ccode\u003egh-pages\u003c/code\u003e branch\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eCustom Domain Mapped\u003c/td\u003e\n          \u003ctd\u003e✅ Site live at \u003ccode\u003ehttps://opforge.dev\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003e.gitignore\u003c/code\u003e Configured\u003c/td\u003e\n          \u003ctd\u003e✅ Excludes \u003ccode\u003epublic/\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eHugo baseURL Configured\u003c/td\u003e\n          \u003ctd\u003e✅ Matches live domain\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eAbout Page\u003c/td\u003e\n          \u003ctd\u003e✅ /about/ scaffolded\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eBlog Setup\u003c/td\u003e\n          \u003ctd\u003e✅ Blog post created to document site build\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eDocs Landing Page\u003c/td\u003e\n          \u003ctd\u003e✅ /docs/ structured with Check–Do–Check flow\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"-infrastructure--ingestion\"\u003e🧱 Infrastructure + Ingestion\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eComponent\u003c/th\u003e\n          \u003cth\u003eStatus\u003c/th\u003e\n          \u003cth\u003eNotes\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eWindows Server (DC01)\u003c/td\u003e\n          \u003ctd\u003e✅ Configured with static IP\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eMember Windows Host\u003c/td\u003e\n          \u003ctd\u003e✅ Logs exported via Winlogbeat\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eWinlogbeat JSON Workflow\u003c/td\u003e\n          \u003ctd\u003e✅ SCP + filter/enrich to SOF-ELK\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eSOF-ELK Ingestion (Ubuntu)\u003c/td\u003e\n          \u003ctd\u003e✅ New version deployed\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eKibana + Index Visibility\u003c/td\u003e\n          \u003ctd\u003e✅ Verified working\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eCustom Index Definitions\u003c/td\u003e\n          \u003ctd\u003e⚠️ Partially done, needs tuning\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"-threat-emulation--detection-engineering\"\u003e⚔️ Threat Emulation \u0026amp; Detection Engineering\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eTask\u003c/th\u003e\n          \u003cth\u003eStatus\u003c/th\u003e\n          \u003cth\u003eNotes\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eAtomic Red Team Setup\u003c/td\u003e\n          \u003ctd\u003e⬜ Not started\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eEmulate TTPs\u003c/td\u003e\n          \u003ctd\u003e⬜ Planned\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eDetection Validation in ELK\u003c/td\u003e\n          \u003ctd\u003e⬜ Planned\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eATT\u0026amp;CK Mapping (Log Tagging)\u003c/td\u003e\n          \u003ctd\u003e⬜ Planned\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"-aiml--triage\"\u003e🧠 AI/ML \u0026amp; Triage\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eTask\u003c/th\u003e\n          \u003cth\u003eStatus\u003c/th\u003e\n          \u003cth\u003eNotes\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eFeature Engineering from Logs\u003c/td\u003e\n          \u003ctd\u003e⬜ Not started\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eML Model Training/Triage Layer\u003c/td\u003e\n          \u003ctd\u003e⬜ Not started\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eExplainability (e.g. SHAP, LIME)\u003c/td\u003e\n          \u003ctd\u003e⬜ Not started\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"-docs-blog-and-content\"\u003e✍️ Docs, Blog, and Content\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003ePage/Post\u003c/th\u003e\n          \u003cth\u003eStatus\u003c/th\u003e\n          \u003cth\u003eNotes\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003esite-setup.md\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e✅ Published\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003e/docs/\u003c/code\u003e index\u003c/td\u003e\n          \u003ctd\u003e✅ Scaffolded\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003e/about.md\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e✅ Done\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003estatus.md\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e✅ This page\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eCheck–Do–Check Templates\u003c/td\u003e\n          \u003ctd\u003e⬜ Planned\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003cp\u003eStay tuned for updates as OPFORGE evolves into a full-spectrum cyber detection and AI engineering lab.\u003c/p\u003e","title":"OPFORGE Status Overview"},{"content":"🔍 Purpose Deploy and configure the SOF-ELK stack for ingestion of structured JSON logs from Winlogbeat and other sources inside the OPFORGE lab.\n✅ Prerequisites VMware Workstation Pro VM: OPF-LOG01 Latest SOF-ELK Ubuntu-based image deployed Static IP assignment (e.g., 192.168.77.40) Inbound SSH/SCP and port 5044 (Beats input) allowed JSON-formatted Winlogbeat files structured for ingest 🔧 Check–Do–Check Workflow 🔍 Check Confirm network interface and IP: ip a ip route ping -c 3 8.8.8.8 Confirm Logstash is running: sudo systemctl status logstash ✅ Do 1. Assign Static IP with Netplan File: /etc/netplan/01-netcfg.yaml\nnetwork: version: 2 ethernets: ens33: addresses: - 192.168.77.40/24 nameservers: addresses: [1.1.1.1, 8.8.8.8] routes: - to: default via: 192.168.77.1 Apply it:\nsudo netplan apply 2. Ensure /logstash/kape/ exists and is writable sudo mkdir -p /logstash/kape sudo chown elk_user:elk_user /logstash/kape 3. Verify SOF-ELK Beats Listener grep 5044 /etc/logstash/conf.d/* If not active:\necho \u0026#34;input { beats { port =\u0026gt; 5044 } } output { stdout { codec =\u0026gt; rubydebug } }\u0026#34; | sudo tee /etc/logstash/conf.d/test-beats.conf Restart Logstash:\nsudo systemctl restart logstash 4. Ingest a Test File scp test.json elk_user@192.168.77.40:/logstash/kape/ Tail the Logstash log:\nsudo tail -f /var/log/logstash/logstash-plain.log 🔍 Check Verify document count in Elasticsearch: curl -XGET \u0026#39;localhost:9200/_cat/indices?v\u0026#39; Check Kibana at http://192.168.77.40 Navigate to Stack Management → Data Views Create a new index pattern for winlogbeat-* 🧠 Notes SOF-ELK includes prebuilt parsers but may require tuning Custom .conf files can be added to /etc/logstash/conf.d/ Use /tmp/*.json outputs during troubleshooting Next step: visualize logs with Kibana → `/docs/kibana-setup/\n","permalink":"https://opforge.dev/docs/sof-elk/","summary":"\u003ch2 id=\"-purpose\"\u003e🔍 Purpose\u003c/h2\u003e\n\u003cp\u003eDeploy and configure the SOF-ELK stack for ingestion of structured JSON logs from Winlogbeat and other sources inside the OPFORGE lab.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-prerequisites\"\u003e✅ Prerequisites\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eVMware Workstation Pro VM: \u003ccode\u003eOPF-LOG01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eLatest SOF-ELK Ubuntu-based image deployed\u003c/li\u003e\n\u003cli\u003eStatic IP assignment (e.g., \u003ccode\u003e192.168.77.40\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eInbound SSH/SCP and port 5044 (Beats input) allowed\u003c/li\u003e\n\u003cli\u003eJSON-formatted Winlogbeat files structured for ingest\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-checkdocheck-workflow\"\u003e🔧 Check–Do–Check Workflow\u003c/h2\u003e\n\u003ch3 id=\"-check\"\u003e🔍 Check\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eConfirm network interface and IP:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eip a\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eip route\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eping -c \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e 8.8.8.8\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003eConfirm Logstash is running:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo systemctl status logstash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"-do\"\u003e✅ Do\u003c/h3\u003e\n\u003ch4 id=\"1-assign-static-ip-with-netplan\"\u003e1. Assign Static IP with Netplan\u003c/h4\u003e\n\u003cp\u003eFile: \u003ccode\u003e/etc/netplan/01-netcfg.yaml\u003c/code\u003e\u003c/p\u003e","title":"SOF-ELK Setup \u0026 Ingestion"},{"content":"✅ Check SCP tool (e.g., pscp.exe) installed SSH keypair created and trusted by SOF-ELK Export directory contains .ndjson files Target path on SOF-ELK exists and is writable ⚙️ Do Create a PowerShell script:\n$sourceFolder = \u0026#34;C:\\ProgramData\\winlogbeat\\opforge-export\u0026#34; $tempOutput = \u0026#34;C:\\Temp\\opforge-winlogbeat-cleaned.json\u0026#34; $sofElkUser = \u0026#34;elk_user\u0026#34; $sofElkHost = \u0026#34;192.168.77.40\u0026#34; $sofElkDest = \u0026#34;/logstash/kape/\u0026#34; $timestamp = Get-Date -Format \u0026#34;yyyyMMddHHmmss\u0026#34; $finalFile = \u0026#34;opforge-winlogbeat-$timestamp.json\u0026#34; # Process and transfer Get-ChildItem $sourceFolder -Filter \u0026#34;winlogbeat.json-*.ndjson\u0026#34; | ForEach-Object { Get-Content $_.FullName | ForEach-Object { try { $event = $_ | ConvertFrom-Json $event | ConvertTo-Json -Depth 10 -Compress } catch {} } | Out-File -Encoding utf8 -FilePath $tempOutput \u0026amp; \u0026#39;C:\\Program Files\\PuTTY\\pscp.exe\u0026#39; -i \u0026#34;C:\\Users\\Administrator\\Documents\\id_rsa.ppk\u0026#34; ` $tempOutput \u0026#34;$sofElkUser@$sofElkHost:$sofElkDest$finalFile\u0026#34; Remove-Item $_.FullName -Force } 🔍 Check JSON files arrive in /logstash/kape/ on opf-log01 Files are parseable with jq or cat | head SCP transfer succeeds without errors ","permalink":"https://opforge.dev/posts/log-transfer-powershell-scp/","summary":"This post describes how to automate the conversion and transfer of Winlogbeat logs from \u003ccode\u003eopf-mbr01\u003c/code\u003e to \u003ccode\u003eopf-log01\u003c/code\u003e using PowerShell and SCP.","title":"From Host to Hive: Transferring Logs with PowerShell + SCP"},{"content":"✅ Check Winlogbeat service is running Security logs present in Event Viewer Static export path created (e.g., C:\\ProgramData\\winlogbeat\\opforge-export\\) SOF-ELK reachable via IP (e.g., 192.168.77.40) ⚙️ Do Modify winlogbeat.yml:\noutput.file: path: \u0026#34;C:/ProgramData/winlogbeat/opforge-export\u0026#34; filename: \u0026#34;winlogbeat.json\u0026#34; rotate_every_kb: 10000 number_of_files: 5 codec.format: string: \u0026#39;%{[message]}\u0026#39; Restart Winlogbeat:\nRestart-Service winlogbeat 🔍 Check .ndjson files appear in the export directory Each entry is valid line-separated JSON Key events (e.g., 4624, 4688, 1102) are present ","permalink":"https://opforge.dev/posts/winlogbeat-export-opf-mbr01/","summary":"We configure Winlogbeat on \u003ccode\u003eopf-mbr01\u003c/code\u003e to export JSON-formatted logs to disk. This allows enriched post-processing before ingesting into SOF-ELK.","title":"Precision Logging: Exporting Winlogbeat Data from OPFORGE"},{"content":"✅ Check Define static IP (e.g., 192.168.77.40/24) Verify existing DNS settings on opf-dc01 for proper resolution Confirm latest Ubuntu-based version of SOF-ELK is available Snapshot VM prior to major config changes ⚙️ Do Deploy SOF-ELK using the latest Ubuntu-based VM image Configure netplan: network: version: 2 ethernets: ens33: dhcp4: no addresses: - 192.168.77.40/24 gateway4: 192.168.77.1 nameservers: addresses: - 192.168.77.10 Apply config: sudo netplan apply Confirm services are running: sudo systemctl status logstash sudo systemctl status elasticsearch sudo systemctl status kibana 🔍 Check Kibana loads at http://opf-log01:5601 Logstash logs show listeners on key ports (5044, 5514) Elasticsearch responds at localhost:9200 ","permalink":"https://opforge.dev/posts/opf-log01-sof-elk-setup/","summary":"This post walks through the deployment and configuration of \u003ccode\u003eopf-log01\u003c/code\u003e, the centralized logging VM for OPFORGE, powered by SOF-ELK. From network setup to confirming ELK stack services, this guide ensures a solid foundation for ingesting security-relevant data.","title":"Ingest to Analyze: Bringing SOF-ELK Online"},{"content":"This post documents the process of building the official website for OPFORGE, a cybersecurity lab project focused on detection engineering, threat emulation, and explainable AI.\n🔧 Tooling Stack Hugo – Static site generator (v0.147.1) PaperMod – Lightweight, responsive Hugo theme GitHub Pages – CI/CD-backed static hosting Cloudflare DNS – Domain and HTTPS management Custom Domain – https://opforge.dev 🧱 Build Process Created site: hugo new site opforge-site --format yaml Installed theme: git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod Configured hugo.yaml with menus, theme, and metadata\nCreated first post and tested site locally:\nhugo server Set up GitHub Actions for CI/CD: peaceiris/actions-hugo@v2 for building peaceiris/actions-gh-pages@v3 for deployment Set baseURL for GitHub Pages: baseURL: \u0026#34;https://ATHL337.github.io/opforge-site/\u0026#34; Set GitHub Pages source branch to gh-pages in repository settings\nUpdated DNS via Cloudflare:\nA records for root domain pointing to GitHub Pages IPs CNAME for www pointing to ATHL337.github.io HTTPS enforced 🌐 Outcome With minimal effort and a clean Hugo theme, the OPFORGE site is:\nEasy to write and publish to Fully version-controlled Built for scaling into documentation, blog posts, and operator guides 🧠 Lessons Learned Always configure baseURL properly for Hugo builds Don’t push the public/ directory—let CI/CD handle it GitHub Actions + Hugo + Cloudflare = elegant, scalable, and secure More blog posts coming soon on the build-out of the lab, including SOF-ELK setup, Winlogbeat JSON export, and ingestion pipelines.\n","permalink":"https://opforge.dev/posts/site-setup/","summary":"\u003cp\u003eThis post documents the process of building the official website for \u003cstrong\u003eOPFORGE\u003c/strong\u003e, a cybersecurity lab project focused on detection engineering, threat emulation, and explainable AI.\u003c/p\u003e\n\u003ch2 id=\"-tooling-stack\"\u003e🔧 Tooling Stack\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHugo\u003c/strong\u003e – Static site generator (v0.147.1)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePaperMod\u003c/strong\u003e – Lightweight, responsive Hugo theme\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGitHub Pages\u003c/strong\u003e – CI/CD-backed static hosting\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCloudflare DNS\u003c/strong\u003e – Domain and HTTPS management\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCustom Domain\u003c/strong\u003e – \u003ccode\u003ehttps://opforge.dev\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-build-process\"\u003e🧱 Build Process\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eCreated site:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   hugo new site opforge-site --format yaml\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003eInstalled theme:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\n\u003cp\u003eConfigured \u003ccode\u003ehugo.yaml\u003c/code\u003e with menus, theme, and metadata\u003c/p\u003e","title":"Building the OPFORGE Website"},{"content":"This guide walks through the creation of the Windows VMs used in OPFORGE, including the Domain Controller (opf-dc01) and the Member Workstation (opf-mbr01), using VMware Workstation Pro.\n🛠️ Prerequisites VMware Workstation Pro (or Player) Windows Server 2019 ISO Windows 10/11 ISO Sufficient RAM (8–16 GB minimum) Disk space: At least 100GB free 📁 VM Folder Structure Organize your lab directory:\nOPFORGE-VMs/ ├── opf-dc01/ └── opf-mbr01/ 🧱 VM 1: Domain Controller (opf-dc01) Create a new VM from the Windows Server 2019 ISO. Configure: RAM: 4096 MB Processors: 2 NIC: NAT or Custom VMnet (e.g., VMnet2) Disk: 60 GB (preallocated optional) Install Windows and set hostname: opf-dc01 Set static IP (e.g., 192.168.77.10) Rename Ethernet to LAN (optional) Promote to Domain Controller: Install-WindowsFeature AD-Domain-Services -IncludeManagementTools Install-ADDSForest -DomainName \u0026#34;opforge.local\u0026#34; -InstallDNS -Force 🖥️ VM 2: Member Workstation (opf-mbr01) Create a new VM from the Windows 10 or 11 ISO. Configure: RAM: 4096 MB Processors: 2 NIC: Same network as opf-dc01 Disk: 60 GB Install Windows and set hostname: opf-mbr01 Set static IP (e.g., 192.168.77.20) with DNS pointing to opf-dc01 Join the domain: Add-Computer -DomainName opforge.local -Restart 🔍 Check Both VMs should ping each other Domain join successful Static IP and DNS validated via ipconfig /all Snapshots created after each critical stage 🔗 Related Pages opf-dc01 Domain Setup Winlogbeat Export ","permalink":"https://opforge.dev/docs/windows-setup/","summary":"\u003cp\u003eThis guide walks through the creation of the Windows VMs used in OPFORGE, including the Domain Controller (\u003ccode\u003eopf-dc01\u003c/code\u003e) and the Member Workstation (\u003ccode\u003eopf-mbr01\u003c/code\u003e), using VMware Workstation Pro.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-prerequisites\"\u003e🛠️ Prerequisites\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eVMware Workstation Pro (or Player)\u003c/li\u003e\n\u003cli\u003eWindows Server 2019 ISO\u003c/li\u003e\n\u003cli\u003eWindows 10/11 ISO\u003c/li\u003e\n\u003cli\u003eSufficient RAM (8–16 GB minimum)\u003c/li\u003e\n\u003cli\u003eDisk space: At least 100GB free\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-vm-folder-structure\"\u003e📁 VM Folder Structure\u003c/h2\u003e\n\u003cp\u003eOrganize your lab directory:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eOPFORGE-VMs/\n├── opf-dc01/\n└── opf-mbr01/\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003ch2 id=\"-vm-1-domain-controller-opf-dc01\"\u003e🧱 VM 1: Domain Controller (\u003ccode\u003eopf-dc01\u003c/code\u003e)\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eCreate a new VM from the Windows Server 2019 ISO.\u003c/li\u003e\n\u003cli\u003eConfigure:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRAM\u003c/strong\u003e: 4096 MB\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProcessors\u003c/strong\u003e: 2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNIC\u003c/strong\u003e: NAT or Custom VMnet (e.g., \u003ccode\u003eVMnet2\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDisk\u003c/strong\u003e: 60 GB (preallocated optional)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eInstall Windows and set hostname: \u003ccode\u003eopf-dc01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSet static IP (e.g., \u003ccode\u003e192.168.77.10\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eRename Ethernet to \u003ccode\u003eLAN\u003c/code\u003e (optional)\u003c/li\u003e\n\u003cli\u003ePromote to Domain Controller:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInstall-WindowsFeature AD-Domain-Services -IncludeManagementTools\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInstall-ADDSForest -DomainName \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;opforge.local\u0026#34;\u003c/span\u003e -InstallDNS -Force\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"-vm-2-member-workstation-opf-mbr01\"\u003e🖥️ VM 2: Member Workstation (\u003ccode\u003eopf-mbr01\u003c/code\u003e)\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eCreate a new VM from the Windows 10 or 11 ISO.\u003c/li\u003e\n\u003cli\u003eConfigure:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRAM\u003c/strong\u003e: 4096 MB\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProcessors\u003c/strong\u003e: 2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNIC\u003c/strong\u003e: Same network as \u003ccode\u003eopf-dc01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDisk\u003c/strong\u003e: 60 GB\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eInstall Windows and set hostname: \u003ccode\u003eopf-mbr01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSet static IP (e.g., \u003ccode\u003e192.168.77.20\u003c/code\u003e) with DNS pointing to \u003ccode\u003eopf-dc01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eJoin the domain:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAdd-Computer -DomainName opforge.local -Restart\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"-check\"\u003e🔍 Check\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBoth VMs should ping each other\u003c/li\u003e\n\u003cli\u003eDomain join successful\u003c/li\u003e\n\u003cli\u003eStatic IP and DNS validated via \u003ccode\u003eipconfig /all\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSnapshots created after each critical stage\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-related-pages\"\u003e🔗 Related Pages\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/posts/opf-dc01-domain-controller/\"\u003eopf-dc01 Domain Setup\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/posts/winlogbeat-export-opf-mbr01/\"\u003eWinlogbeat Export\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Windows VM Setup for OPFORGE"},{"content":"✅ Check Define static IP plan (e.g., 192.168.77.10/24 for opf-dc01) Decide on a domain name (e.g., opforge.local) Draft realistic Organizational Unit (OU) structure Determine initial user/group and DNS configuration ⚙️ Do Install Windows Server 2019 (Standard Core) Set static IP, DNS (self-referential), and hostname Use Server Manager or sconfig to install AD DS role Promote to Domain Controller using dcpromo GUI or PowerShell: Install-WindowsFeature AD-Domain-Services -IncludeManagementTools Install-ADDSForest -DomainName \u0026#34;opforge.local\u0026#34; -InstallDNS -Force Create initial OU tree: OPFORGE\\Computers\\Servers OPFORGE\\Users\\RedTeam, BlueTeam, ServiceAccounts 🔍 Check Log in via domain admin to ensure proper promotion Validate nslookup returns local DNS Confirm Active Directory Users and Computers (ADUC) shows correct structure Document credentials and snapshot before member server joins ","permalink":"https://opforge.dev/posts/opf-dc01-domain-controller/","summary":"In this post, we configure OPFORGE\u0026rsquo;s foundational infrastructure by building the domain controller \u003ccode\u003eopf-dc01\u003c/code\u003e. We\u0026rsquo;ll define our network structure, stand up Active Directory, and prepare the environment for workstation and log server integration.","title":"Forging the Core: Building OPFORGE's Domain Controller"},{"content":"Welcome to OPFORGE: the Operational Forge for modern cyber capabilities. This blog series documents the buildout of a flexible, high-fidelity lab designed to support:\nThreat emulation using tools like Atomic Red Team and custom adversary simulations Detection engineering against MITRE ATT\u0026amp;CK TTPs Ingestion and correlation using SOF-ELK and custom pipelines AI/ML-assisted triage and explainable decision pipelines The infrastructure is powered by a set of virtual machines hosted in VMware Workstation Pro, starting with:\nopf-dc01: Windows Server Domain Controller for Active Directory opf-log01: SOF-ELK-based ingestion server opf-mbr01: Windows 10 Member Workstation (target for attack + log source) opf-red01: Threat emulation box (C2 + Atomic) opf-blue01: Analyst jumpbox (Kibana, Sigma, notebooks) The lab is logically segmented using a 192.168.77.0/24 network and tracks realistic OU and host deployment for flexibility.\nStay tuned for detailed Check–Do–Check style walkthroughs.\n","permalink":"https://opforge.dev/posts/opforge-overview/","summary":"Introducing the OPFORGE project—a purpose-built cyber operations lab focused on threat emulation, detection engineering, and explainable AI.","title":"OPFORGE Overview"},{"content":"OPFORGE VM Clone Map Template Clone Name Purpose base-ubuntu-2204-template opf-red01 Red Team operator box base-ubuntu-2204-template opf-log01 Log pipeline (Zeek, OpenSearch) base-ubuntu-2204-template opf-ai01 Jupyter + anomaly detection base-ubuntu-2204-template opf-cloud01 Targeted web app for attack base-windows10-template opf-mbr01 Domain-joined endpoint Notes All clones renamed post-creation Hostname, IP, and NICs customized per segment Clones are snapshot-friendly and scriptable ","permalink":"https://opforge.dev/docs/opf-clone-map/","summary":"\u003ch1 id=\"opforge-vm-clone-map\"\u003eOPFORGE VM Clone Map\u003c/h1\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eTemplate\u003c/th\u003e\n          \u003cth\u003eClone Name\u003c/th\u003e\n          \u003cth\u003ePurpose\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-red01\u003c/td\u003e\n          \u003ctd\u003eRed Team operator box\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-log01\u003c/td\u003e\n          \u003ctd\u003eLog pipeline (Zeek, OpenSearch)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-ai01\u003c/td\u003e\n          \u003ctd\u003eJupyter + anomaly detection\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-cloud01\u003c/td\u003e\n          \u003ctd\u003eTargeted web app for attack\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-windows10-template\u003c/td\u003e\n          \u003ctd\u003eopf-mbr01\u003c/td\u003e\n          \u003ctd\u003eDomain-joined endpoint\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAll clones renamed post-creation\u003c/li\u003e\n\u003cli\u003eHostname, IP, and NICs customized per segment\u003c/li\u003e\n\u003cli\u003eClones are snapshot-friendly and scriptable\u003c/li\u003e\n\u003c/ul\u003e","title":""},{"content":"OPFORGE Infrastructure Overview Overview OPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\nEvolution Timeline Phase 1: Initial Sandbox Single VM (SOF-ELK) Flat network, no segmentation Manual log ingestion Phase 2: Tactical Expansion Added pfSense (opf-fw01) Introduced segmentation: CSOCINFRA, DMZRED, LANWORKSTATIONS, ADINFRA First red team emulation with opf-red01 Winlogbeat and Sysmon on endpoints Phase 3: Professionalization Cloned base templates (base-ubuntu-2204-template, base-windows10-template) VM-specific roles: opf-ai01, opf-log01, opf-mbr01, etc. AI and ML integration via Jupyter (opf-ai01) Multi-tiered ingest pipeline (Zeek → Logstash → OpenSearch) Network Layout Segment Subnet Purpose CSOCINFRA 192.168.20.0/24 Log pipeline + AI tools LANWORKSTATIONS 192.168.30.0/24 Domain-joined endpoints DMZRED 192.168.22.0/24 Attacker target surface ADINFRA 192.168.40.0/24 Domain controller subnet Lessons Learned Legacy OS images break modern tools Cloning base templates improves consistency Network segmentation is essential for realistic detection engineering ","permalink":"https://opforge.dev/docs/opf-infra/","summary":"\u003ch1 id=\"opforge-infrastructure-overview\"\u003eOPFORGE Infrastructure Overview\u003c/h1\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eOPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\u003c/p\u003e\n\u003ch2 id=\"evolution-timeline\"\u003eEvolution Timeline\u003c/h2\u003e\n\u003ch3 id=\"phase-1-initial-sandbox\"\u003ePhase 1: Initial Sandbox\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSingle VM (SOF-ELK)\u003c/li\u003e\n\u003cli\u003eFlat network, no segmentation\u003c/li\u003e\n\u003cli\u003eManual log ingestion\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-2-tactical-expansion\"\u003ePhase 2: Tactical Expansion\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eAdded pfSense (\u003ccode\u003eopf-fw01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eIntroduced segmentation: \u003ccode\u003eCSOCINFRA\u003c/code\u003e, \u003ccode\u003eDMZRED\u003c/code\u003e, \u003ccode\u003eLANWORKSTATIONS\u003c/code\u003e, \u003ccode\u003eADINFRA\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eFirst red team emulation with \u003ccode\u003eopf-red01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eWinlogbeat and Sysmon on endpoints\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-3-professionalization\"\u003ePhase 3: Professionalization\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCloned base templates (\u003ccode\u003ebase-ubuntu-2204-template\u003c/code\u003e, \u003ccode\u003ebase-windows10-template\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eVM-specific roles: \u003ccode\u003eopf-ai01\u003c/code\u003e, \u003ccode\u003eopf-log01\u003c/code\u003e, \u003ccode\u003eopf-mbr01\u003c/code\u003e, etc.\u003c/li\u003e\n\u003cli\u003eAI and ML integration via Jupyter (\u003ccode\u003eopf-ai01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eMulti-tiered ingest pipeline (Zeek → Logstash → OpenSearch)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"network-layout\"\u003eNetwork Layout\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eSegment\u003c/th\u003e\n          \u003cth\u003eSubnet\u003c/th\u003e\n          \u003cth\u003ePurpose\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eCSOCINFRA\u003c/td\u003e\n          \u003ctd\u003e192.168.20.0/24\u003c/td\u003e\n          \u003ctd\u003eLog pipeline + AI tools\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLANWORKSTATIONS\u003c/td\u003e\n          \u003ctd\u003e192.168.30.0/24\u003c/td\u003e\n          \u003ctd\u003eDomain-joined endpoints\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eDMZRED\u003c/td\u003e\n          \u003ctd\u003e192.168.22.0/24\u003c/td\u003e\n          \u003ctd\u003eAttacker target surface\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eADINFRA\u003c/td\u003e\n          \u003ctd\u003e192.168.40.0/24\u003c/td\u003e\n          \u003ctd\u003eDomain controller subnet\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"lessons-learned\"\u003eLessons Learned\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLegacy OS images break modern tools\u003c/li\u003e\n\u003cli\u003eCloning base templates improves consistency\u003c/li\u003e\n\u003cli\u003eNetwork segmentation is essential for realistic detection engineering\u003c/li\u003e\n\u003c/ul\u003e","title":""},{"content":"OPFORGE Network Layout Segments CSOCINFRA (192.168.20.0/24): Houses opf-log01 (SIEM) and opf-ai01 (ML detection) LANWORKSTATIONS (192.168.30.0/24): Contains opf-mbr01 and future endpoints DMZRED (192.168.22.0/24): Hosts attacker targets like opf-cloud01 ADINFRA (192.168.40.0/24): Supports opf-dc01 and GPO testing Example Host Assignments Host IP Address Segment opf-fw01 192.168.1.24 (WAN) pfSense router opf-dc01 192.168.40.100 ADINFRA opf-mbr01 192.168.30.101 LANWORKSTATIONS opf-red01 192.168.22.50 DMZRED opf-log01 192.168.20.12 CSOCINFRA ","permalink":"https://opforge.dev/docs/opf-network-layout/","summary":"\u003ch1 id=\"opforge-network-layout\"\u003eOPFORGE Network Layout\u003c/h1\u003e\n\u003ch2 id=\"segments\"\u003eSegments\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCSOCINFRA (192.168.20.0/24)\u003c/strong\u003e: Houses \u003ccode\u003eopf-log01\u003c/code\u003e (SIEM) and \u003ccode\u003eopf-ai01\u003c/code\u003e (ML detection)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLANWORKSTATIONS (192.168.30.0/24)\u003c/strong\u003e: Contains \u003ccode\u003eopf-mbr01\u003c/code\u003e and future endpoints\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDMZRED (192.168.22.0/24)\u003c/strong\u003e: Hosts attacker targets like \u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eADINFRA (192.168.40.0/24)\u003c/strong\u003e: Supports \u003ccode\u003eopf-dc01\u003c/code\u003e and GPO testing\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"example-host-assignments\"\u003eExample Host Assignments\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eHost\u003c/th\u003e\n          \u003cth\u003eIP Address\u003c/th\u003e\n          \u003cth\u003eSegment\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-fw01\u003c/td\u003e\n          \u003ctd\u003e192.168.1.24 (WAN)\u003c/td\u003e\n          \u003ctd\u003epfSense router\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-dc01\u003c/td\u003e\n          \u003ctd\u003e192.168.40.100\u003c/td\u003e\n          \u003ctd\u003eADINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-mbr01\u003c/td\u003e\n          \u003ctd\u003e192.168.30.101\u003c/td\u003e\n          \u003ctd\u003eLANWORKSTATIONS\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-red01\u003c/td\u003e\n          \u003ctd\u003e192.168.22.50\u003c/td\u003e\n          \u003ctd\u003eDMZRED\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-log01\u003c/td\u003e\n          \u003ctd\u003e192.168.20.12\u003c/td\u003e\n          \u003ctd\u003eCSOCINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":""},{"content":"OPFORGE Base Templates base-ubuntu-2204-template OS: Ubuntu 22.04 LTS Minimal Uses: Cloning source for opf-red01, opf-log01, opf-ai01, opf-cloud01 Hardened baseline with: UFW firewall SSH key-based auth Git, Python, pip pre-installed Snapshot name: Clean Install – Ready for Clone base-windows10-template OS: Windows 10 Pro 22H2 (fully patched) Uses: Cloning source for opf-mbr01, future victims Tools installed via Chocolatey: Sysmon, Winlogbeat, VSCode, Wireshark, Sysinternals Pre-Sysprep and snapshot-ready ","permalink":"https://opforge.dev/docs/opf-template-notes/","summary":"\u003ch1 id=\"opforge-base-templates\"\u003eOPFORGE Base Templates\u003c/h1\u003e\n\u003ch2 id=\"base-ubuntu-2204-template\"\u003ebase-ubuntu-2204-template\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOS: Ubuntu 22.04 LTS Minimal\u003c/li\u003e\n\u003cli\u003eUses: Cloning source for \u003ccode\u003eopf-red01\u003c/code\u003e, \u003ccode\u003eopf-log01\u003c/code\u003e, \u003ccode\u003eopf-ai01\u003c/code\u003e, \u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eHardened baseline with:\n\u003cul\u003e\n\u003cli\u003eUFW firewall\u003c/li\u003e\n\u003cli\u003eSSH key-based auth\u003c/li\u003e\n\u003cli\u003eGit, Python, pip pre-installed\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSnapshot name: \u003ccode\u003eClean Install – Ready for Clone\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"base-windows10-template\"\u003ebase-windows10-template\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOS: Windows 10 Pro 22H2 (fully patched)\u003c/li\u003e\n\u003cli\u003eUses: Cloning source for \u003ccode\u003eopf-mbr01\u003c/code\u003e, future victims\u003c/li\u003e\n\u003cli\u003eTools installed via Chocolatey:\n\u003cul\u003e\n\u003cli\u003eSysmon, Winlogbeat, VSCode, Wireshark, Sysinternals\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ePre-Sysprep and snapshot-ready\u003c/li\u003e\n\u003c/ul\u003e","title":""}]