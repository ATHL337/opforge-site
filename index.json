[{"content":"What is OPFORGE? OPFORGE stands for Offensive Posture + FORensics + Generation \u0026amp; Engineering. It\u0026rsquo;s a purpose-built cybersecurity lab environment designed to:\nüõ†Ô∏è Emulate adversary behavior üîç Ingest and enrich telemetry from Windows and Linux endpoints üß† Apply explainable AI to triage and surface detections üìö Document real-world operator workflows Whether you\u0026rsquo;re reverse-engineering a malware sample, developing YARA rules, or building detection pipelines with SOF-ELK, OPFORGE is designed to mirror the complexity and realism of mission-ready cyber defense.\nMission Goals Threat Emulation\nUse Atomic Red Team, Caldera, and custom payloads to simulate known TTPs. Detection Engineering\nBuild, test, and validate detection logic using tools like Winlogbeat, Sysmon, and ELK. Explainable AI\nIncorporate open-source ML models for clustering, classification, and triage augmentation with transparency and traceability. Documentation\nShare the setup process, automation, infrastructure, and detection results in a Check‚ÄìDo‚ÄìCheck blog series. Who\u0026rsquo;s Behind It? OPFORGE is developed and maintained by Alfredo Pelaez, a senior enlisted cyber warfare operator and lifelong learner focused on the intersection of threat detection and machine learning.\nWant to Contribute or Reproduce? Visit the GitHub Repo Fork the blog series and lab setup documentation Suggest topics or TTPs you\u0026rsquo;d like to see emulated Built using Hugo + PaperMod + GitHub Pages Hosted on opforge.dev\n","permalink":"https://opforge.dev/about/","summary":"\u003ch2 id=\"what-is-opforge\"\u003eWhat is OPFORGE?\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eOPFORGE\u003c/strong\u003e stands for \u003cstrong\u003eOffensive Posture + FORensics + Generation \u0026amp; Engineering\u003c/strong\u003e. It\u0026rsquo;s a purpose-built cybersecurity lab environment designed to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eüõ†Ô∏è Emulate adversary behavior\u003c/li\u003e\n\u003cli\u003eüîç Ingest and enrich telemetry from Windows and Linux endpoints\u003c/li\u003e\n\u003cli\u003eüß† Apply explainable AI to triage and surface detections\u003c/li\u003e\n\u003cli\u003eüìö Document real-world operator workflows\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhether you\u0026rsquo;re reverse-engineering a malware sample, developing YARA rules, or building detection pipelines with SOF-ELK, OPFORGE is designed to mirror the complexity and realism of mission-ready cyber defense.\u003c/p\u003e","title":"About OPFORGE"},{"content":"üîç Purpose Enable structured Windows event logs to flow from OPFORGE\u0026rsquo;s Windows Member VM to SOF-ELK using Winlogbeat, a JSON exporter, and PowerShell automation.\n‚úÖ Prerequisites Windows 10/11 host joined to domain (e.g., OPF-MBR01) Winlogbeat installed and configured SSH access to SOF-ELK (e.g., elk_user@192.168.77.40) Valid PuTTY key pair (.ppk) for SCP transfers (if using PSCP) Target folder on SOF-ELK writable by elk_user (e.g., /logstash/kape/) üîß Check‚ÄìDo‚ÄìCheck Workflow üîç Check Confirm Winlogbeat is writing .ndjson files locally: Get-ChildItem -Path \u0026#39;C:\\ProgramData\\winlogbeat\\opforge-export\u0026#39; -Filter *.ndjson ‚úÖ Do 1. Configure Winlogbeat to output JSON Edit winlogbeat.yml:\noutput.file: path: \u0026#34;C:/ProgramData/winlogbeat/opforge-export\u0026#34; filename: \u0026#34;winlogbeat.json\u0026#34; rotate_every_kb: 10000 number_of_files: 5 codec.format: string: \u0026#39;%{[message]}\u0026#39; Restart the Winlogbeat service:\nRestart-Service winlogbeat 2. Create Export Script File: Export-WinlogbeatToSOFELK.ps1\n$sourceFolder = \u0026#34;C:\\ProgramData\\winlogbeat\\opforge-export\u0026#34; $tempOutput = \u0026#34;C:\\Temp\\opforge-winlogbeat-cleaned.json\u0026#34; $sofElkUser = \u0026#34;elk_user\u0026#34; $sofElkHost = \u0026#34;192.168.77.40\u0026#34; $sofElkDest = \u0026#34;/logstash/kape/\u0026#34; $timestamp = Get-Date -Format \u0026#34;yyyyMMddHHmmss\u0026#34; $finalFile = \u0026#34;opforge-winlogbeat-$timestamp.json\u0026#34; Get-ChildItem -Path $sourceFolder -Filter \u0026#34;winlogbeat.json-*.ndjson\u0026#34; | ForEach-Object { Get-Content $_.FullName | ForEach-Object { try { $event = $_ | ConvertFrom-Json if ($event.event.code -eq 4624) { $event | Add-Member -MemberType NoteProperty -Name mitre_technique_id -Value \u0026#34;T1078\u0026#34; } $event | ConvertTo-Json -Depth 10 -Compress } catch {} } | Out-File -Encoding utf8 -Append -FilePath $tempOutput } \u0026amp; \u0026#34;C:\\Program Files\\PuTTY\\pscp.exe\u0026#34; -i \u0026#34;C:\\Users\\Administrator\\Documents\\id_rsa.ppk\u0026#34; $tempOutput \u0026#34;${sofElkUser}@${sofElkHost}:${sofElkDest}${finalFile}\u0026#34; # Clean up Remove-Item -Path $tempOutput -Force Run it:\nC:\\Scripts\\Export-WinlogbeatToSOFELK.ps1 üîç Check On SOF-ELK:\nls /logstash/kape/opforge-winlogbeat-*.json Then tail /var/log/logstash/logstash-plain.log and watch for ingestion activity.\nüß† Notes Logs are enriched with MITRE mapping (4624 ‚Üí T1078) Export can be cron‚Äôd or scheduled Logs land in kape pipeline but are standalone JSON Next step: configure Kibana index pattern + Data View to visualize ingest. ‚Üí /docs/kibana-setup/\n","permalink":"https://opforge.dev/docs/winlogbeat-export/","summary":"\u003ch2 id=\"-purpose\"\u003eüîç Purpose\u003c/h2\u003e\n\u003cp\u003eEnable structured Windows event logs to flow from OPFORGE\u0026rsquo;s Windows Member VM to SOF-ELK using Winlogbeat, a JSON exporter, and PowerShell automation.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-prerequisites\"\u003e‚úÖ Prerequisites\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eWindows 10/11 host joined to domain (e.g., \u003ccode\u003eOPF-MBR01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eWinlogbeat installed and configured\u003c/li\u003e\n\u003cli\u003eSSH access to SOF-ELK (e.g., \u003ccode\u003eelk_user@192.168.77.40\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eValid PuTTY key pair (\u003ccode\u003e.ppk\u003c/code\u003e) for SCP transfers (if using PSCP)\u003c/li\u003e\n\u003cli\u003eTarget folder on SOF-ELK writable by \u003ccode\u003eelk_user\u003c/code\u003e (e.g., \u003ccode\u003e/logstash/kape/\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-checkdocheck-workflow\"\u003eüîß Check‚ÄìDo‚ÄìCheck Workflow\u003c/h2\u003e\n\u003ch3 id=\"-check\"\u003eüîç Check\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eConfirm Winlogbeat is writing \u003ccode\u003e.ndjson\u003c/code\u003e files locally:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eGet-ChildItem -Path \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C:\\ProgramData\\winlogbeat\\opforge-export\u0026#39;\u003c/span\u003e -Filter *.ndjson\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-do\"\u003e‚úÖ Do\u003c/h3\u003e\n\u003ch4 id=\"1-configure-winlogbeat-to-output-json\"\u003e1. Configure Winlogbeat to output JSON\u003c/h4\u003e\n\u003cp\u003eEdit \u003ccode\u003ewinlogbeat.yml\u003c/code\u003e:\u003c/p\u003e","title":"Exporting Winlogbeat Logs to SOF-ELK"},{"content":"üß≠ Project Status: OPFORGE This page tracks the current progress of OPFORGE‚Äîcovering infrastructure setup, log ingestion, threat emulation, and explainable detection pipelines.\n‚úÖ Foundation \u0026amp; Deployment Area Status Notes Domain Purchased ‚úÖ opforge.dev via Cloudflare Hugo Static Site Created ‚úÖ With PaperMod theme GitHub Repo Initialized ‚úÖ opforge-site GitHub Actions CI/CD ‚úÖ Deploys on push to main GitHub Pages Configured ‚úÖ Using gh-pages branch Custom Domain Mapped ‚úÖ Site live at https://opforge.dev .gitignore Configured ‚úÖ Excludes public/ Hugo baseURL Configured ‚úÖ Matches live domain About Page ‚úÖ /about/ scaffolded Blog Setup ‚úÖ Blog post created to document site build Docs Landing Page ‚úÖ /docs/ structured with Check‚ÄìDo‚ÄìCheck flow üß± Infrastructure + Ingestion Component Status Notes Windows Server (DC01) ‚úÖ Configured with static IP Member Windows Host ‚úÖ Logs exported via Winlogbeat Winlogbeat JSON Workflow ‚úÖ SCP + filter/enrich to SOF-ELK SOF-ELK Ingestion (Ubuntu) ‚úÖ New version deployed Kibana + Index Visibility ‚úÖ Verified working Custom Index Definitions ‚ö†Ô∏è Partially done, needs tuning ‚öîÔ∏è Threat Emulation \u0026amp; Detection Engineering Task Status Notes Atomic Red Team Setup ‚¨ú Not started Emulate TTPs ‚¨ú Planned Detection Validation in ELK ‚¨ú Planned ATT\u0026amp;CK Mapping (Log Tagging) ‚¨ú Planned üß† AI/ML \u0026amp; Triage Task Status Notes Feature Engineering from Logs ‚¨ú Not started ML Model Training/Triage Layer ‚¨ú Not started Explainability (e.g. SHAP, LIME) ‚¨ú Not started ‚úçÔ∏è Docs, Blog, and Content Page/Post Status Notes site-setup.md ‚úÖ Published /docs/ index ‚úÖ Scaffolded /about.md ‚úÖ Done status.md ‚úÖ This page Check‚ÄìDo‚ÄìCheck Templates ‚¨ú Planned Stay tuned for updates as OPFORGE evolves into a full-spectrum cyber detection and AI engineering lab.\n","permalink":"https://opforge.dev/docs/status/","summary":"\u003ch1 id=\"-project-status-opforge\"\u003eüß≠ Project Status: OPFORGE\u003c/h1\u003e\n\u003cp\u003eThis page tracks the current progress of OPFORGE‚Äîcovering infrastructure setup, log ingestion, threat emulation, and explainable detection pipelines.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-foundation--deployment\"\u003e‚úÖ Foundation \u0026amp; Deployment\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eArea\u003c/th\u003e\n          \u003cth\u003eStatus\u003c/th\u003e\n          \u003cth\u003eNotes\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eDomain Purchased\u003c/td\u003e\n          \u003ctd\u003e‚úÖ \u003ccode\u003eopforge.dev\u003c/code\u003e via Cloudflare\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eHugo Static Site Created\u003c/td\u003e\n          \u003ctd\u003e‚úÖ With PaperMod theme\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eGitHub Repo Initialized\u003c/td\u003e\n          \u003ctd\u003e‚úÖ \u003ca href=\"https://github.com/ATHL337/opforge-site\"\u003eopforge-site\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eGitHub Actions CI/CD\u003c/td\u003e\n          \u003ctd\u003e‚úÖ Deploys on push to \u003ccode\u003emain\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eGitHub Pages Configured\u003c/td\u003e\n          \u003ctd\u003e‚úÖ Using \u003ccode\u003egh-pages\u003c/code\u003e branch\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eCustom Domain Mapped\u003c/td\u003e\n          \u003ctd\u003e‚úÖ Site live at \u003ccode\u003ehttps://opforge.dev\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003e.gitignore\u003c/code\u003e Configured\u003c/td\u003e\n          \u003ctd\u003e‚úÖ Excludes \u003ccode\u003epublic/\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eHugo baseURL Configured\u003c/td\u003e\n          \u003ctd\u003e‚úÖ Matches live domain\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eAbout Page\u003c/td\u003e\n          \u003ctd\u003e‚úÖ /about/ scaffolded\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eBlog Setup\u003c/td\u003e\n          \u003ctd\u003e‚úÖ Blog post created to document site build\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eDocs Landing Page\u003c/td\u003e\n          \u003ctd\u003e‚úÖ /docs/ structured with Check‚ÄìDo‚ÄìCheck flow\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"-infrastructure--ingestion\"\u003eüß± Infrastructure + Ingestion\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eComponent\u003c/th\u003e\n          \u003cth\u003eStatus\u003c/th\u003e\n          \u003cth\u003eNotes\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eWindows Server (DC01)\u003c/td\u003e\n          \u003ctd\u003e‚úÖ Configured with static IP\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eMember Windows Host\u003c/td\u003e\n          \u003ctd\u003e‚úÖ Logs exported via Winlogbeat\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eWinlogbeat JSON Workflow\u003c/td\u003e\n          \u003ctd\u003e‚úÖ SCP + filter/enrich to SOF-ELK\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eSOF-ELK Ingestion (Ubuntu)\u003c/td\u003e\n          \u003ctd\u003e‚úÖ New version deployed\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eKibana + Index Visibility\u003c/td\u003e\n          \u003ctd\u003e‚úÖ Verified working\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eCustom Index Definitions\u003c/td\u003e\n          \u003ctd\u003e‚ö†Ô∏è Partially done, needs tuning\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"-threat-emulation--detection-engineering\"\u003e‚öîÔ∏è Threat Emulation \u0026amp; Detection Engineering\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eTask\u003c/th\u003e\n          \u003cth\u003eStatus\u003c/th\u003e\n          \u003cth\u003eNotes\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eAtomic Red Team Setup\u003c/td\u003e\n          \u003ctd\u003e‚¨ú Not started\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eEmulate TTPs\u003c/td\u003e\n          \u003ctd\u003e‚¨ú Planned\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eDetection Validation in ELK\u003c/td\u003e\n          \u003ctd\u003e‚¨ú Planned\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eATT\u0026amp;CK Mapping (Log Tagging)\u003c/td\u003e\n          \u003ctd\u003e‚¨ú Planned\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"-aiml--triage\"\u003eüß† AI/ML \u0026amp; Triage\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eTask\u003c/th\u003e\n          \u003cth\u003eStatus\u003c/th\u003e\n          \u003cth\u003eNotes\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eFeature Engineering from Logs\u003c/td\u003e\n          \u003ctd\u003e‚¨ú Not started\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eML Model Training/Triage Layer\u003c/td\u003e\n          \u003ctd\u003e‚¨ú Not started\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eExplainability (e.g. SHAP, LIME)\u003c/td\u003e\n          \u003ctd\u003e‚¨ú Not started\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"-docs-blog-and-content\"\u003e‚úçÔ∏è Docs, Blog, and Content\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003ePage/Post\u003c/th\u003e\n          \u003cth\u003eStatus\u003c/th\u003e\n          \u003cth\u003eNotes\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003esite-setup.md\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e‚úÖ Published\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003e/docs/\u003c/code\u003e index\u003c/td\u003e\n          \u003ctd\u003e‚úÖ Scaffolded\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003e/about.md\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e‚úÖ Done\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003estatus.md\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e‚úÖ This page\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eCheck‚ÄìDo‚ÄìCheck Templates\u003c/td\u003e\n          \u003ctd\u003e‚¨ú Planned\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003cp\u003eStay tuned for updates as OPFORGE evolves into a full-spectrum cyber detection and AI engineering lab.\u003c/p\u003e","title":"OPFORGE Status Overview"},{"content":"üîç Purpose Deploy and configure the SOF-ELK stack for ingestion of structured JSON logs from Winlogbeat and other sources inside the OPFORGE lab.\n‚úÖ Prerequisites VMware Workstation Pro VM: OPF-LOG01 Latest SOF-ELK Ubuntu-based image deployed Static IP assignment (e.g., 192.168.77.40) Inbound SSH/SCP and port 5044 (Beats input) allowed JSON-formatted Winlogbeat files structured for ingest üîß Check‚ÄìDo‚ÄìCheck Workflow üîç Check Confirm network interface and IP: ip a ip route ping -c 3 8.8.8.8 Confirm Logstash is running: sudo systemctl status logstash ‚úÖ Do 1. Assign Static IP with Netplan File: /etc/netplan/01-netcfg.yaml\nnetwork: version: 2 ethernets: ens33: addresses: - 192.168.77.40/24 nameservers: addresses: [1.1.1.1, 8.8.8.8] routes: - to: default via: 192.168.77.1 Apply it:\nsudo netplan apply 2. Ensure /logstash/kape/ exists and is writable sudo mkdir -p /logstash/kape sudo chown elk_user:elk_user /logstash/kape 3. Verify SOF-ELK Beats Listener grep 5044 /etc/logstash/conf.d/* If not active:\necho \u0026#34;input { beats { port =\u0026gt; 5044 } } output { stdout { codec =\u0026gt; rubydebug } }\u0026#34; | sudo tee /etc/logstash/conf.d/test-beats.conf Restart Logstash:\nsudo systemctl restart logstash 4. Ingest a Test File scp test.json elk_user@192.168.77.40:/logstash/kape/ Tail the Logstash log:\nsudo tail -f /var/log/logstash/logstash-plain.log üîç Check Verify document count in Elasticsearch: curl -XGET \u0026#39;localhost:9200/_cat/indices?v\u0026#39; Check Kibana at http://192.168.77.40 Navigate to Stack Management ‚Üí Data Views Create a new index pattern for winlogbeat-* üß† Notes SOF-ELK includes prebuilt parsers but may require tuning Custom .conf files can be added to /etc/logstash/conf.d/ Use /tmp/*.json outputs during troubleshooting Next step: visualize logs with Kibana ‚Üí `/docs/kibana-setup/\n","permalink":"https://opforge.dev/docs/sof-elk/","summary":"\u003ch2 id=\"-purpose\"\u003eüîç Purpose\u003c/h2\u003e\n\u003cp\u003eDeploy and configure the SOF-ELK stack for ingestion of structured JSON logs from Winlogbeat and other sources inside the OPFORGE lab.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-prerequisites\"\u003e‚úÖ Prerequisites\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eVMware Workstation Pro VM: \u003ccode\u003eOPF-LOG01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eLatest SOF-ELK Ubuntu-based image deployed\u003c/li\u003e\n\u003cli\u003eStatic IP assignment (e.g., \u003ccode\u003e192.168.77.40\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eInbound SSH/SCP and port 5044 (Beats input) allowed\u003c/li\u003e\n\u003cli\u003eJSON-formatted Winlogbeat files structured for ingest\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-checkdocheck-workflow\"\u003eüîß Check‚ÄìDo‚ÄìCheck Workflow\u003c/h2\u003e\n\u003ch3 id=\"-check\"\u003eüîç Check\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eConfirm network interface and IP:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eip a\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eip route\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eping -c \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e 8.8.8.8\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003eConfirm Logstash is running:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo systemctl status logstash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"-do\"\u003e‚úÖ Do\u003c/h3\u003e\n\u003ch4 id=\"1-assign-static-ip-with-netplan\"\u003e1. Assign Static IP with Netplan\u003c/h4\u003e\n\u003cp\u003eFile: \u003ccode\u003e/etc/netplan/01-netcfg.yaml\u003c/code\u003e\u003c/p\u003e","title":"SOF-ELK Setup \u0026 Ingestion"},{"content":"‚úÖ Check SCP tool (e.g., pscp.exe) installed SSH keypair created and trusted by SOF-ELK Export directory contains .ndjson files Target path on SOF-ELK exists and is writable ‚öôÔ∏è Do Create a PowerShell script:\n$sourceFolder = \u0026#34;C:\\ProgramData\\winlogbeat\\opforge-export\u0026#34; $tempOutput = \u0026#34;C:\\Temp\\opforge-winlogbeat-cleaned.json\u0026#34; $sofElkUser = \u0026#34;elk_user\u0026#34; $sofElkHost = \u0026#34;192.168.77.40\u0026#34; $sofElkDest = \u0026#34;/logstash/kape/\u0026#34; $timestamp = Get-Date -Format \u0026#34;yyyyMMddHHmmss\u0026#34; $finalFile = \u0026#34;opforge-winlogbeat-$timestamp.json\u0026#34; # Process and transfer Get-ChildItem $sourceFolder -Filter \u0026#34;winlogbeat.json-*.ndjson\u0026#34; | ForEach-Object { Get-Content $_.FullName | ForEach-Object { try { $event = $_ | ConvertFrom-Json $event | ConvertTo-Json -Depth 10 -Compress } catch {} } | Out-File -Encoding utf8 -FilePath $tempOutput \u0026amp; \u0026#39;C:\\Program Files\\PuTTY\\pscp.exe\u0026#39; -i \u0026#34;C:\\Users\\Administrator\\Documents\\id_rsa.ppk\u0026#34; ` $tempOutput \u0026#34;$sofElkUser@$sofElkHost:$sofElkDest$finalFile\u0026#34; Remove-Item $_.FullName -Force } üîç Check JSON files arrive in /logstash/kape/ on opf-log01 Files are parseable with jq or cat | head SCP transfer succeeds without errors ","permalink":"https://opforge.dev/posts/log-transfer-powershell-scp/","summary":"This post describes how to automate the conversion and transfer of Winlogbeat logs from \u003ccode\u003eopf-mbr01\u003c/code\u003e to \u003ccode\u003eopf-log01\u003c/code\u003e using PowerShell and SCP.","title":"From Host to Hive: Transferring Logs with PowerShell + SCP"},{"content":"‚úÖ Check Winlogbeat service is running Security logs present in Event Viewer Static export path created (e.g., C:\\ProgramData\\winlogbeat\\opforge-export\\) SOF-ELK reachable via IP (e.g., 192.168.77.40) ‚öôÔ∏è Do Modify winlogbeat.yml:\noutput.file: path: \u0026#34;C:/ProgramData/winlogbeat/opforge-export\u0026#34; filename: \u0026#34;winlogbeat.json\u0026#34; rotate_every_kb: 10000 number_of_files: 5 codec.format: string: \u0026#39;%{[message]}\u0026#39; Restart Winlogbeat:\nRestart-Service winlogbeat üîç Check .ndjson files appear in the export directory Each entry is valid line-separated JSON Key events (e.g., 4624, 4688, 1102) are present ","permalink":"https://opforge.dev/posts/winlogbeat-export-opf-mbr01/","summary":"We configure Winlogbeat on \u003ccode\u003eopf-mbr01\u003c/code\u003e to export JSON-formatted logs to disk. This allows enriched post-processing before ingesting into SOF-ELK.","title":"Precision Logging: Exporting Winlogbeat Data from OPFORGE"},{"content":"‚úÖ Check Define static IP (e.g., 192.168.77.40/24) Verify existing DNS settings on opf-dc01 for proper resolution Confirm latest Ubuntu-based version of SOF-ELK is available Snapshot VM prior to major config changes ‚öôÔ∏è Do Deploy SOF-ELK using the latest Ubuntu-based VM image Configure netplan: network: version: 2 ethernets: ens33: dhcp4: no addresses: - 192.168.77.40/24 gateway4: 192.168.77.1 nameservers: addresses: - 192.168.77.10 Apply config: sudo netplan apply Confirm services are running: sudo systemctl status logstash sudo systemctl status elasticsearch sudo systemctl status kibana üîç Check Kibana loads at http://opf-log01:5601 Logstash logs show listeners on key ports (5044, 5514) Elasticsearch responds at localhost:9200 ","permalink":"https://opforge.dev/posts/opf-log01-sof-elk-setup/","summary":"This post walks through the deployment and configuration of \u003ccode\u003eopf-log01\u003c/code\u003e, the centralized logging VM for OPFORGE, powered by SOF-ELK. From network setup to confirming ELK stack services, this guide ensures a solid foundation for ingesting security-relevant data.","title":"Ingest to Analyze: Bringing SOF-ELK Online"},{"content":"This post documents the process of building the official website for OPFORGE, a cybersecurity lab project focused on detection engineering, threat emulation, and explainable AI.\nüîß Tooling Stack Hugo ‚Äì Static site generator (v0.147.1) PaperMod ‚Äì Lightweight, responsive Hugo theme GitHub Pages ‚Äì CI/CD-backed static hosting Cloudflare DNS ‚Äì Domain and HTTPS management Custom Domain ‚Äì https://opforge.dev üß± Build Process Created site: hugo new site opforge-site --format yaml Installed theme: git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod Configured hugo.yaml with menus, theme, and metadata\nCreated first post and tested site locally:\nhugo server Set up GitHub Actions for CI/CD: peaceiris/actions-hugo@v2 for building peaceiris/actions-gh-pages@v3 for deployment Set baseURL for GitHub Pages: baseURL: \u0026#34;https://ATHL337.github.io/opforge-site/\u0026#34; Set GitHub Pages source branch to gh-pages in repository settings\nUpdated DNS via Cloudflare:\nA records for root domain pointing to GitHub Pages IPs CNAME for www pointing to ATHL337.github.io HTTPS enforced üåê Outcome With minimal effort and a clean Hugo theme, the OPFORGE site is:\nEasy to write and publish to Fully version-controlled Built for scaling into documentation, blog posts, and operator guides üß† Lessons Learned Always configure baseURL properly for Hugo builds Don‚Äôt push the public/ directory‚Äîlet CI/CD handle it GitHub Actions + Hugo + Cloudflare = elegant, scalable, and secure More blog posts coming soon on the build-out of the lab, including SOF-ELK setup, Winlogbeat JSON export, and ingestion pipelines.\n","permalink":"https://opforge.dev/posts/site-setup/","summary":"\u003cp\u003eThis post documents the process of building the official website for \u003cstrong\u003eOPFORGE\u003c/strong\u003e, a cybersecurity lab project focused on detection engineering, threat emulation, and explainable AI.\u003c/p\u003e\n\u003ch2 id=\"-tooling-stack\"\u003eüîß Tooling Stack\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHugo\u003c/strong\u003e ‚Äì Static site generator (v0.147.1)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePaperMod\u003c/strong\u003e ‚Äì Lightweight, responsive Hugo theme\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGitHub Pages\u003c/strong\u003e ‚Äì CI/CD-backed static hosting\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCloudflare DNS\u003c/strong\u003e ‚Äì Domain and HTTPS management\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCustom Domain\u003c/strong\u003e ‚Äì \u003ccode\u003ehttps://opforge.dev\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-build-process\"\u003eüß± Build Process\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eCreated site:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   hugo new site opforge-site --format yaml\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003eInstalled theme:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\n\u003cp\u003eConfigured \u003ccode\u003ehugo.yaml\u003c/code\u003e with menus, theme, and metadata\u003c/p\u003e","title":"Building the OPFORGE Website"},{"content":"‚úÖ Check Define static IP plan (e.g., 192.168.77.10/24 for opf-dc01) Decide on a domain name (e.g., opforge.local) Draft realistic Organizational Unit (OU) structure Determine initial user/group and DNS configuration ‚öôÔ∏è Do Install Windows Server 2019 (Standard Core) Set static IP, DNS (self-referential), and hostname Use Server Manager or sconfig to install AD DS role Promote to Domain Controller using dcpromo GUI or PowerShell: Install-WindowsFeature AD-Domain-Services -IncludeManagementTools Install-ADDSForest -DomainName \u0026#34;opforge.local\u0026#34; -InstallDNS -Force Create initial OU tree: OPFORGE\\Computers\\Servers OPFORGE\\Users\\RedTeam, BlueTeam, ServiceAccounts üîç Check Log in via domain admin to ensure proper promotion Validate nslookup returns local DNS Confirm Active Directory Users and Computers (ADUC) shows correct structure Document credentials and snapshot before member server joins ","permalink":"https://opforge.dev/posts/opf-dc01-domain-controller/","summary":"In this post, we configure OPFORGE\u0026rsquo;s foundational infrastructure by building the domain controller \u003ccode\u003eopf-dc01\u003c/code\u003e. We\u0026rsquo;ll define our network structure, stand up Active Directory, and prepare the environment for workstation and log server integration.","title":"Forging the Core: Building OPFORGE's Domain Controller"},{"content":"Welcome to OPFORGE: the Operational Forge for modern cyber capabilities. This blog series documents the buildout of a flexible, high-fidelity lab designed to support:\nThreat emulation using tools like Atomic Red Team and custom adversary simulations Detection engineering against MITRE ATT\u0026amp;CK TTPs Ingestion and correlation using SOF-ELK and custom pipelines AI/ML-assisted triage and explainable decision pipelines The infrastructure is powered by a set of virtual machines hosted in VMware Workstation Pro, starting with:\nopf-dc01: Windows Server Domain Controller for Active Directory opf-log01: SOF-ELK-based ingestion server opf-mbr01: Windows 10 Member Workstation (target for attack + log source) opf-red01: Threat emulation box (C2 + Atomic) opf-blue01: Analyst jumpbox (Kibana, Sigma, notebooks) The lab is logically segmented using a 192.168.77.0/24 network and tracks realistic OU and host deployment for flexibility.\nStay tuned for detailed Check‚ÄìDo‚ÄìCheck style walkthroughs.\n","permalink":"https://opforge.dev/posts/opforge-overview/","summary":"Introducing the OPFORGE project‚Äîa purpose-built cyber operations lab focused on threat emulation, detection engineering, and explainable AI.","title":"OPFORGE Overview"}]